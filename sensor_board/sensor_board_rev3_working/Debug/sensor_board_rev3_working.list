
sensor_board_rev3_working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d518  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800d6a8  0800d6a8  0001d6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8a4  0800d8a4  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  0800d8a4  0800d8a4  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d8a4  0800d8a4  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8a4  0800d8a4  0001d8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8a8  0800d8a8  0001d8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800d8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ce60  20000238  0800dae4  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d098  0800dae4  0002d098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003186c  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000059f5  00000000  00000000  00051ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002078  00000000  00000000  000574d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001de0  00000000  00000000  00059548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029782  00000000  00000000  0005b328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f54a  00000000  00000000  00084aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e424a  00000000  00000000  000a3ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018823e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087b4  00000000  00000000  001882bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d690 	.word	0x0800d690

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800d690 	.word	0x0800d690

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2uiz>:
 80009bc:	004a      	lsls	r2, r1, #1
 80009be:	d211      	bcs.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d211      	bcs.n	80009ea <__aeabi_d2uiz+0x2e>
 80009c6:	d50d      	bpl.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d40e      	bmi.n	80009f0 <__aeabi_d2uiz+0x34>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	fa23 f002 	lsr.w	r0, r3, r2
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d102      	bne.n	80009f6 <__aeabi_d2uiz+0x3a>
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	4770      	bx	lr
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	4770      	bx	lr

080009fc <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	461a      	mov	r2, r3
 8000a08:	460b      	mov	r3, r1
 8000a0a:	72fb      	strb	r3, [r7, #11]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	889b      	ldrh	r3, [r3, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	4619      	mov	r1, r3
 8000a26:	f001 ff03 	bl	8002830 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	6898      	ldr	r0, [r3, #8]
 8000a2e:	f107 010b 	add.w	r1, r7, #11
 8000a32:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a36:	2201      	movs	r2, #1
 8000a38:	f004 fdb8 	bl	80055ac <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	6898      	ldr	r0, [r3, #8]
 8000a40:	893a      	ldrh	r2, [r7, #8]
 8000a42:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f004 ff16 	bl	8005878 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	889b      	ldrh	r3, [r3, #4]
 8000a54:	2201      	movs	r2, #1
 8000a56:	4619      	mov	r1, r3
 8000a58:	f001 feea 	bl	8002830 <HAL_GPIO_WritePin>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	460b      	mov	r3, r1
 8000a72:	72fb      	strb	r3, [r7, #11]
 8000a74:	4613      	mov	r3, r2
 8000a76:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	889b      	ldrh	r3, [r3, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	f001 fed4 	bl	8002830 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6898      	ldr	r0, [r3, #8]
 8000a8c:	f107 010b 	add.w	r1, r7, #11
 8000a90:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a94:	2201      	movs	r2, #1
 8000a96:	f004 fd89 	bl	80055ac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	6898      	ldr	r0, [r3, #8]
 8000a9e:	893a      	ldrh	r2, [r7, #8]
 8000aa0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	f004 fd81 	bl	80055ac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	889b      	ldrh	r3, [r3, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f001 febb 	bl	8002830 <HAL_GPIO_WritePin>
}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b084      	sub	sp, #16
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 8000ace:	2300      	movs	r3, #0
 8000ad0:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 8000ad2:	2381      	movs	r3, #129	; 0x81
 8000ad4:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 8000ad6:	f107 020f 	add.w	r2, r7, #15
 8000ada:	2301      	movs	r3, #1
 8000adc:	216b      	movs	r1, #107	; 0x6b
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffc0 	bl	8000a64 <_icm_write_bytes>
	HAL_Delay(1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f001 fbe3 	bl	80022b0 <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 8000aee:	f107 020f 	add.w	r2, r7, #15
 8000af2:	2301      	movs	r3, #1
 8000af4:	216b      	movs	r1, #107	; 0x6b
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ffb4 	bl	8000a64 <_icm_write_bytes>
    HAL_Delay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f001 fbd7 	bl	80022b0 <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 8000b02:	f107 020c 	add.w	r2, r7, #12
 8000b06:	2301      	movs	r3, #1
 8000b08:	2175      	movs	r1, #117	; 0x75
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ff76 	bl	80009fc <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 8000b10:	7b3b      	ldrb	r3, [r7, #12]
 8000b12:	2bac      	cmp	r3, #172	; 0xac
 8000b14:	d001      	beq.n	8000b1a <icm20601_init+0x58>
 8000b16:	2300      	movs	r3, #0
 8000b18:	e093      	b.n	8000c42 <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 8000b1a:	233f      	movs	r3, #63	; 0x3f
 8000b1c:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 8000b1e:	f107 020f 	add.w	r2, r7, #15
 8000b22:	2301      	movs	r3, #1
 8000b24:	216c      	movs	r1, #108	; 0x6c
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ff9c 	bl	8000a64 <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8000b30:	f107 020f 	add.w	r2, r7, #15
 8000b34:	2301      	movs	r3, #1
 8000b36:	216a      	movs	r1, #106	; 0x6a
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff93 	bl	8000a64 <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 8000b3e:	2341      	movs	r3, #65	; 0x41
 8000b40:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8000b42:	f107 020f 	add.w	r2, r7, #15
 8000b46:	2301      	movs	r3, #1
 8000b48:	216a      	movs	r1, #106	; 0x6a
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ff8a 	bl	8000a64 <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7b1b      	ldrb	r3, [r3, #12]
 8000b54:	2b08      	cmp	r3, #8
 8000b56:	d102      	bne.n	8000b5e <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 8000b58:	2308      	movs	r3, #8
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e002      	b.n	8000b64 <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	7b1b      	ldrb	r3, [r3, #12]
 8000b62:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 8000b64:	f107 020f 	add.w	r2, r7, #15
 8000b68:	2301      	movs	r3, #1
 8000b6a:	211d      	movs	r1, #29
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff79 	bl	8000a64 <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	7b5b      	ldrb	r3, [r3, #13]
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 8000b7c:	f107 020f 	add.w	r2, r7, #15
 8000b80:	2301      	movs	r3, #1
 8000b82:	211c      	movs	r1, #28
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff6d 	bl	8000a64 <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7b9b      	ldrb	r3, [r3, #14]
 8000b8e:	2b08      	cmp	r3, #8
 8000b90:	d119      	bne.n	8000bc6 <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 8000b92:	2300      	movs	r3, #0
 8000b94:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8000b96:	f107 020f 	add.w	r2, r7, #15
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	211a      	movs	r1, #26
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff60 	bl	8000a64 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7bdb      	ldrb	r3, [r3, #15]
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8000bb6:	f107 020f 	add.w	r2, r7, #15
 8000bba:	2301      	movs	r3, #1
 8000bbc:	211b      	movs	r1, #27
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff50 	bl	8000a64 <_icm_write_bytes>
 8000bc4:	e033      	b.n	8000c2e <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7b9b      	ldrb	r3, [r3, #14]
 8000bca:	2b09      	cmp	r3, #9
 8000bcc:	d119      	bne.n	8000c02 <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8000bd2:	f107 020f 	add.w	r2, r7, #15
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	211a      	movs	r1, #26
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff42 	bl	8000a64 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7bdb      	ldrb	r3, [r3, #15]
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8000bf2:	f107 020f 	add.w	r2, r7, #15
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	211b      	movs	r1, #27
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff32 	bl	8000a64 <_icm_write_bytes>
 8000c00:	e015      	b.n	8000c2e <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7b9b      	ldrb	r3, [r3, #14]
 8000c06:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8000c08:	f107 020f 	add.w	r2, r7, #15
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	211a      	movs	r1, #26
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff27 	bl	8000a64 <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7bdb      	ldrb	r3, [r3, #15]
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8000c20:	f107 020f 	add.w	r2, r7, #15
 8000c24:	2301      	movs	r3, #1
 8000c26:	211b      	movs	r1, #27
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff1b 	bl	8000a64 <_icm_write_bytes>
     }


    tmp = 0x00;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 8000c32:	f107 020f 	add.w	r2, r7, #15
 8000c36:	2301      	movs	r3, #1
 8000c38:	216c      	movs	r1, #108	; 0x6c
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ff12 	bl	8000a64 <_icm_write_bytes>


    return 1;
 8000c40:	2301      	movs	r3, #1
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 8000c5e:	f107 0208 	add.w	r2, r7, #8
 8000c62:	2306      	movs	r3, #6
 8000c64:	213b      	movs	r1, #59	; 0x3b
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fec8 	bl	80009fc <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 8000c6c:	7a3b      	ldrb	r3, [r7, #8]
 8000c6e:	b21a      	sxth	r2, r3
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	801a      	strh	r2, [r3, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	801a      	strh	r2, [r3, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c88:	7a7b      	ldrb	r3, [r7, #9]
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 8000c94:	7aba      	ldrb	r2, [r7, #10]
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	3302      	adds	r3, #2
 8000c9a:	b212      	sxth	r2, r2
 8000c9c:	801a      	strh	r2, [r3, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca6:	021a      	lsls	r2, r3, #8
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	3302      	adds	r3, #2
 8000cac:	b212      	sxth	r2, r2
 8000cae:	801a      	strh	r2, [r3, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000cb8:	7afb      	ldrb	r3, [r7, #11]
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	b212      	sxth	r2, r2
 8000cc4:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 8000cc6:	7b3a      	ldrb	r2, [r7, #12]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	3304      	adds	r3, #4
 8000ccc:	b212      	sxth	r2, r2
 8000cce:	801a      	strh	r2, [r3, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd8:	021a      	lsls	r2, r3, #8
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	b212      	sxth	r2, r2
 8000ce0:	801a      	strh	r2, [r3, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000cea:	7b7b      	ldrb	r3, [r7, #13]
 8000cec:	b21a      	sxth	r2, r3
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	b212      	sxth	r2, r2
 8000cf6:	801a      	strh	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 8000d14:	f107 0208 	add.w	r2, r7, #8
 8000d18:	2306      	movs	r3, #6
 8000d1a:	2143      	movs	r1, #67	; 0x43
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fe6d 	bl	80009fc <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 8000d22:	7a3b      	ldrb	r3, [r7, #8]
 8000d24:	b21a      	sxth	r2, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	801a      	strh	r2, [r3, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	801a      	strh	r2, [r3, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d3e:	7a7b      	ldrb	r3, [r7, #9]
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	4313      	orrs	r3, r2
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 8000d4a:	7aba      	ldrb	r2, [r7, #10]
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	3302      	adds	r3, #2
 8000d50:	b212      	sxth	r2, r2
 8000d52:	801a      	strh	r2, [r3, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	3302      	adds	r3, #2
 8000d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5c:	021a      	lsls	r2, r3, #8
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	3302      	adds	r3, #2
 8000d62:	b212      	sxth	r2, r2
 8000d64:	801a      	strh	r2, [r3, #0]
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	3302      	adds	r3, #2
 8000d76:	430a      	orrs	r2, r1
 8000d78:	b212      	sxth	r2, r2
 8000d7a:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 8000d7c:	7b3a      	ldrb	r2, [r7, #12]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	3304      	adds	r3, #4
 8000d82:	b212      	sxth	r2, r2
 8000d84:	801a      	strh	r2, [r3, #0]
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d8e:	021a      	lsls	r2, r3, #8
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	3304      	adds	r3, #4
 8000d94:	b212      	sxth	r2, r2
 8000d96:	801a      	strh	r2, [r3, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000da0:	7b7b      	ldrb	r3, [r7, #13]
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	3304      	adds	r3, #4
 8000da8:	430a      	orrs	r2, r1
 8000daa:	b212      	sxth	r2, r2
 8000dac:	801a      	strh	r2, [r3, #0]
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 8000dc4:	f107 020c 	add.w	r2, r7, #12
 8000dc8:	2302      	movs	r3, #2
 8000dca:	2141      	movs	r1, #65	; 0x41
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fe15 	bl	80009fc <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 8000dd2:	7b3b      	ldrb	r3, [r7, #12]
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	801a      	strh	r2, [r3, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	801a      	strh	r2, [r3, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dee:	7b7b      	ldrb	r3, [r7, #13]
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	801a      	strh	r2, [r3, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	0000      	movs	r0, r0
 8000e04:	0000      	movs	r0, r0
	...

08000e08 <_get_conversion_ticks>:
    dst |= (src_low); \
  } while (0);

// *** Local functions *** //

uint32_t _get_conversion_ticks(struct ms5607_dev * dev){
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	uint32_t time;
	time = (BARO_CONVERSION_TIME_OSR_BASE * (dev->osr+1) * osKernelGetTickFreq()) / 1000;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7a1b      	ldrb	r3, [r3, #8]
 8000e14:	3301      	adds	r3, #1
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fb2c 	bl	8000474 <__aeabi_i2d>
 8000e1c:	a319      	add	r3, pc, #100	; (adr r3, 8000e84 <_get_conversion_ticks+0x7c>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff fb91 	bl	8000548 <__aeabi_dmul>
 8000e26:	4603      	mov	r3, r0
 8000e28:	460c      	mov	r4, r1
 8000e2a:	4625      	mov	r5, r4
 8000e2c:	461c      	mov	r4, r3
 8000e2e:	f008 fa8b 	bl	8009348 <osKernelGetTickFreq>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb0d 	bl	8000454 <__aeabi_ui2d>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4620      	mov	r0, r4
 8000e40:	4629      	mov	r1, r5
 8000e42:	f7ff fb81 	bl	8000548 <__aeabi_dmul>
 8000e46:	4603      	mov	r3, r0
 8000e48:	460c      	mov	r4, r1
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	4621      	mov	r1, r4
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <_get_conversion_ticks+0x78>)
 8000e54:	f7ff fca2 	bl	800079c <__aeabi_ddiv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	460c      	mov	r4, r1
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	4621      	mov	r1, r4
 8000e60:	f7ff fdac 	bl	80009bc <__aeabi_d2uiz>
 8000e64:	4603      	mov	r3, r0
 8000e66:	60fb      	str	r3, [r7, #12]
	if (time < 1) time = 1;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <_get_conversion_ticks+0x6a>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
	return time;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e7c:	f3af 8000 	nop.w
 8000e80:	408f4000 	.word	0x408f4000
 8000e84:	33333333 	.word	0x33333333
 8000e88:	3fe33333 	.word	0x3fe33333

08000e8c <_ms_read_bytes>:

// Read bytes
void _ms_read_bytes(struct ms5607_dev * dev, uint8_t command, uint8_t *pData, uint16_t size){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af02      	add	r7, sp, #8
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	461a      	mov	r2, r3
 8000e98:	460b      	mov	r3, r1
 8000e9a:	72fb      	strb	r3, [r7, #11]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->i2c_address, &command, 1, BARO_I2C_TIMEOUT);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	6858      	ldr	r0, [r3, #4]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b299      	uxth	r1, r3
 8000eaa:	f107 020b 	add.w	r2, r7, #11
 8000eae:	230a      	movs	r3, #10
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f001 fd64 	bl	8002980 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->i2c_address, pData, size, BARO_I2C_TIMEOUT);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6858      	ldr	r0, [r3, #4]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b299      	uxth	r1, r3
 8000ec2:	893a      	ldrh	r2, [r7, #8]
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	f001 fe4c 	bl	8002b68 <HAL_I2C_Master_Receive>
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_ms_write_command>:

// Write command
void _ms_write_command(struct ms5607_dev * dev, uint8_t command){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->i2c_address, &command, 1, BARO_I2C_TIMEOUT);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6858      	ldr	r0, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b299      	uxth	r1, r3
 8000eee:	1cfa      	adds	r2, r7, #3
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f001 fd43 	bl	8002980 <HAL_I2C_Master_Transmit>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_read_calibration>:

void _read_calibration(struct ms5607_dev * dev){
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++){
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	e038      	b.n	8000f82 <_read_calibration+0x80>
		uint8_t rec[2] = {0};
 8000f10:	2300      	movs	r3, #0
 8000f12:	813b      	strh	r3, [r7, #8]
		_ms_read_bytes(dev, COMMAND_PROM_READ_BASE+(2*(i+1)), rec, 2);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3351      	adds	r3, #81	; 0x51
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	b2d9      	uxtb	r1, r3
 8000f1e:	f107 0208 	add.w	r2, r7, #8
 8000f22:	2302      	movs	r3, #2
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ffb1 	bl	8000e8c <_ms_read_bytes>
		UINT8_TO_UINT16(dev->coefficients[i],rec[0], rec[1]);
 8000f2a:	7a3b      	ldrb	r3, [r7, #8]
 8000f2c:	b299      	uxth	r1, r3
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3304      	adds	r3, #4
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	460a      	mov	r2, r1
 8000f3a:	805a      	strh	r2, [r3, #2]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3304      	adds	r3, #4
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	885b      	ldrh	r3, [r3, #2]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b299      	uxth	r1, r3
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3304      	adds	r3, #4
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	460a      	mov	r2, r1
 8000f58:	805a      	strh	r2, [r3, #2]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	885a      	ldrh	r2, [r3, #2]
 8000f66:	7a7b      	ldrb	r3, [r7, #9]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	b299      	uxth	r1, r3
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3304      	adds	r3, #4
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	460a      	mov	r2, r1
 8000f7a:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < 6; i++){
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	ddc3      	ble.n	8000f10 <_read_calibration+0xe>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <ms5607_init>:

// *** Global functions *** //

void ms5607_init(struct ms5607_dev * dev){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	uint32_t reset_time;
	reset_time = 3 * osKernelGetTickFreq() / 1000;
 8000f98:	f008 f9d6 	bl	8009348 <osKernelGetTickFreq>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <ms5607_init+0x3c>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	099b      	lsrs	r3, r3, #6
 8000fac:	60fb      	str	r3, [r7, #12]
	// General Procedure:
	//  1. reset chip
	//  2. Read out calibration

	// Reset chip
	_ms_write_command(dev, COMMAND_RESET);
 8000fae:	211e      	movs	r1, #30
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff91 	bl	8000ed8 <_ms_write_command>
	osDelay(reset_time);
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f008 fa76 	bl	80094a8 <osDelay>

	// Read calibration
	_read_calibration(dev);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ffa0 	bl	8000f02 <_read_calibration>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	10624dd3 	.word	0x10624dd3

08000fd0 <ms5607_read_raw_pres_temp>:

void ms5607_read_raw_pres_temp(struct ms5607_dev * dev, int32_t *pressure_raw, int32_t *temperature_raw){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	uint32_t wait_time;
	uint8_t command;
	uint8_t rec[3] = {0};
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	460a      	mov	r2, r1
 8000fe4:	801a      	strh	r2, [r3, #0]
 8000fe6:	460a      	mov	r2, r1
 8000fe8:	709a      	strb	r2, [r3, #2]

	// figure out how many ticks a conversion needs
	wait_time = _get_conversion_ticks(dev);
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f7ff ff0c 	bl	8000e08 <_get_conversion_ticks>
 8000ff0:	6178      	str	r0, [r7, #20]

	// initiate pressure conversion
	command = COMMAND_CONVERT_D1_BASE + (dev->osr *2);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	7a1b      	ldrb	r3, [r3, #8]
 8000ff6:	3320      	adds	r3, #32
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	74fb      	strb	r3, [r7, #19]
	_ms_write_command(dev, command);
 8000ffe:	7cfb      	ldrb	r3, [r7, #19]
 8001000:	4619      	mov	r1, r3
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff ff68 	bl	8000ed8 <_ms_write_command>

	// wait till the conversion is done
	osDelay(wait_time);
 8001008:	6978      	ldr	r0, [r7, #20]
 800100a:	f008 fa4d 	bl	80094a8 <osDelay>

	// read out raw pressure value
	_ms_read_bytes(dev, COMMAND_ADC_READ, rec, 3);
 800100e:	f107 0210 	add.w	r2, r7, #16
 8001012:	2303      	movs	r3, #3
 8001014:	2100      	movs	r1, #0
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff ff38 	bl	8000e8c <_ms_read_bytes>
	*pressure_raw = (rec[0] << 16) | (rec[1] << 8) | rec[2];
 800101c:	7c3b      	ldrb	r3, [r7, #16]
 800101e:	041a      	lsls	r2, r3, #16
 8001020:	7c7b      	ldrb	r3, [r7, #17]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	4313      	orrs	r3, r2
 8001026:	7cba      	ldrb	r2, [r7, #18]
 8001028:	431a      	orrs	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	601a      	str	r2, [r3, #0]

	command = COMMAND_CONVERT_D2_BASE + (dev->osr *2);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	7a1b      	ldrb	r3, [r3, #8]
 8001032:	3328      	adds	r3, #40	; 0x28
 8001034:	b2db      	uxtb	r3, r3
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	74fb      	strb	r3, [r7, #19]
	_ms_write_command(dev, command);
 800103a:	7cfb      	ldrb	r3, [r7, #19]
 800103c:	4619      	mov	r1, r3
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f7ff ff4a 	bl	8000ed8 <_ms_write_command>

	// wait till the conversion is done
	osDelay(wait_time);
 8001044:	6978      	ldr	r0, [r7, #20]
 8001046:	f008 fa2f 	bl	80094a8 <osDelay>

	// read out raw pressure value
	_ms_read_bytes(dev, COMMAND_ADC_READ, rec, 3);
 800104a:	f107 0210 	add.w	r2, r7, #16
 800104e:	2303      	movs	r3, #3
 8001050:	2100      	movs	r1, #0
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f7ff ff1a 	bl	8000e8c <_ms_read_bytes>
	*temperature_raw = (rec[0] << 16) | (rec[1] << 8) | rec[2];
 8001058:	7c3b      	ldrb	r3, [r7, #16]
 800105a:	041a      	lsls	r2, r3, #16
 800105c:	7c7b      	ldrb	r3, [r7, #17]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	4313      	orrs	r3, r2
 8001062:	7cba      	ldrb	r2, [r7, #18]
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	601a      	str	r2, [r3, #0]
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <ms5607_read_pres_temp>:

void ms5607_read_pres_temp(struct ms5607_dev * dev, int32_t *temperature, int32_t *pressure){
 8001072:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	int32_t pressure_raw;
	int32_t temperature_raw;

	ms5607_read_raw_pres_temp(dev, &pressure_raw, &temperature_raw);
 8001080:	f107 0210 	add.w	r2, r7, #16
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f7ff ffa0 	bl	8000fd0 <ms5607_read_raw_pres_temp>

	// Calculate real values with coefficients
	int64_t dT;
	int64_t OFF, SENS;

	dT = temperature_raw - ((uint32_t) dev->coefficients[4] << 8);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8a5b      	ldrh	r3, [r3, #18]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f04f 0400 	mov.w	r4, #0
 80010a0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	/* Temperature in 2000  = 20.00° C */
	*temperature = (int32_t) 2000 + (dT * dev->coefficients[5] >> 23);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	8a9b      	ldrh	r3, [r3, #20]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f04f 0400 	mov.w	r4, #0
 80010ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010b0:	fb04 f102 	mul.w	r1, r4, r2
 80010b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010b6:	fb03 f202 	mul.w	r2, r3, r2
 80010ba:	440a      	add	r2, r1
 80010bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010be:	fba1 3403 	umull	r3, r4, r1, r3
 80010c2:	4422      	add	r2, r4
 80010c4:	4614      	mov	r4, r2
 80010c6:	f04f 0100 	mov.w	r1, #0
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	0dd9      	lsrs	r1, r3, #23
 80010d0:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 80010d4:	15e2      	asrs	r2, r4, #23
 80010d6:	460b      	mov	r3, r1
 80010d8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010dc:	461a      	mov	r2, r3
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	601a      	str	r2, [r3, #0]

	OFF = ((int64_t) dev->coefficients[1] << 17) + ((dev->coefficients[3] * dT) >> 6);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	899b      	ldrh	r3, [r3, #12]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	f04f 0400 	mov.w	r4, #0
 80010ec:	ea4f 39d3 	mov.w	r9, r3, lsr #15
 80010f0:	ea4f 4843 	mov.w	r8, r3, lsl #17
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8a1b      	ldrh	r3, [r3, #16]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f04f 0400 	mov.w	r4, #0
 80010fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001100:	fb04 f102 	mul.w	r1, r4, r2
 8001104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001106:	fb03 f202 	mul.w	r2, r3, r2
 800110a:	1888      	adds	r0, r1, r2
 800110c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800110e:	fba2 1203 	umull	r1, r2, r2, r3
 8001112:	1883      	adds	r3, r0, r2
 8001114:	461a      	mov	r2, r3
 8001116:	f04f 0b00 	mov.w	fp, #0
 800111a:	f04f 0c00 	mov.w	ip, #0
 800111e:	ea4f 1b91 	mov.w	fp, r1, lsr #6
 8001122:	ea4b 6b82 	orr.w	fp, fp, r2, lsl #26
 8001126:	ea4f 1ca2 	mov.w	ip, r2, asr #6
 800112a:	eb1b 0308 	adds.w	r3, fp, r8
 800112e:	eb4c 0409 	adc.w	r4, ip, r9
 8001132:	e9c7 3408 	strd	r3, r4, [r7, #32]
	SENS = ((int64_t) dev->coefficients[0] << 16) + ((dev->coefficients[2] * dT) >> 7);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	895b      	ldrh	r3, [r3, #10]
 800113a:	b29b      	uxth	r3, r3
 800113c:	f04f 0400 	mov.w	r4, #0
 8001140:	0c1e      	lsrs	r6, r3, #16
 8001142:	041d      	lsls	r5, r3, #16
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	89db      	ldrh	r3, [r3, #14]
 8001148:	b29b      	uxth	r3, r3
 800114a:	f04f 0400 	mov.w	r4, #0
 800114e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001150:	fb04 f102 	mul.w	r1, r4, r2
 8001154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001156:	fb03 f202 	mul.w	r2, r3, r2
 800115a:	1888      	adds	r0, r1, r2
 800115c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800115e:	fba2 1203 	umull	r1, r2, r2, r3
 8001162:	1883      	adds	r3, r0, r2
 8001164:	461a      	mov	r2, r3
 8001166:	f04f 0800 	mov.w	r8, #0
 800116a:	f04f 0900 	mov.w	r9, #0
 800116e:	ea4f 18d1 	mov.w	r8, r1, lsr #7
 8001172:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 8001176:	ea4f 19e2 	mov.w	r9, r2, asr #7
 800117a:	eb18 0305 	adds.w	r3, r8, r5
 800117e:	eb49 0406 	adc.w	r4, r9, r6
 8001182:	e9c7 3406 	strd	r3, r4, [r7, #24]
	/* Pressure in 110002 = 1100.02 mbar */
	*pressure = (int32_t) ((((pressure_raw * SENS) >> 21) - OFF) >> 15);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	fb04 f102 	mul.w	r1, r4, r2
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	fb03 f202 	mul.w	r2, r3, r2
 8001198:	1888      	adds	r0, r1, r2
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	fba2 1203 	umull	r1, r2, r2, r3
 80011a0:	1883      	adds	r3, r0, r2
 80011a2:	461a      	mov	r2, r3
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	0d4b      	lsrs	r3, r1, #21
 80011ae:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80011b2:	1554      	asrs	r4, r2, #21
 80011b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80011b8:	1a5b      	subs	r3, r3, r1
 80011ba:	eb64 0402 	sbc.w	r4, r4, r2
 80011be:	461d      	mov	r5, r3
 80011c0:	4626      	mov	r6, r4
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	f04f 0400 	mov.w	r4, #0
 80011ca:	0beb      	lsrs	r3, r5, #15
 80011cc:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80011d0:	13f4      	asrs	r4, r6, #15
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	601a      	str	r2, [r3, #0]
}
 80011d8:	bf00      	nop
 80011da:	3730      	adds	r7, #48	; 0x30
 80011dc:	46bd      	mov	sp, r7
 80011de:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b08d      	sub	sp, #52	; 0x34
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ea:	f001 f82a 	bl	8002242 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_USB_DEVICE_Init();
 80011ee:	f00b fca5 	bl	800cb3c <MX_USB_DEVICE_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 f891 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f000 f9cf 	bl	8001598 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011fa:	f000 f911 	bl	8001420 <MX_I2C1_Init>
  MX_SPI1_Init();
 80011fe:	f000 f94f 	bl	80014a0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001202:	f000 f98b 	bl	800151c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001206:	f008 f80d 	bl	8009224 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */

  /* Barometer Mutex */
  const osMutexAttr_t baro_mutex_attr = {
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <main+0xdc>)
 800120c:	f107 0420 	add.w	r4, r7, #32
 8001210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  baro_mutex = osMutexNew(&baro_mutex_attr);
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	4618      	mov	r0, r3
 800121c:	f008 f9b2 	bl	8009584 <osMutexNew>
 8001220:	4602      	mov	r2, r0
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <main+0xe0>)
 8001224:	601a      	str	r2, [r3, #0]
  /* IMU Mutex */
  const osMutexAttr_t imu_mutex_attr = {
 8001226:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <main+0xe4>)
 8001228:	f107 0410 	add.w	r4, r7, #16
 800122c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  imu_mutex = osMutexNew(&imu_mutex_attr);
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4618      	mov	r0, r3
 8001238:	f008 f9a4 	bl	8009584 <osMutexNew>
 800123c:	4602      	mov	r2, r0
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <main+0xe8>)
 8001240:	601a      	str	r2, [r3, #0]


#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <main+0xec>)
 8001244:	463c      	mov	r4, r7
 8001246:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  osMutexPrioInherit,    					  // attr_bits
	  NULL,                                     // memory for control block
	  0U                                        // size for control block
	};

  print_mutex = osMutexNew(&print_mutex_attr);
 800124c:	463b      	mov	r3, r7
 800124e:	4618      	mov	r0, r3
 8001250:	f008 f998 	bl	8009584 <osMutexNew>
 8001254:	4602      	mov	r2, r0
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <main+0xf0>)
 8001258:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  preprocess_queue = osMessageQueueNew(PREPROCESS_QUEUE_SIZE, sizeof(imu_data_t), NULL);
 800125a:	2200      	movs	r2, #0
 800125c:	2110      	movs	r1, #16
 800125e:	2020      	movs	r0, #32
 8001260:	f008 fad8 	bl	8009814 <osMessageQueueNew>
 8001264:	4602      	mov	r2, r0
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <main+0xf4>)
 8001268:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <main+0xf8>)
 800126c:	2100      	movs	r1, #0
 800126e:	481c      	ldr	r0, [pc, #112]	; (80012e0 <main+0xfc>)
 8001270:	f008 f874 	bl	800935c <osThreadNew>
 8001274:	4602      	mov	r2, r0
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <main+0x100>)
 8001278:	601a      	str	r2, [r3, #0]

  /* creation of task_baro_read */
  task_baro_readHandle = osThreadNew(vTaskBaroRead, NULL, &task_baro_read_attributes);
 800127a:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <main+0x104>)
 800127c:	2100      	movs	r1, #0
 800127e:	481b      	ldr	r0, [pc, #108]	; (80012ec <main+0x108>)
 8001280:	f008 f86c 	bl	800935c <osThreadNew>
 8001284:	4602      	mov	r2, r0
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <main+0x10c>)
 8001288:	601a      	str	r2, [r3, #0]

  /* creation of task_imu_read */
  task_imu_readHandle = osThreadNew(vTaskImuRead, NULL, &task_imu_read_attributes);
 800128a:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <main+0x110>)
 800128c:	2100      	movs	r1, #0
 800128e:	481a      	ldr	r0, [pc, #104]	; (80012f8 <main+0x114>)
 8001290:	f008 f864 	bl	800935c <osThreadNew>
 8001294:	4602      	mov	r2, r0
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <main+0x118>)
 8001298:	601a      	str	r2, [r3, #0]

  /* creation of task_send_to_mb */
  task_send_to_mbHandle = osThreadNew(vTaskSendToMb, NULL, &task_send_to_mb_attributes);
 800129a:	4a19      	ldr	r2, [pc, #100]	; (8001300 <main+0x11c>)
 800129c:	2100      	movs	r1, #0
 800129e:	4819      	ldr	r0, [pc, #100]	; (8001304 <main+0x120>)
 80012a0:	f008 f85c 	bl	800935c <osThreadNew>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <main+0x124>)
 80012a8:	601a      	str	r2, [r3, #0]

  /* creation of task_preprocess */
  task_preprocessHandle = osThreadNew(vTaskPreprocess, NULL, &task_preprocess_attributes);
 80012aa:	4a18      	ldr	r2, [pc, #96]	; (800130c <main+0x128>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4818      	ldr	r0, [pc, #96]	; (8001310 <main+0x12c>)
 80012b0:	f008 f854 	bl	800935c <osThreadNew>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <main+0x130>)
 80012b8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012ba:	f007 ffe7 	bl	800928c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012be:	e7fe      	b.n	80012be <main+0xda>
 80012c0:	0800d700 	.word	0x0800d700
 80012c4:	2000c108 	.word	0x2000c108
 80012c8:	0800d71c 	.word	0x0800d71c
 80012cc:	20005f94 	.word	0x20005f94
 80012d0:	0800d738 	.word	0x0800d738
 80012d4:	2000c08c 	.word	0x2000c08c
 80012d8:	20001e24 	.word	0x20001e24
 80012dc:	0800d7a8 	.word	0x0800d7a8
 80012e0:	0800165d 	.word	0x0800165d
 80012e4:	20001dc4 	.word	0x20001dc4
 80012e8:	0800d7cc 	.word	0x0800d7cc
 80012ec:	08001a01 	.word	0x08001a01
 80012f0:	2000a084 	.word	0x2000a084
 80012f4:	0800d7f0 	.word	0x0800d7f0
 80012f8:	08001ab1 	.word	0x08001ab1
 80012fc:	2000c0f4 	.word	0x2000c0f4
 8001300:	0800d814 	.word	0x0800d814
 8001304:	08001f01 	.word	0x08001f01
 8001308:	20006080 	.word	0x20006080
 800130c:	0800d838 	.word	0x0800d838
 8001310:	08001bb9 	.word	0x08001bb9
 8001314:	2000a088 	.word	0x2000a088

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0ae      	sub	sp, #184	; 0xb8
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001322:	2244      	movs	r2, #68	; 0x44
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f00c f9a9 	bl	800d67e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2260      	movs	r2, #96	; 0x60
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f00c f99b 	bl	800d67e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001348:	2310      	movs	r3, #16
 800134a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800134c:	2301      	movs	r3, #1
 800134e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001358:	2360      	movs	r3, #96	; 0x60
 800135a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001364:	2301      	movs	r3, #1
 8001366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800136a:	2301      	movs	r3, #1
 800136c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001370:	2328      	movs	r3, #40	; 0x28
 8001372:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001376:	2307      	movs	r3, #7
 8001378:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800137c:	2302      	movs	r3, #2
 800137e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800138c:	4618      	mov	r0, r3
 800138e:	f002 ff0f 	bl	80041b0 <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001398:	f000 f97c 	bl	8001694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139c:	230f      	movs	r3, #15
 800139e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a0:	2303      	movs	r3, #3
 80013a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013b4:	2104      	movs	r1, #4
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 fb1a 	bl	80049f0 <HAL_RCC_ClockConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013c2:	f000 f967 	bl	8001694 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 80013c6:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80013ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013d4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013d6:	2301      	movs	r3, #1
 80013d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80013de:	2318      	movs	r3, #24
 80013e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013e2:	2307      	movs	r3, #7
 80013e4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80013ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013f2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 fd1a 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001402:	f000 f947 	bl	8001694 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001406:	f44f 7000 	mov.w	r0, #512	; 0x200
 800140a:	f002 fe6b 	bl	80040e4 <HAL_PWREx_ControlVoltageScaling>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8001414:	f000 f93e 	bl	8001694 <Error_Handler>
  }
}
 8001418:	bf00      	nop
 800141a:	37b8      	adds	r7, #184	; 0xb8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_I2C1_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <MX_I2C1_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_I2C1_Init+0x74>)
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <MX_I2C1_Init+0x7c>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_I2C1_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_I2C1_Init+0x74>)
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_I2C1_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_I2C1_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_I2C1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_I2C1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_I2C1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800145a:	480e      	ldr	r0, [pc, #56]	; (8001494 <MX_I2C1_Init+0x74>)
 800145c:	f001 fa00 	bl	8002860 <HAL_I2C_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001466:	f000 f915 	bl	8001694 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800146a:	2100      	movs	r1, #0
 800146c:	4809      	ldr	r0, [pc, #36]	; (8001494 <MX_I2C1_Init+0x74>)
 800146e:	f001 fe51 	bl	8003114 <HAL_I2CEx_ConfigAnalogFilter>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001478:	f000 f90c 	bl	8001694 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_I2C1_Init+0x74>)
 8001480:	f001 fe93 	bl	80031aa <HAL_I2CEx_ConfigDigitalFilter>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 f903 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20001f44 	.word	0x20001f44
 8001498:	40005400 	.word	0x40005400
 800149c:	00702991 	.word	0x00702991

080014a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <MX_SPI1_Init+0x74>)
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <MX_SPI1_Init+0x78>)
 80014a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_SPI1_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_SPI1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <MX_SPI1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_SPI1_Init+0x74>)
 80014d6:	2218      	movs	r2, #24
 80014d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_SPI1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_SPI1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_SPI1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ee:	2207      	movs	r2, #7
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_SPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_SPI1_Init+0x74>)
 80014fa:	2208      	movs	r2, #8
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_SPI1_Init+0x74>)
 8001500:	f003 ffca 	bl	8005498 <HAL_SPI_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800150a:	f000 f8c3 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000c090 	.word	0x2000c090
 8001518:	40013000 	.word	0x40013000

0800151c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_SPI2_Init+0x74>)
 8001522:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <MX_SPI2_Init+0x78>)
 8001524:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_SPI2_Init+0x74>)
 8001528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800152c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_SPI2_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_SPI2_Init+0x74>)
 8001536:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800153a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_SPI2_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_SPI2_Init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_SPI2_Init+0x74>)
 800154a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_SPI2_Init+0x74>)
 8001552:	2220      	movs	r2, #32
 8001554:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_SPI2_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_SPI2_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_SPI2_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_SPI2_Init+0x74>)
 800156a:	2207      	movs	r2, #7
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <MX_SPI2_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_SPI2_Init+0x74>)
 8001576:	2208      	movs	r2, #8
 8001578:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_SPI2_Init+0x74>)
 800157c:	f003 ff8c 	bl	8005498 <HAL_SPI_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001586:	f000 f885 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20001e28 	.word	0x20001e28
 8001594:	40003800 	.word	0x40003800

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	4b29      	ldr	r3, [pc, #164]	; (8001654 <MX_GPIO_Init+0xbc>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	4a28      	ldr	r2, [pc, #160]	; (8001654 <MX_GPIO_Init+0xbc>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_GPIO_Init+0xbc>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <MX_GPIO_Init+0xbc>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	4a22      	ldr	r2, [pc, #136]	; (8001654 <MX_GPIO_Init+0xbc>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <MX_GPIO_Init+0xbc>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_GPIO_Init+0xbc>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <MX_GPIO_Init+0xbc>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_GPIO_Init+0xbc>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2110      	movs	r1, #16
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f001 f917 	bl	8002830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001608:	4813      	ldr	r0, [pc, #76]	; (8001658 <MX_GPIO_Init+0xc0>)
 800160a:	f001 f911 	bl	8002830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800160e:	2310      	movs	r3, #16
 8001610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f000 ff88 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800162c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4619      	mov	r1, r3
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_GPIO_Init+0xc0>)
 8001646:	f000 ff79 	bl	800253c <HAL_GPIO_Init>

}
 800164a:	bf00      	nop
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000
 8001658:	48000400 	.word	0x48000400

0800165c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001664:	f00b fa6a 	bl	800cb3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001668:	2001      	movs	r0, #1
 800166a:	f007 ff1d 	bl	80094a8 <osDelay>
 800166e:	e7fb      	b.n	8001668 <StartDefaultTask+0xc>

08001670 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001682:	f000 fdf7 	bl	8002274 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40012c00 	.word	0x40012c00

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_MspInit+0x4c>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ae:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <HAL_MspInit+0x4c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6613      	str	r3, [r2, #96]	; 0x60
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_MspInit+0x4c>)
 80016b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_MspInit+0x4c>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_MspInit+0x4c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	6593      	str	r3, [r2, #88]	; 0x58
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_MspInit+0x4c>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	210f      	movs	r1, #15
 80016de:	f06f 0001 	mvn.w	r0, #1
 80016e2:	f000 febf 	bl	8002464 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a18      	ldr	r2, [pc, #96]	; (8001774 <HAL_I2C_MspInit+0x80>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d129      	bne.n	800176a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_I2C_MspInit+0x84>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_I2C_MspInit+0x84>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_I2C_MspInit+0x84>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800172e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001734:	2312      	movs	r3, #18
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001738:	2301      	movs	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001740:	2304      	movs	r3, #4
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f000 fef5 	bl	800253c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_I2C_MspInit+0x84>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_I2C_MspInit+0x84>)
 8001758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800175c:	6593      	str	r3, [r2, #88]	; 0x58
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_I2C_MspInit+0x84>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40005400 	.word	0x40005400
 8001778:	40021000 	.word	0x40021000

0800177c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	; 0x30
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a33      	ldr	r2, [pc, #204]	; (8001868 <HAL_SPI_MspInit+0xec>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d129      	bne.n	80017f2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <HAL_SPI_MspInit+0xf0>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a2:	4a32      	ldr	r2, [pc, #200]	; (800186c <HAL_SPI_MspInit+0xf0>)
 80017a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017a8:	6613      	str	r3, [r2, #96]	; 0x60
 80017aa:	4b30      	ldr	r3, [pc, #192]	; (800186c <HAL_SPI_MspInit+0xf0>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_SPI_MspInit+0xf0>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	4a2c      	ldr	r2, [pc, #176]	; (800186c <HAL_SPI_MspInit+0xf0>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <HAL_SPI_MspInit+0xf0>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80017ce:	23c2      	movs	r3, #194	; 0xc2
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017de:	2305      	movs	r3, #5
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ec:	f000 fea6 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017f0:	e035      	b.n	800185e <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <HAL_SPI_MspInit+0xf4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d130      	bne.n	800185e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_SPI_MspInit+0xf0>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_SPI_MspInit+0xf0>)
 8001802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001806:	6593      	str	r3, [r2, #88]	; 0x58
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_SPI_MspInit+0xf0>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_SPI_MspInit+0xf0>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_SPI_MspInit+0xf0>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_SPI_MspInit+0xf0>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800182c:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800183e:	2305      	movs	r3, #5
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	480a      	ldr	r0, [pc, #40]	; (8001874 <HAL_SPI_MspInit+0xf8>)
 800184a:	f000 fe77 	bl	800253c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2105      	movs	r1, #5
 8001852:	2024      	movs	r0, #36	; 0x24
 8001854:	f000 fe06 	bl	8002464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001858:	2024      	movs	r0, #36	; 0x24
 800185a:	f000 fe1f 	bl	800249c <HAL_NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3730      	adds	r7, #48	; 0x30
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40013000 	.word	0x40013000
 800186c:	40021000 	.word	0x40021000
 8001870:	40003800 	.word	0x40003800
 8001874:	48000400 	.word	0x48000400

08001878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08c      	sub	sp, #48	; 0x30
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	2019      	movs	r0, #25
 800188e:	f000 fde9 	bl	8002464 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001892:	2019      	movs	r0, #25
 8001894:	f000 fe02 	bl	800249c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <HAL_InitTick+0x9c>)
 800189a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189c:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <HAL_InitTick+0x9c>)
 800189e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018a2:	6613      	str	r3, [r2, #96]	; 0x60
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_InitTick+0x9c>)
 80018a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018b0:	f107 0210 	add.w	r2, r7, #16
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4611      	mov	r1, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f003 fa26 	bl	8004d0c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018c0:	f003 fa0e 	bl	8004ce0 <HAL_RCC_GetPCLK2Freq>
 80018c4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80018c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c8:	4a13      	ldr	r2, [pc, #76]	; (8001918 <HAL_InitTick+0xa0>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	0c9b      	lsrs	r3, r3, #18
 80018d0:	3b01      	subs	r3, #1
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_InitTick+0xa4>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <HAL_InitTick+0xa8>)
 80018d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_InitTick+0xa4>)
 80018dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018e0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_InitTick+0xa4>)
 80018e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_InitTick+0xa4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_InitTick+0xa4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <HAL_InitTick+0xa4>)
 80018f6:	f004 fd8f 	bl	8006418 <HAL_TIM_Base_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d104      	bne.n	800190a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001900:	4806      	ldr	r0, [pc, #24]	; (800191c <HAL_InitTick+0xa4>)
 8001902:	f004 fdbf 	bl	8006484 <HAL_TIM_Base_Start_IT>
 8001906:	4603      	mov	r3, r0
 8001908:	e000      	b.n	800190c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3730      	adds	r7, #48	; 0x30
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	431bde83 	.word	0x431bde83
 800191c:	2000c10c 	.word	0x2000c10c
 8001920:	40012c00 	.word	0x40012c00

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <MemManage_Handler+0x4>

0800193e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <UsageFault_Handler+0x4>

0800194a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800195e:	f004 fdbb 	bl	80064d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000c10c 	.word	0x2000c10c

0800196c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <SPI2_IRQHandler+0x10>)
 8001972:	f004 fabd 	bl	8005ef0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20001e28 	.word	0x20001e28

08001980 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <USB_IRQHandler+0x10>)
 8001986:	f001 fd66 	bl	8003456 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000ce24 	.word	0x2000ce24

08001994 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <SystemInit+0x64>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199e:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <SystemInit+0x64>)
 80019a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <SystemInit+0x68>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a13      	ldr	r2, [pc, #76]	; (80019fc <SystemInit+0x68>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <SystemInit+0x68>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <SystemInit+0x68>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <SystemInit+0x68>)
 80019c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <SystemInit+0x68>)
 80019cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <SystemInit+0x68>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <SystemInit+0x68>)
 80019d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <SystemInit+0x68>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <SystemInit+0x64>)
 80019e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ea:	609a      	str	r2, [r3, #8]
#endif
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00
 80019fc:	40021000 	.word	0x40021000

08001a00 <vTaskBaroRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskBaroRead(void *argument) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;
	/* actual measurements from sensor */
	int32_t temperature;
	int32_t pressure;

	vInitBaro();
 8001a08:	f000 f838 	bl	8001a7c <vInitBaro>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001a0c:	f007 fc74 	bl	80092f8 <osKernelGetTickCount>
 8001a10:	6178      	str	r0, [r7, #20]
	tick_update = osKernelGetTickFreq() / BARO_SAMPLING_FREQ;
 8001a12:	f007 fc99 	bl	8009348 <osKernelGetTickFreq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <vTaskBaroRead+0x70>)
 8001a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	613b      	str	r3, [r7, #16]
	while (1) {
		tick_count += tick_update;
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4413      	add	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]
		vReadBaro(&temperature, &pressure);
 8001a2a:	f107 0208 	add.w	r2, r7, #8
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f82b 	bl	8001a90 <vReadBaro>
//				temperature, tick_count);

		//TODO HIE AUE STUFF WO MUES GMACHT WERDE MIT DENE DATE

		/* If the Mutex is acquired we write the data into the right variable */
		if (osMutexAcquire(baro_mutex, BARO_MUTEX_TIMEOUT) == osOK) {
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <vTaskBaroRead+0x74>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f007 fe39 	bl	80096b8 <osMutexAcquire>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10d      	bne.n	8001a68 <vTaskBaroRead+0x68>
			baro_data_to_mb.temperature = temperature;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <vTaskBaroRead+0x78>)
 8001a50:	6053      	str	r3, [r2, #4]
			baro_data_to_mb.pressure = pressure;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <vTaskBaroRead+0x78>)
 8001a56:	6013      	str	r3, [r2, #0]
			baro_data_to_mb.ts = tick_count;
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <vTaskBaroRead+0x78>)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	6093      	str	r3, [r2, #8]
			osMutexRelease(baro_mutex);
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <vTaskBaroRead+0x74>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f007 fe86 	bl	8009774 <osMutexRelease>
		}

		osDelayUntil(tick_count);
 8001a68:	6978      	ldr	r0, [r7, #20]
 8001a6a:	f007 fd4b 	bl	8009504 <osDelayUntil>
		tick_count += tick_update;
 8001a6e:	e7d8      	b.n	8001a22 <vTaskBaroRead+0x22>
 8001a70:	51eb851f 	.word	0x51eb851f
 8001a74:	2000c108 	.word	0x2000c108
 8001a78:	20001db8 	.word	0x20001db8

08001a7c <vInitBaro>:
	}
}

void vInitBaro() {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	ms5607_init(&MS);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <vInitBaro+0x10>)
 8001a82:	f7ff fa85 	bl	8000f90 <ms5607_init>
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000044 	.word	0x20000044

08001a90 <vReadBaro>:

void vReadBaro(int32_t *temperature, int32_t *pressure) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
	ms5607_read_pres_temp(&MS, temperature, pressure);
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <vReadBaro+0x1c>)
 8001aa0:	f7ff fae7 	bl	8001072 <ms5607_read_pres_temp>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000044 	.word	0x20000044

08001ab0 <vTaskImuRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskImuRead(void *argument) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08e      	sub	sp, #56	; 0x38
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;

	/* initialize data variables */
	int16_t gyroscope_data[3] = { 0 }; /* 0 = x, 1 = y, 2 = z */
 8001ab8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	809a      	strh	r2, [r3, #4]
	int16_t acceleration[3] = { 0 }; /* 0 = x, 1 = y, 2 = z */
 8001ac2:	f107 0320 	add.w	r3, r7, #32
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	809a      	strh	r2, [r3, #4]
	int16_t temperature;

	/* initialize queue message */
	imu_data_t queue_data = { 0 };
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]


	vInitImu20601();
 8001ada:	f000 f83b 	bl	8001b54 <vInitImu20601>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001ade:	f007 fc0b 	bl	80092f8 <osKernelGetTickCount>
 8001ae2:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / IMU20601_SAMPLING_FREQ;
 8001ae4:	f007 fc30 	bl	8009348 <osKernelGetTickFreq>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <vTaskImuRead+0x9c>)
 8001aec:	fba3 2302 	umull	r2, r3, r3, r2
 8001af0:	095b      	lsrs	r3, r3, #5
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
	for (;;) {
		tick_count += tick_update;
 8001af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af8:	4413      	add	r3, r2
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
		vReadImu20601(gyroscope_data, acceleration, &temperature);
 8001afc:	f107 021e 	add.w	r2, r7, #30
 8001b00:	f107 0120 	add.w	r1, r7, #32
 8001b04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f83d 	bl	8001b88 <vReadImu20601>
//				gyroscope_data[0], gyroscope_data[1], gyroscope_data[2],
//				acceleration[0], acceleration[1], acceleration[2], temperature);

		//TODO HIE AUE STUFF WO MUES GMACHT WERDE MIT DENE DATE

		queue_data.gyro_x = gyroscope_data[0];
 8001b0e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001b12:	81bb      	strh	r3, [r7, #12]
		queue_data.gyro_y = gyroscope_data[1];
 8001b14:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b18:	81fb      	strh	r3, [r7, #14]
		queue_data.gyro_z = gyroscope_data[2];
 8001b1a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001b1e:	823b      	strh	r3, [r7, #16]
		queue_data.acc_x = acceleration[0];
 8001b20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b24:	827b      	strh	r3, [r7, #18]
		queue_data.acc_y = acceleration[1];
 8001b26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b2a:	82bb      	strh	r3, [r7, #20]
		queue_data.acc_z = acceleration[2];
 8001b2c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001b30:	82fb      	strh	r3, [r7, #22]

		/* Send Data to Queue */
		osMessageQueuePut(preprocess_queue, &queue_data, 0U, 0U);
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <vTaskImuRead+0xa0>)
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	f107 010c 	add.w	r1, r7, #12
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f007 feef 	bl	8009920 <osMessageQueuePut>

		osDelayUntil(tick_count);
 8001b42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b44:	f007 fcde 	bl	8009504 <osDelayUntil>
		tick_count += tick_update;
 8001b48:	e7d4      	b.n	8001af4 <vTaskImuRead+0x44>
 8001b4a:	bf00      	nop
 8001b4c:	51eb851f 	.word	0x51eb851f
 8001b50:	20001e24 	.word	0x20001e24

08001b54 <vInitImu20601>:
	}
}

void vInitImu20601() {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
	osDelayUntil(1000);
 8001b5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b5e:	f007 fcd1 	bl	8009504 <osDelayUntil>
	uint8_t r = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	71fb      	strb	r3, [r7, #7]
	do {
		r = icm20601_init(&ICM);
 8001b66:	4807      	ldr	r0, [pc, #28]	; (8001b84 <vInitImu20601+0x30>)
 8001b68:	f7fe ffab 	bl	8000ac2 <icm20601_init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(10);
 8001b70:	200a      	movs	r0, #10
 8001b72:	f000 fb9d 	bl	80022b0 <HAL_Delay>
	} while(!r);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f4      	beq.n	8001b66 <vInitImu20601+0x12>

}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000005c 	.word	0x2000005c

08001b88 <vReadImu20601>:

void vReadImu20601(int16_t gyroscope_data[], int16_t acceleration[], int16_t *temperature) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
	icm20601_read_accel_raw(&ICM, acceleration);
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <vReadImu20601+0x2c>)
 8001b98:	f7ff f857 	bl	8000c4a <icm20601_read_accel_raw>
	icm20601_read_gyro_raw(&ICM, gyroscope_data);
 8001b9c:	68f9      	ldr	r1, [r7, #12]
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <vReadImu20601+0x2c>)
 8001ba0:	f7ff f8ae 	bl	8000d00 <icm20601_read_gyro_raw>
	icm20601_read_temp_raw(&ICM, temperature);
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4803      	ldr	r0, [pc, #12]	; (8001bb4 <vReadImu20601+0x2c>)
 8001ba8:	f7ff f905 	bl	8000db6 <icm20601_read_temp_raw>
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	2000005c 	.word	0x2000005c

08001bb8 <vTaskPreprocess>:
 *      Author: Jonas
 */

#include "tasks/task_preprocess.h"

void vTaskPreprocess(void *argument) {
 8001bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bba:	b08f      	sub	sp, #60	; 0x3c
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	/* registers for the Filter */
	int32_t registers[4] = { 0 };
 8001bc0:	f107 0318 	add.w	r3, r7, #24
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]

	int32_t filtered_acc_z;
	int32_t raw_acc_z;

	/* Queue data and Status Initialization */
	imu_data_t queue_data = { 0 };
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]

	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 8001bdc:	f007 fb8c 	bl	80092f8 <osKernelGetTickCount>
 8001be0:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / SAMPLING_RATE_PREP;
 8001be2:	f007 fbb1 	bl	8009348 <osKernelGetTickFreq>
 8001be6:	4602      	mov	r2, r0
 8001be8:	4bc1      	ldr	r3, [pc, #772]	; (8001ef0 <vTaskPreprocess+0x338>)
 8001bea:	fba3 2302 	umull	r2, r3, r3, r2
 8001bee:	08db      	lsrs	r3, r3, #3
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Infinite loop */
	for (;;) {
		tick_count += tick_update;
 8001bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf6:	4413      	add	r3, r2
 8001bf8:	637b      	str	r3, [r7, #52]	; 0x34
		if (osMessageQueueGet(preprocess_queue, &queue_data, NULL,
 8001bfa:	4bbe      	ldr	r3, [pc, #760]	; (8001ef4 <vTaskPreprocess+0x33c>)
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	f107 0108 	add.w	r1, r7, #8
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	2200      	movs	r2, #0
 8001c08:	f007 fefe 	bl	8009a08 <osMessageQueueGet>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1ef      	bne.n	8001bf2 <vTaskPreprocess+0x3a>
		osWaitForever) == osOK) {
			raw_acc_z = queue_data.acc_z;
 8001c12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
			filtered_acc_z = A0
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c1a:	f7fe fc2b 	bl	8000474 <__aeabi_i2d>
 8001c1e:	4605      	mov	r5, r0
 8001c20:	460e      	mov	r6, r1
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc25 	bl	8000474 <__aeabi_i2d>
 8001c2a:	a4a3      	add	r4, pc, #652	; (adr r4, 8001eb8 <vTaskPreprocess+0x300>)
 8001c2c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	f7fe fc88 	bl	8000548 <__aeabi_dmul>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	4628      	mov	r0, r5
 8001c42:	4631      	mov	r1, r6
 8001c44:	f7fe faca 	bl	80001dc <__adddf3>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	461d      	mov	r5, r3
 8001c4e:	4626      	mov	r6, r4
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc0e 	bl	8000474 <__aeabi_i2d>
 8001c58:	a499      	add	r4, pc, #612	; (adr r4, 8001ec0 <vTaskPreprocess+0x308>)
 8001c5a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4623      	mov	r3, r4
 8001c62:	f7fe fc71 	bl	8000548 <__aeabi_dmul>
 8001c66:	4603      	mov	r3, r0
 8001c68:	460c      	mov	r4, r1
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4623      	mov	r3, r4
 8001c6e:	4628      	mov	r0, r5
 8001c70:	4631      	mov	r1, r6
 8001c72:	f7fe fab3 	bl	80001dc <__adddf3>
 8001c76:	4603      	mov	r3, r0
 8001c78:	460c      	mov	r4, r1
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	4626      	mov	r6, r4
							+ B3 * registers[2] + B4 * registers[3]) +
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fbf7 	bl	8000474 <__aeabi_i2d>
 8001c86:	a490      	add	r4, pc, #576	; (adr r4, 8001ec8 <vTaskPreprocess+0x310>)
 8001c88:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4623      	mov	r3, r4
 8001c90:	f7fe fc5a 	bl	8000548 <__aeabi_dmul>
 8001c94:	4603      	mov	r3, r0
 8001c96:	460c      	mov	r4, r1
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	4628      	mov	r0, r5
 8001c9e:	4631      	mov	r1, r6
 8001ca0:	f7fe fa9c 	bl	80001dc <__adddf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	460c      	mov	r4, r1
 8001ca8:	461d      	mov	r5, r3
 8001caa:	4626      	mov	r6, r4
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fbe0 	bl	8000474 <__aeabi_i2d>
 8001cb4:	a486      	add	r4, pc, #536	; (adr r4, 8001ed0 <vTaskPreprocess+0x318>)
 8001cb6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4623      	mov	r3, r4
 8001cbe:	f7fe fc43 	bl	8000548 <__aeabi_dmul>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460c      	mov	r4, r1
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4623      	mov	r3, r4
 8001cca:	4628      	mov	r0, r5
 8001ccc:	4631      	mov	r1, r6
 8001cce:	f7fe fa85 	bl	80001dc <__adddf3>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460c      	mov	r4, r1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4621      	mov	r1, r4
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001cda:	a47f      	add	r4, pc, #508	; (adr r4, 8001ed8 <vTaskPreprocess+0x320>)
 8001cdc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4623      	mov	r3, r4
 8001ce4:	f7fe fc30 	bl	8000548 <__aeabi_dmul>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	460c      	mov	r4, r1
 8001cec:	461d      	mov	r5, r3
 8001cee:	4626      	mov	r6, r4
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fbbe 	bl	8000474 <__aeabi_i2d>
 8001cf8:	a479      	add	r4, pc, #484	; (adr r4, 8001ee0 <vTaskPreprocess+0x328>)
 8001cfa:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4623      	mov	r3, r4
 8001d02:	f7fe fc21 	bl	8000548 <__aeabi_dmul>
 8001d06:	4603      	mov	r3, r0
 8001d08:	460c      	mov	r4, r1
							+ B3 * registers[2] + B4 * registers[3]) +
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4623      	mov	r3, r4
 8001d0e:	4628      	mov	r0, r5
 8001d10:	4631      	mov	r1, r6
 8001d12:	f7fe fa63 	bl	80001dc <__adddf3>
 8001d16:	4603      	mov	r3, r0
 8001d18:	460c      	mov	r4, r1
 8001d1a:	461d      	mov	r5, r3
 8001d1c:	4626      	mov	r6, r4
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fba7 	bl	8000474 <__aeabi_i2d>
 8001d26:	a470      	add	r4, pc, #448	; (adr r4, 8001ee8 <vTaskPreprocess+0x330>)
 8001d28:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4623      	mov	r3, r4
 8001d30:	f7fe fc0a 	bl	8000548 <__aeabi_dmul>
 8001d34:	4603      	mov	r3, r0
 8001d36:	460c      	mov	r4, r1
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	4631      	mov	r1, r6
 8001d40:	f7fe fa4c 	bl	80001dc <__adddf3>
 8001d44:	4603      	mov	r3, r0
 8001d46:	460c      	mov	r4, r1
 8001d48:	461d      	mov	r5, r3
 8001d4a:	4626      	mov	r6, r4
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fb90 	bl	8000474 <__aeabi_i2d>
 8001d54:	a462      	add	r4, pc, #392	; (adr r4, 8001ee0 <vTaskPreprocess+0x328>)
 8001d56:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4623      	mov	r3, r4
 8001d5e:	f7fe fbf3 	bl	8000548 <__aeabi_dmul>
 8001d62:	4603      	mov	r3, r0
 8001d64:	460c      	mov	r4, r1
 8001d66:	461a      	mov	r2, r3
 8001d68:	4623      	mov	r3, r4
 8001d6a:	4628      	mov	r0, r5
 8001d6c:	4631      	mov	r1, r6
 8001d6e:	f7fe fa35 	bl	80001dc <__adddf3>
 8001d72:	4603      	mov	r3, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	461d      	mov	r5, r3
 8001d78:	4626      	mov	r6, r4
					+ A4 * registers[3];
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fb79 	bl	8000474 <__aeabi_i2d>
 8001d82:	a455      	add	r4, pc, #340	; (adr r4, 8001ed8 <vTaskPreprocess+0x320>)
 8001d84:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	f7fe fbdc 	bl	8000548 <__aeabi_dmul>
 8001d90:	4603      	mov	r3, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	461a      	mov	r2, r3
 8001d96:	4623      	mov	r3, r4
 8001d98:	4628      	mov	r0, r5
 8001d9a:	4631      	mov	r1, r6
 8001d9c:	f7fe fa1e 	bl	80001dc <__adddf3>
 8001da0:	4603      	mov	r3, r0
 8001da2:	460c      	mov	r4, r1
			filtered_acc_z = A0
 8001da4:	4618      	mov	r0, r3
 8001da6:	4621      	mov	r1, r4
 8001da8:	f7fe fde0 	bl	800096c <__aeabi_d2iz>
 8001dac:	4603      	mov	r3, r0
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
			registers[3] = registers[2];
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
			registers[2] = registers[1];
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	623b      	str	r3, [r7, #32]
			registers[1] = registers[0];
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	61fb      	str	r3, [r7, #28]
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001dbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dbe:	f7fe fb59 	bl	8000474 <__aeabi_i2d>
 8001dc2:	4605      	mov	r5, r0
 8001dc4:	460e      	mov	r6, r1
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fb53 	bl	8000474 <__aeabi_i2d>
 8001dce:	a43a      	add	r4, pc, #232	; (adr r4, 8001eb8 <vTaskPreprocess+0x300>)
 8001dd0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	f7fe fbb6 	bl	8000548 <__aeabi_dmul>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	460c      	mov	r4, r1
 8001de0:	461a      	mov	r2, r3
 8001de2:	4623      	mov	r3, r4
 8001de4:	4628      	mov	r0, r5
 8001de6:	4631      	mov	r1, r6
 8001de8:	f7fe f9f8 	bl	80001dc <__adddf3>
 8001dec:	4603      	mov	r3, r0
 8001dee:	460c      	mov	r4, r1
 8001df0:	461d      	mov	r5, r3
 8001df2:	4626      	mov	r6, r4
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb3c 	bl	8000474 <__aeabi_i2d>
 8001dfc:	a430      	add	r4, pc, #192	; (adr r4, 8001ec0 <vTaskPreprocess+0x308>)
 8001dfe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e02:	461a      	mov	r2, r3
 8001e04:	4623      	mov	r3, r4
 8001e06:	f7fe fb9f 	bl	8000548 <__aeabi_dmul>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4623      	mov	r3, r4
 8001e12:	4628      	mov	r0, r5
 8001e14:	4631      	mov	r1, r6
 8001e16:	f7fe f9e1 	bl	80001dc <__adddf3>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	461d      	mov	r5, r3
 8001e20:	4626      	mov	r6, r4
					+ B3 * registers[2] + B4 * registers[3];
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb25 	bl	8000474 <__aeabi_i2d>
 8001e2a:	a427      	add	r4, pc, #156	; (adr r4, 8001ec8 <vTaskPreprocess+0x310>)
 8001e2c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4623      	mov	r3, r4
 8001e34:	f7fe fb88 	bl	8000548 <__aeabi_dmul>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	460c      	mov	r4, r1
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4623      	mov	r3, r4
 8001e40:	4628      	mov	r0, r5
 8001e42:	4631      	mov	r1, r6
 8001e44:	f7fe f9ca 	bl	80001dc <__adddf3>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	4626      	mov	r6, r4
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb0e 	bl	8000474 <__aeabi_i2d>
 8001e58:	a41d      	add	r4, pc, #116	; (adr r4, 8001ed0 <vTaskPreprocess+0x318>)
 8001e5a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4623      	mov	r3, r4
 8001e62:	f7fe fb71 	bl	8000548 <__aeabi_dmul>
 8001e66:	4603      	mov	r3, r0
 8001e68:	460c      	mov	r4, r1
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4623      	mov	r3, r4
 8001e6e:	4628      	mov	r0, r5
 8001e70:	4631      	mov	r1, r6
 8001e72:	f7fe f9b3 	bl	80001dc <__adddf3>
 8001e76:	4603      	mov	r3, r0
 8001e78:	460c      	mov	r4, r1
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	f7fe fd75 	bl	800096c <__aeabi_d2iz>
 8001e82:	4603      	mov	r3, r0
 8001e84:	61bb      	str	r3, [r7, #24]

			/* Write Result into Motherboard Variable if Mutex is available */
			if (osMutexAcquire(imu_mutex, IMU_MUTEX_TIMEOUT) == osOK) {
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <vTaskPreprocess+0x340>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f007 fc13 	bl	80096b8 <osMutexAcquire>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f47f aeac 	bne.w	8001bf2 <vTaskPreprocess+0x3a>
				imu_data_to_mb = queue_data;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <vTaskPreprocess+0x344>)
 8001e9c:	461c      	mov	r4, r3
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//				imu_data_to_mb.acc_z = filtered_acc_z; /* Insert filtered data */
				osMutexRelease(imu_mutex);
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <vTaskPreprocess+0x340>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f007 fc61 	bl	8009774 <osMutexRelease>
		tick_count += tick_update;
 8001eb2:	e69e      	b.n	8001bf2 <vTaskPreprocess+0x3a>
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	1c708e5c 	.word	0x1c708e5c
 8001ebc:	bfdc71c7 	.word	0xbfdc71c7
 8001ec0:	bd4fbd69 	.word	0xbd4fbd69
 8001ec4:	bfb2f684 	.word	0xbfb2f684
 8001ec8:	80e71b2d 	.word	0x80e71b2d
 8001ecc:	bf76796e 	.word	0xbf76796e
 8001ed0:	e17eb593 	.word	0xe17eb593
 8001ed4:	bf23fa32 	.word	0xbf23fa32
 8001ed8:	3a1a0235 	.word	0x3a1a0235
 8001edc:	3fee7bb0 	.word	0x3fee7bb0
 8001ee0:	3eeef58e 	.word	0x3eeef58e
 8001ee4:	400e7bb0 	.word	0x400e7bb0
 8001ee8:	2b9381a8 	.word	0x2b9381a8
 8001eec:	4016dcc4 	.word	0x4016dcc4
 8001ef0:	cccccccd 	.word	0xcccccccd
 8001ef4:	20001e24 	.word	0x20001e24
 8001ef8:	20005f94 	.word	0x20005f94
 8001efc:	2000c0f8 	.word	0x2000c0f8

08001f00 <vTaskSendToMb>:

/* Local Data Variable initialization */
imu_data_t last_imu_data = { 0 };
baro_data_t last_baro_data = { 0 };

void vTaskSendToMb(void *argument) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]



	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 8001f08:	f007 f9f6 	bl	80092f8 <osKernelGetTickCount>
 8001f0c:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / MB_SAMPLING_RATE;
 8001f0e:	f007 fa1b 	bl	8009348 <osKernelGetTickFreq>
 8001f12:	4602      	mov	r2, r0
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <vTaskSendToMb+0x5c>)
 8001f16:	fba3 2302 	umull	r2, r3, r3, r2
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	60bb      	str	r3, [r7, #8]

	for (;;) {
		tick_count += tick_update;
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]



		if(USB_DATA_ENABLE){
			ReadDataUSB();
 8001f26:	f000 f81f 	bl	8001f68 <ReadDataUSB>
		else{
			ReadDataSensors();
		}


		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f000 fc7c 	bl	8002830 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &fullsb_data, sizeof(fullsb_data), HAL_MAX_DELAY);
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	4908      	ldr	r1, [pc, #32]	; (8001f60 <vTaskSendToMb+0x60>)
 8001f40:	4808      	ldr	r0, [pc, #32]	; (8001f64 <vTaskSendToMb+0x64>)
 8001f42:	f003 fb33 	bl	80055ac <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f46:	2201      	movs	r2, #1
 8001f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f50:	f000 fc6e 	bl	8002830 <HAL_GPIO_WritePin>




		osDelayUntil(tick_count);
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f007 fad5 	bl	8009504 <osDelayUntil>
		tick_count += tick_update;
 8001f5a:	e7e0      	b.n	8001f1e <vTaskSendToMb+0x1e>
 8001f5c:	51eb851f 	.word	0x51eb851f
 8001f60:	20005f98 	.word	0x20005f98
 8001f64:	20001e28 	.word	0x20001e28

08001f68 <ReadDataUSB>:
	}
}


void ReadDataUSB(){
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

	memcpy(buffer, usb_data_buffer, 40);
 8001f6c:	2228      	movs	r2, #40	; 0x28
 8001f6e:	499c      	ldr	r1, [pc, #624]	; (80021e0 <ReadDataUSB+0x278>)
 8001f70:	489c      	ldr	r0, [pc, #624]	; (80021e4 <ReadDataUSB+0x27c>)
 8001f72:	f00b fb79 	bl	800d668 <memcpy>
	sb1_data.baro.pressure = (buffer[0]-48)*10000+(buffer[1]-48)*1000+(buffer[2]-48)*100+(buffer[3]-48)*10 + (buffer[4]-48);
 8001f76:	4b9b      	ldr	r3, [pc, #620]	; (80021e4 <ReadDataUSB+0x27c>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	3b30      	subs	r3, #48	; 0x30
 8001f7c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f80:	fb02 f203 	mul.w	r2, r2, r3
 8001f84:	4b97      	ldr	r3, [pc, #604]	; (80021e4 <ReadDataUSB+0x27c>)
 8001f86:	785b      	ldrb	r3, [r3, #1]
 8001f88:	3b30      	subs	r3, #48	; 0x30
 8001f8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	441a      	add	r2, r3
 8001f94:	4b93      	ldr	r3, [pc, #588]	; (80021e4 <ReadDataUSB+0x27c>)
 8001f96:	789b      	ldrb	r3, [r3, #2]
 8001f98:	3b30      	subs	r3, #48	; 0x30
 8001f9a:	2164      	movs	r1, #100	; 0x64
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	18d1      	adds	r1, r2, r3
 8001fa2:	4b90      	ldr	r3, [pc, #576]	; (80021e4 <ReadDataUSB+0x27c>)
 8001fa4:	78db      	ldrb	r3, [r3, #3]
 8001fa6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	18ca      	adds	r2, r1, r3
 8001fb4:	4b8b      	ldr	r3, [pc, #556]	; (80021e4 <ReadDataUSB+0x27c>)
 8001fb6:	791b      	ldrb	r3, [r3, #4]
 8001fb8:	3b30      	subs	r3, #48	; 0x30
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a8a      	ldr	r2, [pc, #552]	; (80021e8 <ReadDataUSB+0x280>)
 8001fbe:	6013      	str	r3, [r2, #0]
	sb1_data.baro.temperature = (buffer[7]-48)*1000+(buffer[8]-48)*100+(buffer[9]-48)*10 + (buffer[10]-48);
 8001fc0:	4b88      	ldr	r3, [pc, #544]	; (80021e4 <ReadDataUSB+0x27c>)
 8001fc2:	79db      	ldrb	r3, [r3, #7]
 8001fc4:	3b30      	subs	r3, #48	; 0x30
 8001fc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fca:	fb02 f203 	mul.w	r2, r2, r3
 8001fce:	4b85      	ldr	r3, [pc, #532]	; (80021e4 <ReadDataUSB+0x27c>)
 8001fd0:	7a1b      	ldrb	r3, [r3, #8]
 8001fd2:	3b30      	subs	r3, #48	; 0x30
 8001fd4:	2164      	movs	r1, #100	; 0x64
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	18d1      	adds	r1, r2, r3
 8001fdc:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <ReadDataUSB+0x27c>)
 8001fde:	7a5b      	ldrb	r3, [r3, #9]
 8001fe0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	18ca      	adds	r2, r1, r3
 8001fee:	4b7d      	ldr	r3, [pc, #500]	; (80021e4 <ReadDataUSB+0x27c>)
 8001ff0:	7a9b      	ldrb	r3, [r3, #10]
 8001ff2:	3b30      	subs	r3, #48	; 0x30
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a7c      	ldr	r2, [pc, #496]	; (80021e8 <ReadDataUSB+0x280>)
 8001ff8:	6053      	str	r3, [r2, #4]
	sb1_data.baro.ts = (buffer[12]-48)*10000+(buffer[13]-48)*1000+(buffer[14]-48)*100+(buffer[15]-48)*10 + (buffer[16]-48);
 8001ffa:	4b7a      	ldr	r3, [pc, #488]	; (80021e4 <ReadDataUSB+0x27c>)
 8001ffc:	7b1b      	ldrb	r3, [r3, #12]
 8001ffe:	3b30      	subs	r3, #48	; 0x30
 8002000:	f242 7210 	movw	r2, #10000	; 0x2710
 8002004:	fb02 f203 	mul.w	r2, r2, r3
 8002008:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <ReadDataUSB+0x27c>)
 800200a:	7b5b      	ldrb	r3, [r3, #13]
 800200c:	3b30      	subs	r3, #48	; 0x30
 800200e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	441a      	add	r2, r3
 8002018:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <ReadDataUSB+0x27c>)
 800201a:	7b9b      	ldrb	r3, [r3, #14]
 800201c:	3b30      	subs	r3, #48	; 0x30
 800201e:	2164      	movs	r1, #100	; 0x64
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	18d1      	adds	r1, r2, r3
 8002026:	4b6f      	ldr	r3, [pc, #444]	; (80021e4 <ReadDataUSB+0x27c>)
 8002028:	7bdb      	ldrb	r3, [r3, #15]
 800202a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	18ca      	adds	r2, r1, r3
 8002038:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <ReadDataUSB+0x27c>)
 800203a:	7c1b      	ldrb	r3, [r3, #16]
 800203c:	3b30      	subs	r3, #48	; 0x30
 800203e:	4413      	add	r3, r2
 8002040:	461a      	mov	r2, r3
 8002042:	4b69      	ldr	r3, [pc, #420]	; (80021e8 <ReadDataUSB+0x280>)
 8002044:	609a      	str	r2, [r3, #8]


	if (buffer[28] == 45){
 8002046:	4b67      	ldr	r3, [pc, #412]	; (80021e4 <ReadDataUSB+0x27c>)
 8002048:	7f1b      	ldrb	r3, [r3, #28]
 800204a:	2b2d      	cmp	r3, #45	; 0x2d
 800204c:	d132      	bne.n	80020b4 <ReadDataUSB+0x14c>
		sb1_data.imu.acc_z = -1*((buffer[29]-48)*1000+(buffer[30]-48)*100+(buffer[31]-48)*10 + (buffer[32]-48));
 800204e:	4b65      	ldr	r3, [pc, #404]	; (80021e4 <ReadDataUSB+0x27c>)
 8002050:	7f5b      	ldrb	r3, [r3, #29]
 8002052:	3b30      	subs	r3, #48	; 0x30
 8002054:	b29b      	uxth	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	0152      	lsls	r2, r2, #5
 800205a:	1ad2      	subs	r2, r2, r3
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	b29a      	uxth	r2, r3
 8002064:	4b5f      	ldr	r3, [pc, #380]	; (80021e4 <ReadDataUSB+0x27c>)
 8002066:	7f9b      	ldrb	r3, [r3, #30]
 8002068:	3b30      	subs	r3, #48	; 0x30
 800206a:	b29b      	uxth	r3, r3
 800206c:	4619      	mov	r1, r3
 800206e:	0089      	lsls	r1, r1, #2
 8002070:	440b      	add	r3, r1
 8002072:	4619      	mov	r1, r3
 8002074:	0088      	lsls	r0, r1, #2
 8002076:	4619      	mov	r1, r3
 8002078:	4603      	mov	r3, r0
 800207a:	440b      	add	r3, r1
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	b29b      	uxth	r3, r3
 8002080:	4413      	add	r3, r2
 8002082:	b29a      	uxth	r2, r3
 8002084:	4b57      	ldr	r3, [pc, #348]	; (80021e4 <ReadDataUSB+0x27c>)
 8002086:	7fdb      	ldrb	r3, [r3, #31]
 8002088:	3b30      	subs	r3, #48	; 0x30
 800208a:	b29b      	uxth	r3, r3
 800208c:	4619      	mov	r1, r3
 800208e:	0089      	lsls	r1, r1, #2
 8002090:	440b      	add	r3, r1
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	b29b      	uxth	r3, r3
 8002096:	4413      	add	r3, r2
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b52      	ldr	r3, [pc, #328]	; (80021e4 <ReadDataUSB+0x27c>)
 800209c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	b21a      	sxth	r2, r3
 80020ae:	4b4e      	ldr	r3, [pc, #312]	; (80021e8 <ReadDataUSB+0x280>)
 80020b0:	82da      	strh	r2, [r3, #22]
 80020b2:	e030      	b.n	8002116 <ReadDataUSB+0x1ae>
	}
	else {
		sb1_data.imu.acc_z = (buffer[29]-48)*1000+(buffer[30]-48)*100+(buffer[31]-48)*10 + (buffer[32]-48);
 80020b4:	4b4b      	ldr	r3, [pc, #300]	; (80021e4 <ReadDataUSB+0x27c>)
 80020b6:	7f5b      	ldrb	r3, [r3, #29]
 80020b8:	3b30      	subs	r3, #48	; 0x30
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	0152      	lsls	r2, r2, #5
 80020c0:	1ad2      	subs	r2, r2, r3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	4b46      	ldr	r3, [pc, #280]	; (80021e4 <ReadDataUSB+0x27c>)
 80020cc:	7f9b      	ldrb	r3, [r3, #30]
 80020ce:	3b30      	subs	r3, #48	; 0x30
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	4619      	mov	r1, r3
 80020d4:	0089      	lsls	r1, r1, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	4619      	mov	r1, r3
 80020da:	0088      	lsls	r0, r1, #2
 80020dc:	4619      	mov	r1, r3
 80020de:	4603      	mov	r3, r0
 80020e0:	440b      	add	r3, r1
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	4b3e      	ldr	r3, [pc, #248]	; (80021e4 <ReadDataUSB+0x27c>)
 80020ec:	7fdb      	ldrb	r3, [r3, #31]
 80020ee:	3b30      	subs	r3, #48	; 0x30
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	4619      	mov	r1, r3
 80020f4:	0089      	lsls	r1, r1, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	b29a      	uxth	r2, r3
 8002100:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <ReadDataUSB+0x27c>)
 8002102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4413      	add	r3, r2
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b30      	subs	r3, #48	; 0x30
 800210e:	b29b      	uxth	r3, r3
 8002110:	b21a      	sxth	r2, r3
 8002112:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <ReadDataUSB+0x280>)
 8002114:	82da      	strh	r2, [r3, #22]
	}

	sb1_data.imu.ts = (buffer[34]-48)*10000+(buffer[35]-48)*1000+(buffer[36]-48)*100+(buffer[37]-48)*10 + (buffer[38]-48);
 8002116:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <ReadDataUSB+0x27c>)
 8002118:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800211c:	3b30      	subs	r3, #48	; 0x30
 800211e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002122:	fb02 f203 	mul.w	r2, r2, r3
 8002126:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <ReadDataUSB+0x27c>)
 8002128:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800212c:	3b30      	subs	r3, #48	; 0x30
 800212e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	441a      	add	r2, r3
 8002138:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <ReadDataUSB+0x27c>)
 800213a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800213e:	3b30      	subs	r3, #48	; 0x30
 8002140:	2164      	movs	r1, #100	; 0x64
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	18d1      	adds	r1, r2, r3
 8002148:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <ReadDataUSB+0x27c>)
 800214a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800214e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	18ca      	adds	r2, r1, r3
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <ReadDataUSB+0x27c>)
 800215e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002162:	3b30      	subs	r3, #48	; 0x30
 8002164:	4413      	add	r3, r2
 8002166:	461a      	mov	r2, r3
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <ReadDataUSB+0x280>)
 800216a:	619a      	str	r2, [r3, #24]
	fullsb_data = sb1_data;
 800216c:	4a1f      	ldr	r2, [pc, #124]	; (80021ec <ReadDataUSB+0x284>)
 800216e:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <ReadDataUSB+0x280>)
 8002170:	4614      	mov	r4, r2
 8002172:	461d      	mov	r5, r3
 8002174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002178:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800217c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	fullsb_data.checksum = fullsb_data.baro.pressure + fullsb_data.baro.temperature +
 8002180:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <ReadDataUSB+0x284>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b19      	ldr	r3, [pc, #100]	; (80021ec <ReadDataUSB+0x284>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4413      	add	r3, r2
 800218e:	b2da      	uxtb	r2, r3
			fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <ReadDataUSB+0x284>)
 8002192:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	fullsb_data.checksum = fullsb_data.baro.pressure + fullsb_data.baro.temperature +
 8002196:	b2db      	uxtb	r3, r3
 8002198:	4413      	add	r3, r2
 800219a:	b2da      	uxtb	r2, r3
			fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <ReadDataUSB+0x284>)
 800219e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <ReadDataUSB+0x284>)
 80021aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	b2da      	uxtb	r2, r3
			fullsb_data.imu.acc_x + fullsb_data.imu.acc_y +  fullsb_data.imu.acc_z;
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <ReadDataUSB+0x284>)
 80021b6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
			fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4413      	add	r3, r2
 80021be:	b2da      	uxtb	r2, r3
			fullsb_data.imu.acc_x + fullsb_data.imu.acc_y +  fullsb_data.imu.acc_z;
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <ReadDataUSB+0x284>)
 80021c2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <ReadDataUSB+0x284>)
 80021ce:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	b2da      	uxtb	r2, r3
	fullsb_data.checksum = fullsb_data.baro.pressure + fullsb_data.baro.temperature +
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <ReadDataUSB+0x284>)
 80021da:	771a      	strb	r2, [r3, #28]

}
 80021dc:	bf00      	nop
 80021de:	bdb0      	pop	{r4, r5, r7, pc}
 80021e0:	20000000 	.word	0x20000000
 80021e4:	2000006c 	.word	0x2000006c
 80021e8:	20000254 	.word	0x20000254
 80021ec:	20005f98 	.word	0x20005f98

080021f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002228 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80021f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80021f6:	e003      	b.n	8002200 <LoopCopyDataInit>

080021f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80021fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80021fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80021fe:	3104      	adds	r1, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002200:	480b      	ldr	r0, [pc, #44]	; (8002230 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002202:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002204:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002206:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002208:	d3f6      	bcc.n	80021f8 <CopyDataInit>
	ldr	r2, =_sbss
 800220a:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <LoopForever+0x12>)
	b	LoopFillZerobss
 800220c:	e002      	b.n	8002214 <LoopFillZerobss>

0800220e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800220e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002210:	f842 3b04 	str.w	r3, [r2], #4

08002214 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <LoopForever+0x16>)
	cmp	r2, r3
 8002216:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002218:	d3f9      	bcc.n	800220e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800221a:	f7ff fbbb 	bl	8001994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800221e:	f00b f9ff 	bl	800d620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002222:	f7fe ffdf 	bl	80011e4 <main>

08002226 <LoopForever>:

LoopForever:
    b LoopForever
 8002226:	e7fe      	b.n	8002226 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002228:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800222c:	0800d8ac 	.word	0x0800d8ac
	ldr	r0, =_sdata
 8002230:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002234:	20000238 	.word	0x20000238
	ldr	r2, =_sbss
 8002238:	20000238 	.word	0x20000238
	ldr	r3, = _ebss
 800223c:	2000d098 	.word	0x2000d098

08002240 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC1_IRQHandler>

08002242 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224c:	2003      	movs	r0, #3
 800224e:	f000 f8fe 	bl	800244e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002252:	2000      	movs	r0, #0
 8002254:	f7ff fb10 	bl	8001878 <HAL_InitTick>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	71fb      	strb	r3, [r7, #7]
 8002262:	e001      	b.n	8002268 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002264:	f7ff fa1e 	bl	80016a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002268:	79fb      	ldrb	r3, [r7, #7]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_IncTick+0x1c>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_IncTick+0x20>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4413      	add	r3, r2
 8002282:	4a03      	ldr	r2, [pc, #12]	; (8002290 <HAL_IncTick+0x1c>)
 8002284:	6013      	str	r3, [r2, #0]
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	2000c14c 	.word	0x2000c14c
 8002294:	200000b0 	.word	0x200000b0

08002298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <HAL_GetTick+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	2000c14c 	.word	0x2000c14c

080022b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff ffee 	bl	8002298 <HAL_GetTick>
 80022bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d004      	beq.n	80022d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_Delay+0x40>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4413      	add	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022d4:	bf00      	nop
 80022d6:	f7ff ffdf 	bl	8002298 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d8f7      	bhi.n	80022d6 <HAL_Delay+0x26>
  {
  }
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200000b0 	.word	0x200000b0

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800231c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	; (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ff4c 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002476:	f7ff ff61 	bl	800233c <__NVIC_GetPriorityGrouping>
 800247a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	6978      	ldr	r0, [r7, #20]
 8002482:	f7ff ffb1 	bl	80023e8 <NVIC_EncodePriority>
 8002486:	4602      	mov	r2, r0
 8002488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff80 	bl	8002394 <__NVIC_SetPriority>
}
 8002494:	bf00      	nop
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff54 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d005      	beq.n	80024dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2204      	movs	r2, #4
 80024d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e029      	b.n	8002530 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 020e 	bic.w	r2, r2, #14
 80024ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	f003 021c 	and.w	r2, r3, #28
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	2101      	movs	r1, #1
 800250a:	fa01 f202 	lsl.w	r2, r1, r2
 800250e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
    }
  }
  return status;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254a:	e154      	b.n	80027f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2101      	movs	r1, #1
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8146 	beq.w	80027f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d00b      	beq.n	8002584 <HAL_GPIO_Init+0x48>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d007      	beq.n	8002584 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002578:	2b11      	cmp	r3, #17
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b12      	cmp	r3, #18
 8002582:	d130      	bne.n	80025e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ba:	2201      	movs	r2, #1
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 0201 	and.w	r2, r3, #1
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2203      	movs	r2, #3
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0xea>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b12      	cmp	r3, #18
 8002624:	d123      	bne.n	800266e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3208      	adds	r2, #8
 800262e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002632:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	6939      	ldr	r1, [r7, #16]
 800266a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0203 	and.w	r2, r3, #3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80a0 	beq.w	80027f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b0:	4b58      	ldr	r3, [pc, #352]	; (8002814 <HAL_GPIO_Init+0x2d8>)
 80026b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b4:	4a57      	ldr	r2, [pc, #348]	; (8002814 <HAL_GPIO_Init+0x2d8>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6613      	str	r3, [r2, #96]	; 0x60
 80026bc:	4b55      	ldr	r3, [pc, #340]	; (8002814 <HAL_GPIO_Init+0x2d8>)
 80026be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026c8:	4a53      	ldr	r2, [pc, #332]	; (8002818 <HAL_GPIO_Init+0x2dc>)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	220f      	movs	r2, #15
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026f2:	d019      	beq.n	8002728 <HAL_GPIO_Init+0x1ec>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a49      	ldr	r2, [pc, #292]	; (800281c <HAL_GPIO_Init+0x2e0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d013      	beq.n	8002724 <HAL_GPIO_Init+0x1e8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a48      	ldr	r2, [pc, #288]	; (8002820 <HAL_GPIO_Init+0x2e4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00d      	beq.n	8002720 <HAL_GPIO_Init+0x1e4>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a47      	ldr	r2, [pc, #284]	; (8002824 <HAL_GPIO_Init+0x2e8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d007      	beq.n	800271c <HAL_GPIO_Init+0x1e0>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a46      	ldr	r2, [pc, #280]	; (8002828 <HAL_GPIO_Init+0x2ec>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d101      	bne.n	8002718 <HAL_GPIO_Init+0x1dc>
 8002714:	2304      	movs	r3, #4
 8002716:	e008      	b.n	800272a <HAL_GPIO_Init+0x1ee>
 8002718:	2307      	movs	r3, #7
 800271a:	e006      	b.n	800272a <HAL_GPIO_Init+0x1ee>
 800271c:	2303      	movs	r3, #3
 800271e:	e004      	b.n	800272a <HAL_GPIO_Init+0x1ee>
 8002720:	2302      	movs	r3, #2
 8002722:	e002      	b.n	800272a <HAL_GPIO_Init+0x1ee>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_GPIO_Init+0x1ee>
 8002728:	2300      	movs	r3, #0
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	f002 0203 	and.w	r2, r2, #3
 8002730:	0092      	lsls	r2, r2, #2
 8002732:	4093      	lsls	r3, r2
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800273a:	4937      	ldr	r1, [pc, #220]	; (8002818 <HAL_GPIO_Init+0x2dc>)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	3302      	adds	r3, #2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002748:	4b38      	ldr	r3, [pc, #224]	; (800282c <HAL_GPIO_Init+0x2f0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800276c:	4a2f      	ldr	r2, [pc, #188]	; (800282c <HAL_GPIO_Init+0x2f0>)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002772:	4b2e      	ldr	r3, [pc, #184]	; (800282c <HAL_GPIO_Init+0x2f0>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002796:	4a25      	ldr	r2, [pc, #148]	; (800282c <HAL_GPIO_Init+0x2f0>)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_GPIO_Init+0x2f0>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027c0:	4a1a      	ldr	r2, [pc, #104]	; (800282c <HAL_GPIO_Init+0x2f0>)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_GPIO_Init+0x2f0>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027ea:	4a10      	ldr	r2, [pc, #64]	; (800282c <HAL_GPIO_Init+0x2f0>)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	3301      	adds	r3, #1
 80027f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	f47f aea3 	bne.w	800254c <HAL_GPIO_Init+0x10>
  }
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	40010000 	.word	0x40010000
 800281c:	48000400 	.word	0x48000400
 8002820:	48000800 	.word	0x48000800
 8002824:	48000c00 	.word	0x48000c00
 8002828:	48001000 	.word	0x48001000
 800282c:	40010400 	.word	0x40010400

08002830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]
 800283c:	4613      	mov	r3, r2
 800283e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002840:	787b      	ldrb	r3, [r7, #1]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002846:	887a      	ldrh	r2, [r7, #2]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800284c:	e002      	b.n	8002854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e081      	b.n	8002976 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe ff34 	bl	80016f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2224      	movs	r2, #36	; 0x24
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d107      	bne.n	80028da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	e006      	b.n	80028e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d104      	bne.n	80028fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800291c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	ea42 0103 	orr.w	r1, r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	021a      	lsls	r2, r3, #8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69d9      	ldr	r1, [r3, #28]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1a      	ldr	r2, [r3, #32]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	461a      	mov	r2, r3
 800298c:	460b      	mov	r3, r1
 800298e:	817b      	strh	r3, [r7, #10]
 8002990:	4613      	mov	r3, r2
 8002992:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b20      	cmp	r3, #32
 800299e:	f040 80da 	bne.w	8002b56 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_I2C_Master_Transmit+0x30>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0d3      	b.n	8002b58 <HAL_I2C_Master_Transmit+0x1d8>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029b8:	f7ff fc6e 	bl	8002298 <HAL_GetTick>
 80029bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2319      	movs	r3, #25
 80029c4:	2201      	movs	r2, #1
 80029c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f9e6 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0be      	b.n	8002b58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2221      	movs	r2, #33	; 0x21
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2210      	movs	r2, #16
 80029e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	893a      	ldrh	r2, [r7, #8]
 80029fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2bff      	cmp	r3, #255	; 0xff
 8002a0a:	d90e      	bls.n	8002a2a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	22ff      	movs	r2, #255	; 0xff
 8002a10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	8979      	ldrh	r1, [r7, #10]
 8002a1a:	4b51      	ldr	r3, [pc, #324]	; (8002b60 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fb48 	bl	80030b8 <I2C_TransferConfig>
 8002a28:	e06c      	b.n	8002b04 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	8979      	ldrh	r1, [r7, #10]
 8002a3c:	4b48      	ldr	r3, [pc, #288]	; (8002b60 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fb37 	bl	80030b8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002a4a:	e05b      	b.n	8002b04 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	6a39      	ldr	r1, [r7, #32]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f9e3 	bl	8002e1c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e07b      	b.n	8002b58 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	781a      	ldrb	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d034      	beq.n	8002b04 <HAL_I2C_Master_Transmit+0x184>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d130      	bne.n	8002b04 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f975 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e04d      	b.n	8002b58 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2bff      	cmp	r3, #255	; 0xff
 8002ac4:	d90e      	bls.n	8002ae4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	8979      	ldrh	r1, [r7, #10]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 faeb 	bl	80030b8 <I2C_TransferConfig>
 8002ae2:	e00f      	b.n	8002b04 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	8979      	ldrh	r1, [r7, #10]
 8002af6:	2300      	movs	r3, #0
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fada 	bl	80030b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d19e      	bne.n	8002a4c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	6a39      	ldr	r1, [r7, #32]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f9c2 	bl	8002e9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e01a      	b.n	8002b58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2220      	movs	r2, #32
 8002b28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b36:	400b      	ands	r3, r1
 8002b38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
  }
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	80002000 	.word	0x80002000
 8002b64:	fe00e800 	.word	0xfe00e800

08002b68 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	461a      	mov	r2, r3
 8002b74:	460b      	mov	r3, r1
 8002b76:	817b      	strh	r3, [r7, #10]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	f040 80db 	bne.w	8002d40 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_I2C_Master_Receive+0x30>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0d4      	b.n	8002d42 <HAL_I2C_Master_Receive+0x1da>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ba0:	f7ff fb7a 	bl	8002298 <HAL_GetTick>
 8002ba4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2319      	movs	r3, #25
 8002bac:	2201      	movs	r2, #1
 8002bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f8f2 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0bf      	b.n	8002d42 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2222      	movs	r2, #34	; 0x22
 8002bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2210      	movs	r2, #16
 8002bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	893a      	ldrh	r2, [r7, #8]
 8002be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2bff      	cmp	r3, #255	; 0xff
 8002bf2:	d90e      	bls.n	8002c12 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	22ff      	movs	r2, #255	; 0xff
 8002bf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	8979      	ldrh	r1, [r7, #10]
 8002c02:	4b52      	ldr	r3, [pc, #328]	; (8002d4c <HAL_I2C_Master_Receive+0x1e4>)
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 fa54 	bl	80030b8 <I2C_TransferConfig>
 8002c10:	e06d      	b.n	8002cee <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	8979      	ldrh	r1, [r7, #10]
 8002c24:	4b49      	ldr	r3, [pc, #292]	; (8002d4c <HAL_I2C_Master_Receive+0x1e4>)
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fa43 	bl	80030b8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c32:	e05c      	b.n	8002cee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	6a39      	ldr	r1, [r7, #32]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f96b 	bl	8002f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e07c      	b.n	8002d42 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d034      	beq.n	8002cee <HAL_I2C_Master_Receive+0x186>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d130      	bne.n	8002cee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	2200      	movs	r2, #0
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f880 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e04d      	b.n	8002d42 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2bff      	cmp	r3, #255	; 0xff
 8002cae:	d90e      	bls.n	8002cce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	22ff      	movs	r2, #255	; 0xff
 8002cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	8979      	ldrh	r1, [r7, #10]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f9f6 	bl	80030b8 <I2C_TransferConfig>
 8002ccc:	e00f      	b.n	8002cee <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	8979      	ldrh	r1, [r7, #10]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f9e5 	bl	80030b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d19d      	bne.n	8002c34 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	6a39      	ldr	r1, [r7, #32]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f8cd 	bl	8002e9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e01a      	b.n	8002d42 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2220      	movs	r2, #32
 8002d12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_I2C_Master_Receive+0x1e8>)
 8002d20:	400b      	ands	r3, r1
 8002d22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	80002400 	.word	0x80002400
 8002d50:	fe00e800 	.word	0xfe00e800

08002d54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d103      	bne.n	8002d72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d007      	beq.n	8002d90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	619a      	str	r2, [r3, #24]
  }
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dac:	e022      	b.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d01e      	beq.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db6:	f7ff fa6f 	bl	8002298 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d302      	bcc.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d113      	bne.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e00f      	b.n	8002e14 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d0cd      	beq.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e28:	e02c      	b.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f8dc 	bl	8002fec <I2C_IsAcknowledgeFailed>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e02a      	b.n	8002e94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d01e      	beq.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7ff fa27 	bl	8002298 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d113      	bne.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e007      	b.n	8002e94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d1cb      	bne.n	8002e2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ea8:	e028      	b.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f89c 	bl	8002fec <I2C_IsAcknowledgeFailed>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e026      	b.n	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7ff f9eb 	bl	8002298 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d113      	bne.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e007      	b.n	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d1cf      	bne.n	8002eaa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f20:	e055      	b.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f860 	bl	8002fec <I2C_IsAcknowledgeFailed>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e053      	b.n	8002fde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d129      	bne.n	8002f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d105      	bne.n	8002f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e03f      	b.n	8002fde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2220      	movs	r2, #32
 8002f64:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002f72:	400b      	ands	r3, r1
 8002f74:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e022      	b.n	8002fde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f98:	f7ff f97e 	bl	8002298 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d302      	bcc.n	8002fae <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10f      	bne.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e007      	b.n	8002fde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d1a2      	bne.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	fe00e800 	.word	0xfe00e800

08002fec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b10      	cmp	r3, #16
 8003004:	d151      	bne.n	80030aa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003006:	e022      	b.n	800304e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300e:	d01e      	beq.n	800304e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003010:	f7ff f942 	bl	8002298 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	429a      	cmp	r2, r3
 800301e:	d302      	bcc.n	8003026 <I2C_IsAcknowledgeFailed+0x3a>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d113      	bne.n	800304e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	f043 0220 	orr.w	r2, r3, #32
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e02e      	b.n	80030ac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d1d5      	bne.n	8003008 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2210      	movs	r2, #16
 8003062:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2220      	movs	r2, #32
 800306a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fe71 	bl	8002d54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <I2C_IsAcknowledgeFailed+0xc8>)
 800307e:	400b      	ands	r3, r1
 8003080:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	f043 0204 	orr.w	r2, r3, #4
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	fe00e800 	.word	0xfe00e800

080030b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	817b      	strh	r3, [r7, #10]
 80030c6:	4613      	mov	r3, r2
 80030c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	0d5b      	lsrs	r3, r3, #21
 80030d4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <I2C_TransferConfig+0x58>)
 80030da:	430b      	orrs	r3, r1
 80030dc:	43db      	mvns	r3, r3
 80030de:	ea02 0103 	and.w	r1, r2, r3
 80030e2:	897b      	ldrh	r3, [r7, #10]
 80030e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030e8:	7a7b      	ldrb	r3, [r7, #9]
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	03ff63ff 	.word	0x03ff63ff

08003114 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b20      	cmp	r3, #32
 8003128:	d138      	bne.n	800319c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003134:	2302      	movs	r3, #2
 8003136:	e032      	b.n	800319e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	; 0x24
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003166:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6819      	ldr	r1, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d139      	bne.n	8003234 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e033      	b.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2224      	movs	r2, #36	; 0x24
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003244:	b08b      	sub	sp, #44	; 0x2c
 8003246:	af06      	add	r7, sp, #24
 8003248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0da      	b.n	800340a <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d106      	bne.n	800326e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f009 fe63 	bl	800cf34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2203      	movs	r2, #3
 8003272:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f003 fb20 	bl	80068c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	687e      	ldr	r6, [r7, #4]
 8003288:	466d      	mov	r5, sp
 800328a:	f106 0410 	add.w	r4, r6, #16
 800328e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	602b      	str	r3, [r5, #0]
 8003296:	1d33      	adds	r3, r6, #4
 8003298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800329a:	6838      	ldr	r0, [r7, #0]
 800329c:	f003 fae6 	bl	800686c <USB_CoreInit>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0ab      	b.n	800340a <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 fb1c 	bl	80068f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	e035      	b.n	8003330 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	015b      	lsls	r3, r3, #5
 80032ca:	4413      	add	r3, r2
 80032cc:	3329      	adds	r3, #41	; 0x29
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	015b      	lsls	r3, r3, #5
 80032d8:	4413      	add	r3, r2
 80032da:	3328      	adds	r3, #40	; 0x28
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	b291      	uxth	r1, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	015b      	lsls	r3, r3, #5
 80032ea:	4413      	add	r3, r2
 80032ec:	3336      	adds	r3, #54	; 0x36
 80032ee:	460a      	mov	r2, r1
 80032f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	015b      	lsls	r3, r3, #5
 80032f8:	4413      	add	r3, r2
 80032fa:	332b      	adds	r3, #43	; 0x2b
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	015b      	lsls	r3, r3, #5
 8003306:	4413      	add	r3, r2
 8003308:	3338      	adds	r3, #56	; 0x38
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	015b      	lsls	r3, r3, #5
 8003314:	4413      	add	r3, r2
 8003316:	333c      	adds	r3, #60	; 0x3c
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	3302      	adds	r3, #2
 8003322:	015b      	lsls	r3, r3, #5
 8003324:	4413      	add	r3, r2
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	3301      	adds	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	7bfa      	ldrb	r2, [r7, #15]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d3c4      	bcc.n	80032c4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e031      	b.n	80033a4 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	015b      	lsls	r3, r3, #5
 8003346:	4413      	add	r3, r2
 8003348:	f203 1329 	addw	r3, r3, #297	; 0x129
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	015b      	lsls	r3, r3, #5
 8003356:	4413      	add	r3, r2
 8003358:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800335c:	7bfa      	ldrb	r2, [r7, #15]
 800335e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	015b      	lsls	r3, r3, #5
 8003366:	4413      	add	r3, r2
 8003368:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	015b      	lsls	r3, r3, #5
 8003376:	4413      	add	r3, r2
 8003378:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	015b      	lsls	r3, r3, #5
 8003386:	4413      	add	r3, r2
 8003388:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	330a      	adds	r3, #10
 8003396:	015b      	lsls	r3, r3, #5
 8003398:	4413      	add	r3, r2
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	3301      	adds	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
 80033a4:	7bfa      	ldrb	r2, [r7, #15]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d3c8      	bcc.n	8003340 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	687e      	ldr	r6, [r7, #4]
 80033b6:	466d      	mov	r5, sp
 80033b8:	f106 0410 	add.w	r4, r6, #16
 80033bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	602b      	str	r3, [r5, #0]
 80033c4:	1d33      	adds	r3, r6, #4
 80033c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033c8:	6838      	ldr	r0, [r7, #0]
 80033ca:	f003 faa1 	bl	8006910 <USB_DevInit>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e014      	b.n	800340a <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d102      	bne.n	80033fe <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fe3a 	bl	8004072 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f004 fae7 	bl	80079d6 <USB_DevDisconnect>

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003412 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_PCD_Start+0x16>
 8003424:	2302      	movs	r3, #2
 8003426:	e012      	b.n	800344e <HAL_PCD_Start+0x3c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f004 fab7 	bl	80079a8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f003 fa25 	bl	800688e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f004 facc 	bl	8007a00 <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003472:	d102      	bne.n	800347a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fb33 	bl	8003ae0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f004 fabe 	bl	8007a00 <USB_ReadInterrupts>
 8003484:	4603      	mov	r3, r0
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d112      	bne.n	80034b6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003498:	b29a      	uxth	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a2:	b292      	uxth	r2, r2
 80034a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f009 fdb8 	bl	800d01e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80034ae:	2100      	movs	r1, #0
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f91e 	bl	80036f2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f004 faa0 	bl	8007a00 <USB_ReadInterrupts>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ca:	d10b      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034de:	b292      	uxth	r2, r2
 80034e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 fa89 	bl	8007a00 <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f8:	d10b      	bne.n	8003512 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800350c:	b292      	uxth	r2, r2
 800350e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f004 fa72 	bl	8007a00 <USB_ReadInterrupts>
 800351c:	4603      	mov	r3, r0
 800351e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003526:	d133      	bne.n	8003590 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003530:	b29a      	uxth	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0204 	bic.w	r2, r2, #4
 800353a:	b292      	uxth	r2, r2
 800353c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003548:	b29a      	uxth	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0208 	bic.w	r2, r2, #8
 8003552:	b292      	uxth	r2, r2
 8003554:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800355e:	2b01      	cmp	r3, #1
 8003560:	d107      	bne.n	8003572 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800356a:	2100      	movs	r1, #0
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f00a f803 	bl	800d578 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f009 fd8c 	bl	800d090 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003580:	b29a      	uxth	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800358a:	b292      	uxth	r2, r2
 800358c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f004 fa33 	bl	8007a00 <USB_ReadInterrupts>
 800359a:	4603      	mov	r3, r0
 800359c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a4:	d126      	bne.n	80035f4 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0208 	orr.w	r2, r2, #8
 80035b8:	b292      	uxth	r2, r2
 80035ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d0:	b292      	uxth	r2, r2
 80035d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0204 	orr.w	r2, r2, #4
 80035e8:	b292      	uxth	r2, r2
 80035ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f009 fd34 	bl	800d05c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f004 fa01 	bl	8007a00 <USB_ReadInterrupts>
 80035fe:	4603      	mov	r3, r0
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d13f      	bne.n	8003688 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003610:	b29a      	uxth	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800361a:	b292      	uxth	r2, r2
 800361c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003626:	2b00      	cmp	r3, #0
 8003628:	d12b      	bne.n	8003682 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0204 	orr.w	r2, r2, #4
 800363c:	b292      	uxth	r2, r2
 800363e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800364a:	b29a      	uxth	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0208 	orr.w	r2, r2, #8
 8003654:	b292      	uxth	r2, r2
 8003656:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800366a:	b29b      	uxth	r3, r3
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003678:	2101      	movs	r1, #1
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f009 ff7c 	bl	800d578 <HAL_PCDEx_LPM_Callback>
 8003680:	e002      	b.n	8003688 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f009 fcea 	bl	800d05c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f004 f9b7 	bl	8007a00 <USB_ReadInterrupts>
 8003692:	4603      	mov	r3, r0
 8003694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800369c:	d10e      	bne.n	80036bc <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036b0:	b292      	uxth	r2, r2
 80036b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f009 fca3 	bl	800d002 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f004 f99d 	bl	8007a00 <USB_ReadInterrupts>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d0:	d10b      	bne.n	80036ea <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036da:	b29a      	uxth	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e4:	b292      	uxth	r2, r2
 80036e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_PCD_SetAddress+0x1a>
 8003708:	2302      	movs	r3, #2
 800370a:	e013      	b.n	8003734 <HAL_PCD_SetAddress+0x42>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f004 f92b 	bl	8007980 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	4608      	mov	r0, r1
 8003746:	4611      	mov	r1, r2
 8003748:	461a      	mov	r2, r3
 800374a:	4603      	mov	r3, r0
 800374c:	70fb      	strb	r3, [r7, #3]
 800374e:	460b      	mov	r3, r1
 8003750:	803b      	strh	r3, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800375a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800375e:	2b00      	cmp	r3, #0
 8003760:	da0b      	bge.n	800377a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	015b      	lsls	r3, r3, #5
 800376a:	3328      	adds	r3, #40	; 0x28
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4413      	add	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	705a      	strb	r2, [r3, #1]
 8003778:	e00b      	b.n	8003792 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	015b      	lsls	r3, r3, #5
 8003782:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	4413      	add	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	b2da      	uxtb	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800379e:	883a      	ldrh	r2, [r7, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	78ba      	ldrb	r2, [r7, #2]
 80037a8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d004      	beq.n	80037bc <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037bc:	78bb      	ldrb	r3, [r7, #2]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d102      	bne.n	80037c8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_PCD_EP_Open+0x9a>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e00e      	b.n	80037f4 <HAL_PCD_EP_Open+0xb8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68f9      	ldr	r1, [r7, #12]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f003 f8b7 	bl	8006958 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80037f2:	7afb      	ldrb	r3, [r7, #11]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800380c:	2b00      	cmp	r3, #0
 800380e:	da0b      	bge.n	8003828 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	015b      	lsls	r3, r3, #5
 8003818:	3328      	adds	r3, #40	; 0x28
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	705a      	strb	r2, [r3, #1]
 8003826:	e00b      	b.n	8003840 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	015b      	lsls	r3, r3, #5
 8003830:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4413      	add	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_PCD_EP_Close+0x5e>
 8003856:	2302      	movs	r3, #2
 8003858:	e00e      	b.n	8003878 <HAL_PCD_EP_Close+0x7c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	4618      	mov	r0, r3
 800386a:	f003 fb65 	bl	8006f38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	460b      	mov	r3, r1
 800388e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003890:	7afb      	ldrb	r3, [r7, #11]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	015b      	lsls	r3, r3, #5
 8003898:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4413      	add	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2200      	movs	r2, #0
 80038b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2200      	movs	r2, #0
 80038b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ba:	7afb      	ldrb	r3, [r7, #11]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038c6:	7afb      	ldrb	r3, [r7, #11]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d106      	bne.n	80038de <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6979      	ldr	r1, [r7, #20]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f003 fcc4 	bl	8007264 <USB_EPStartXfer>
 80038dc:	e005      	b.n	80038ea <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6979      	ldr	r1, [r7, #20]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 fcbd 	bl	8007264 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	330a      	adds	r3, #10
 800390a:	015b      	lsls	r3, r3, #5
 800390c:	4413      	add	r3, r2
 800390e:	3304      	adds	r3, #4
 8003910:	681b      	ldr	r3, [r3, #0]
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b086      	sub	sp, #24
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	460b      	mov	r3, r1
 800392c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800392e:	7afb      	ldrb	r3, [r7, #11]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	015b      	lsls	r3, r3, #5
 8003936:	3328      	adds	r3, #40	; 0x28
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4413      	add	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2200      	movs	r2, #0
 800394e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2201      	movs	r2, #1
 8003954:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003956:	7afb      	ldrb	r3, [r7, #11]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	b2da      	uxtb	r2, r3
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003962:	7afb      	ldrb	r3, [r7, #11]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6979      	ldr	r1, [r7, #20]
 8003972:	4618      	mov	r0, r3
 8003974:	f003 fc76 	bl	8007264 <USB_EPStartXfer>
 8003978:	e005      	b.n	8003986 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6979      	ldr	r1, [r7, #20]
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fc6f 	bl	8007264 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	f003 0207 	and.w	r2, r3, #7
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d901      	bls.n	80039ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e046      	b.n	8003a3c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	da0b      	bge.n	80039ce <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	015b      	lsls	r3, r3, #5
 80039be:	3328      	adds	r3, #40	; 0x28
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	705a      	strb	r2, [r3, #1]
 80039cc:	e009      	b.n	80039e2 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	015b      	lsls	r3, r3, #5
 80039d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_PCD_EP_SetStall+0x72>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e01c      	b.n	8003a3c <HAL_PCD_EP_SetStall+0xac>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68f9      	ldr	r1, [r7, #12]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f003 fedf 	bl	80077d4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d108      	bne.n	8003a32 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	f003 fff7 	bl	8007a20 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d901      	bls.n	8003a62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e03a      	b.n	8003ad8 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	da0b      	bge.n	8003a82 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	015b      	lsls	r3, r3, #5
 8003a72:	3328      	adds	r3, #40	; 0x28
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	705a      	strb	r2, [r3, #1]
 8003a80:	e00b      	b.n	8003a9a <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	015b      	lsls	r3, r3, #5
 8003a8a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_PCD_EP_ClrStall+0x76>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e00e      	b.n	8003ad8 <HAL_PCD_EP_ClrStall+0x94>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68f9      	ldr	r1, [r7, #12]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f003 fec5 	bl	8007858 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003ae0:	b590      	push	{r4, r7, lr}
 8003ae2:	b089      	sub	sp, #36	; 0x24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ae8:	e274      	b.n	8003fd4 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003af2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003af4:	8afb      	ldrh	r3, [r7, #22]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003afe:	7d7b      	ldrb	r3, [r7, #21]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f040 813c 	bne.w	8003d7e <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b06:	8afb      	ldrh	r3, [r7, #22]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d14f      	bne.n	8003bb0 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b20:	b29c      	uxth	r4, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3328      	adds	r3, #40	; 0x28
 8003b36:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	4413      	add	r3, r2
 8003b52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	441a      	add	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b6e:	2100      	movs	r1, #0
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f009 fa2f 	bl	800cfd4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8228 	beq.w	8003fd4 <PCD_EP_ISR_Handler+0x4f4>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f040 8223 	bne.w	8003fd4 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	b292      	uxth	r2, r2
 8003ba2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003bae:	e211      	b.n	8003fd4 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003bb6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003bc0:	8a7b      	ldrh	r3, [r7, #18]
 8003bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d031      	beq.n	8003c2e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	4413      	add	r3, r2
 8003be4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f003 ff58 	bl	8007aba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c16:	4013      	ands	r3, r2
 8003c18:	b29c      	uxth	r4, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003c22:	b292      	uxth	r2, r2
 8003c24:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f009 f9aa 	bl	800cf80 <HAL_PCD_SetupStageCallback>
 8003c2c:	e1d2      	b.n	8003fd4 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f280 81ce 	bge.w	8003fd4 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c44:	4013      	ands	r3, r2
 8003c46:	b29c      	uxth	r4, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003c50:	b292      	uxth	r2, r2
 8003c52:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d019      	beq.n	8003cb8 <PCD_EP_ISR_Handler+0x1d8>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6959      	ldr	r1, [r3, #20]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f003 ff0c 	bl	8007aba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	441a      	add	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f009 f976 	bl	800cfa4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461c      	mov	r4, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	441c      	add	r4, r3
 8003cca:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003cce:	461c      	mov	r4, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10e      	bne.n	8003cf6 <PCD_EP_ISR_Handler+0x216>
 8003cd8:	8823      	ldrh	r3, [r4, #0]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	8023      	strh	r3, [r4, #0]
 8003ce4:	8823      	ldrh	r3, [r4, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	8023      	strh	r3, [r4, #0]
 8003cf4:	e02d      	b.n	8003d52 <PCD_EP_ISR_Handler+0x272>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b3e      	cmp	r3, #62	; 0x3e
 8003cfc:	d812      	bhi.n	8003d24 <PCD_EP_ISR_Handler+0x244>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <PCD_EP_ISR_Handler+0x238>
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	3301      	adds	r3, #1
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	029b      	lsls	r3, r3, #10
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	8023      	strh	r3, [r4, #0]
 8003d22:	e016      	b.n	8003d52 <PCD_EP_ISR_Handler+0x272>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <PCD_EP_ISR_Handler+0x25e>
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	029b      	lsls	r3, r3, #10
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	b29c      	uxth	r4, r3
 8003d64:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d68:	b29c      	uxth	r4, r3
 8003d6a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003d6e:	b29c      	uxth	r4, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b9e      	ldr	r3, [pc, #632]	; (8003ff0 <PCD_EP_ISR_Handler+0x510>)
 8003d76:	4323      	orrs	r3, r4
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8013      	strh	r3, [r2, #0]
 8003d7c:	e12a      	b.n	8003fd4 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	7d7b      	ldrb	r3, [r7, #21]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f280 80cb 	bge.w	8003f2e <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	7d7b      	ldrb	r3, [r7, #21]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003dac:	4013      	ands	r3, r2
 8003dae:	b29c      	uxth	r4, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	7d7b      	ldrb	r3, [r7, #21]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003dc0:	b292      	uxth	r2, r2
 8003dc2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003dc4:	7d7b      	ldrb	r3, [r7, #21]
 8003dc6:	015b      	lsls	r3, r3, #5
 8003dc8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	4413      	add	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	7b1b      	ldrb	r3, [r3, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d11f      	bne.n	8003e1a <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	4413      	add	r3, r2
 8003df4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dfe:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003e00:	8bfb      	ldrh	r3, [r7, #30]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d06e      	beq.n	8003ee4 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6959      	ldr	r1, [r3, #20]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	88da      	ldrh	r2, [r3, #6]
 8003e12:	8bfb      	ldrh	r3, [r7, #30]
 8003e14:	f003 fe51 	bl	8007aba <USB_ReadPMA>
 8003e18:	e064      	b.n	8003ee4 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e34:	b29c      	uxth	r4, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	441a      	add	r2, r3
 8003e44:	4b6b      	ldr	r3, [pc, #428]	; (8003ff4 <PCD_EP_ISR_Handler+0x514>)
 8003e46:	4323      	orrs	r3, r4
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01f      	beq.n	8003ea6 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e8a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003e8c:	8bfb      	ldrh	r3, [r7, #30]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d028      	beq.n	8003ee4 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6959      	ldr	r1, [r3, #20]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	891a      	ldrh	r2, [r3, #8]
 8003e9e:	8bfb      	ldrh	r3, [r7, #30]
 8003ea0:	f003 fe0b 	bl	8007aba <USB_ReadPMA>
 8003ea4:	e01e      	b.n	8003ee4 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eca:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003ecc:	8bfb      	ldrh	r3, [r7, #30]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6959      	ldr	r1, [r3, #20]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	895a      	ldrh	r2, [r3, #10]
 8003ede:	8bfb      	ldrh	r3, [r7, #30]
 8003ee0:	f003 fdeb 	bl	8007aba <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	8bfb      	ldrh	r3, [r7, #30]
 8003eea:	441a      	add	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	8bfb      	ldrh	r3, [r7, #30]
 8003ef6:	441a      	add	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d004      	beq.n	8003f0e <PCD_EP_ISR_Handler+0x42e>
 8003f04:	8bfa      	ldrh	r2, [r7, #30]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d206      	bcs.n	8003f1c <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	4619      	mov	r1, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f009 f845 	bl	800cfa4 <HAL_PCD_DataOutStageCallback>
 8003f1a:	e008      	b.n	8003f2e <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	7819      	ldrb	r1, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	695a      	ldr	r2, [r3, #20]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fca9 	bl	8003880 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f2e:	8a7b      	ldrh	r3, [r7, #18]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d04d      	beq.n	8003fd4 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003f38:	7d7b      	ldrb	r3, [r7, #21]
 8003f3a:	015b      	lsls	r3, r3, #5
 8003f3c:	3328      	adds	r3, #40	; 0x28
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4413      	add	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	7d7b      	ldrb	r3, [r7, #21]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5c:	b29c      	uxth	r4, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	7d7b      	ldrb	r3, [r7, #21]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	441a      	add	r2, r3
 8003f6a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	441a      	add	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d106      	bne.n	8003fc2 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f009 f80a 	bl	800cfd4 <HAL_PCD_DataInStageCallback>
 8003fc0:	e008      	b.n	8003fd4 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	7819      	ldrb	r1, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fca5 	bl	800391e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	b21b      	sxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f6ff ad82 	blt.w	8003aea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3724      	adds	r7, #36	; 0x24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd90      	pop	{r4, r7, pc}
 8003ff0:	ffff8080 	.word	0xffff8080
 8003ff4:	ffff80c0 	.word	0xffff80c0

08003ff8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	817b      	strh	r3, [r7, #10]
 8004006:	4613      	mov	r3, r2
 8004008:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800400a:	897b      	ldrh	r3, [r7, #10]
 800400c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004016:	897b      	ldrh	r3, [r7, #10]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	015b      	lsls	r3, r3, #5
 800401e:	3328      	adds	r3, #40	; 0x28
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e006      	b.n	8004036 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004028:	897b      	ldrh	r3, [r7, #10]
 800402a:	015b      	lsls	r3, r3, #5
 800402c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4413      	add	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004036:	893b      	ldrh	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d107      	bne.n	800404c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2200      	movs	r2, #0
 8004040:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	b29a      	uxth	r2, r3
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	80da      	strh	r2, [r3, #6]
 800404a:	e00b      	b.n	8004064 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2201      	movs	r2, #1
 8004050:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	b29a      	uxth	r2, r3
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	b29a      	uxth	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004072:	b480      	push	{r7}
 8004074:	b085      	sub	sp, #20
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004096:	b29b      	uxth	r3, r3
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f043 0302 	orr.w	r3, r3, #2
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40007000 	.word	0x40007000

080040e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f2:	d130      	bne.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040f4:	4b23      	ldr	r3, [pc, #140]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004100:	d038      	beq.n	8004174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800410a:	4a1e      	ldr	r2, [pc, #120]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800410c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004110:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004112:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2232      	movs	r2, #50	; 0x32
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	4a1b      	ldr	r2, [pc, #108]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	0c9b      	lsrs	r3, r3, #18
 8004124:	3301      	adds	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004128:	e002      	b.n	8004130 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3b01      	subs	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004130:	4b14      	ldr	r3, [pc, #80]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d102      	bne.n	8004144 <HAL_PWREx_ControlVoltageScaling+0x60>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f2      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004150:	d110      	bne.n	8004174 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e00f      	b.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800415e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004162:	d007      	beq.n	8004174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004164:	4b07      	ldr	r3, [pc, #28]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800416c:	4a05      	ldr	r2, [pc, #20]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800416e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004172:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40007000 	.word	0x40007000
 8004188:	20000040 	.word	0x20000040
 800418c:	431bde83 	.word	0x431bde83

08004190 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <HAL_PWREx_EnableVddUSB+0x1c>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a04      	ldr	r2, [pc, #16]	; (80041ac <HAL_PWREx_EnableVddUSB+0x1c>)
 800419a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800419e:	6053      	str	r3, [r2, #4]
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40007000 	.word	0x40007000

080041b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	f000 bc11 	b.w	80049e6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041c4:	4ba0      	ldr	r3, [pc, #640]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 030c 	and.w	r3, r3, #12
 80041cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ce:	4b9e      	ldr	r3, [pc, #632]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80e4 	beq.w	80043ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d007      	beq.n	80041fc <HAL_RCC_OscConfig+0x4c>
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b0c      	cmp	r3, #12
 80041f0:	f040 808b 	bne.w	800430a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	f040 8087 	bne.w	800430a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041fc:	4b92      	ldr	r3, [pc, #584]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_OscConfig+0x64>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e3e8      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	4b8b      	ldr	r3, [pc, #556]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <HAL_RCC_OscConfig+0x7e>
 8004224:	4b88      	ldr	r3, [pc, #544]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800422c:	e005      	b.n	800423a <HAL_RCC_OscConfig+0x8a>
 800422e:	4b86      	ldr	r3, [pc, #536]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800423a:	4293      	cmp	r3, r2
 800423c:	d223      	bcs.n	8004286 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fd94 	bl	8004d70 <RCC_SetFlashLatencyFromMSIRange>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e3c9      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004252:	4b7d      	ldr	r3, [pc, #500]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a7c      	ldr	r2, [pc, #496]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004258:	f043 0308 	orr.w	r3, r3, #8
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	4b7a      	ldr	r3, [pc, #488]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	4977      	ldr	r1, [pc, #476]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004270:	4b75      	ldr	r3, [pc, #468]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	4972      	ldr	r1, [pc, #456]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
 8004284:	e025      	b.n	80042d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004286:	4b70      	ldr	r3, [pc, #448]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6f      	ldr	r2, [pc, #444]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 800428c:	f043 0308 	orr.w	r3, r3, #8
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b6d      	ldr	r3, [pc, #436]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	496a      	ldr	r1, [pc, #424]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042a4:	4b68      	ldr	r3, [pc, #416]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	4965      	ldr	r1, [pc, #404]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fd54 	bl	8004d70 <RCC_SetFlashLatencyFromMSIRange>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e389      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042d2:	f000 fc6f 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 80042d6:	4601      	mov	r1, r0
 80042d8:	4b5b      	ldr	r3, [pc, #364]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	4a5a      	ldr	r2, [pc, #360]	; (800444c <HAL_RCC_OscConfig+0x29c>)
 80042e4:	5cd3      	ldrb	r3, [r2, r3]
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	fa21 f303 	lsr.w	r3, r1, r3
 80042ee:	4a58      	ldr	r2, [pc, #352]	; (8004450 <HAL_RCC_OscConfig+0x2a0>)
 80042f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042f2:	4b58      	ldr	r3, [pc, #352]	; (8004454 <HAL_RCC_OscConfig+0x2a4>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fabe 	bl	8001878 <HAL_InitTick>
 80042fc:	4603      	mov	r3, r0
 80042fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d052      	beq.n	80043ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	e36d      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d032      	beq.n	8004378 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004312:	4b4d      	ldr	r3, [pc, #308]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a4c      	ldr	r2, [pc, #304]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800431e:	f7fd ffbb 	bl	8002298 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004326:	f7fd ffb7 	bl	8002298 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e356      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004338:	4b43      	ldr	r3, [pc, #268]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004344:	4b40      	ldr	r3, [pc, #256]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a3f      	ldr	r2, [pc, #252]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 800434a:	f043 0308 	orr.w	r3, r3, #8
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	4b3d      	ldr	r3, [pc, #244]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	493a      	ldr	r1, [pc, #232]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004362:	4b39      	ldr	r3, [pc, #228]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	4935      	ldr	r1, [pc, #212]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004372:	4313      	orrs	r3, r2
 8004374:	604b      	str	r3, [r1, #4]
 8004376:	e01a      	b.n	80043ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004378:	4b33      	ldr	r3, [pc, #204]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a32      	ldr	r2, [pc, #200]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004384:	f7fd ff88 	bl	8002298 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800438c:	f7fd ff84 	bl	8002298 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e323      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800439e:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1dc>
 80043aa:	e000      	b.n	80043ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d073      	beq.n	80044a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d005      	beq.n	80043cc <HAL_RCC_OscConfig+0x21c>
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d10e      	bne.n	80043e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d10b      	bne.n	80043e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d063      	beq.n	80044a0 <HAL_RCC_OscConfig+0x2f0>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d15f      	bne.n	80044a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e300      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d106      	bne.n	80043fc <HAL_RCC_OscConfig+0x24c>
 80043ee:	4b16      	ldr	r3, [pc, #88]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a15      	ldr	r2, [pc, #84]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e01d      	b.n	8004438 <HAL_RCC_OscConfig+0x288>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004404:	d10c      	bne.n	8004420 <HAL_RCC_OscConfig+0x270>
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a0f      	ldr	r2, [pc, #60]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 800440c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	e00b      	b.n	8004438 <HAL_RCC_OscConfig+0x288>
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a08      	ldr	r2, [pc, #32]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a05      	ldr	r2, [pc, #20]	; (8004448 <HAL_RCC_OscConfig+0x298>)
 8004432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01b      	beq.n	8004478 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fd ff2a 	bl	8002298 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004446:	e010      	b.n	800446a <HAL_RCC_OscConfig+0x2ba>
 8004448:	40021000 	.word	0x40021000
 800444c:	0800d85c 	.word	0x0800d85c
 8004450:	20000040 	.word	0x20000040
 8004454:	200000ac 	.word	0x200000ac
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004458:	f7fd ff1e 	bl	8002298 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e2bd      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800446a:	4baf      	ldr	r3, [pc, #700]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x2a8>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd ff0e 	bl	8002298 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004480:	f7fd ff0a 	bl	8002298 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	; 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e2a9      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004492:	4ba5      	ldr	r3, [pc, #660]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x2d0>
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d060      	beq.n	8004570 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_OscConfig+0x310>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b0c      	cmp	r3, #12
 80044b8:	d119      	bne.n	80044ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d116      	bne.n	80044ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c0:	4b99      	ldr	r3, [pc, #612]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_OscConfig+0x328>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e286      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d8:	4b93      	ldr	r3, [pc, #588]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	061b      	lsls	r3, r3, #24
 80044e6:	4990      	ldr	r1, [pc, #576]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ec:	e040      	b.n	8004570 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d023      	beq.n	800453e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f6:	4b8c      	ldr	r3, [pc, #560]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a8b      	ldr	r2, [pc, #556]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004502:	f7fd fec9 	bl	8002298 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800450a:	f7fd fec5 	bl	8002298 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e264      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800451c:	4b82      	ldr	r3, [pc, #520]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004528:	4b7f      	ldr	r3, [pc, #508]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	497c      	ldr	r1, [pc, #496]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]
 800453c:	e018      	b.n	8004570 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453e:	4b7a      	ldr	r3, [pc, #488]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a79      	ldr	r2, [pc, #484]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 8004544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454a:	f7fd fea5 	bl	8002298 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004552:	f7fd fea1 	bl	8002298 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e240      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004564:	4b70      	ldr	r3, [pc, #448]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f0      	bne.n	8004552 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	d03c      	beq.n	80045f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01c      	beq.n	80045be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004584:	4b68      	ldr	r3, [pc, #416]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 8004586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800458a:	4a67      	ldr	r2, [pc, #412]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fd fe80 	bl	8002298 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800459c:	f7fd fe7c 	bl	8002298 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e21b      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ae:	4b5e      	ldr	r3, [pc, #376]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80045b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ef      	beq.n	800459c <HAL_RCC_OscConfig+0x3ec>
 80045bc:	e01b      	b.n	80045f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045be:	4b5a      	ldr	r3, [pc, #360]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80045c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c4:	4a58      	ldr	r2, [pc, #352]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ce:	f7fd fe63 	bl	8002298 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d6:	f7fd fe5f 	bl	8002298 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e1fe      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045e8:	4b4f      	ldr	r3, [pc, #316]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80045ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1ef      	bne.n	80045d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 80a6 	beq.w	8004750 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004604:	2300      	movs	r3, #0
 8004606:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004608:	4b47      	ldr	r3, [pc, #284]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10d      	bne.n	8004630 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004614:	4b44      	ldr	r3, [pc, #272]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	4a43      	ldr	r2, [pc, #268]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 800461a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461e:	6593      	str	r3, [r2, #88]	; 0x58
 8004620:	4b41      	ldr	r3, [pc, #260]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 8004622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462c:	2301      	movs	r3, #1
 800462e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004630:	4b3e      	ldr	r3, [pc, #248]	; (800472c <HAL_RCC_OscConfig+0x57c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d118      	bne.n	800466e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800463c:	4b3b      	ldr	r3, [pc, #236]	; (800472c <HAL_RCC_OscConfig+0x57c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a3a      	ldr	r2, [pc, #232]	; (800472c <HAL_RCC_OscConfig+0x57c>)
 8004642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004646:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004648:	f7fd fe26 	bl	8002298 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004650:	f7fd fe22 	bl	8002298 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e1c1      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004662:	4b32      	ldr	r3, [pc, #200]	; (800472c <HAL_RCC_OscConfig+0x57c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d108      	bne.n	8004688 <HAL_RCC_OscConfig+0x4d8>
 8004676:	4b2c      	ldr	r3, [pc, #176]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 8004678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467c:	4a2a      	ldr	r2, [pc, #168]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004686:	e024      	b.n	80046d2 <HAL_RCC_OscConfig+0x522>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b05      	cmp	r3, #5
 800468e:	d110      	bne.n	80046b2 <HAL_RCC_OscConfig+0x502>
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	4a24      	ldr	r2, [pc, #144]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 8004698:	f043 0304 	orr.w	r3, r3, #4
 800469c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046a0:	4b21      	ldr	r3, [pc, #132]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a6:	4a20      	ldr	r2, [pc, #128]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046b0:	e00f      	b.n	80046d2 <HAL_RCC_OscConfig+0x522>
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046c2:	4b19      	ldr	r3, [pc, #100]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c8:	4a17      	ldr	r2, [pc, #92]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80046ca:	f023 0304 	bic.w	r3, r3, #4
 80046ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fd fddd 	bl	8002298 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fd fdd9 	bl	8002298 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e176      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <HAL_RCC_OscConfig+0x578>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0ed      	beq.n	80046e2 <HAL_RCC_OscConfig+0x532>
 8004706:	e01a      	b.n	800473e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004708:	f7fd fdc6 	bl	8002298 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800470e:	e00f      	b.n	8004730 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004710:	f7fd fdc2 	bl	8002298 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	; 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d906      	bls.n	8004730 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e15f      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004730:	4baa      	ldr	r3, [pc, #680]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e8      	bne.n	8004710 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800473e:	7ffb      	ldrb	r3, [r7, #31]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d105      	bne.n	8004750 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004744:	4ba5      	ldr	r3, [pc, #660]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	4aa4      	ldr	r2, [pc, #656]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 800474a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d03c      	beq.n	80047d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01c      	beq.n	800479e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004764:	4b9d      	ldr	r3, [pc, #628]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800476a:	4a9c      	ldr	r2, [pc, #624]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004774:	f7fd fd90 	bl	8002298 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800477c:	f7fd fd8c 	bl	8002298 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e12b      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800478e:	4b93      	ldr	r3, [pc, #588]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0ef      	beq.n	800477c <HAL_RCC_OscConfig+0x5cc>
 800479c:	e01b      	b.n	80047d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800479e:	4b8f      	ldr	r3, [pc, #572]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80047a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047a4:	4a8d      	ldr	r2, [pc, #564]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fd fd73 	bl	8002298 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047b6:	f7fd fd6f 	bl	8002298 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e10e      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047c8:	4b84      	ldr	r3, [pc, #528]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80047ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1ef      	bne.n	80047b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8102 	beq.w	80049e4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	f040 80c5 	bne.w	8004974 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047ea:	4b7c      	ldr	r3, [pc, #496]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f003 0203 	and.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d12c      	bne.n	8004858 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	3b01      	subs	r3, #1
 800480a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d123      	bne.n	8004858 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d11b      	bne.n	8004858 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d113      	bne.n	8004858 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	3b01      	subs	r3, #1
 800483e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d109      	bne.n	8004858 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	3b01      	subs	r3, #1
 8004852:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004854:	429a      	cmp	r2, r3
 8004856:	d067      	beq.n	8004928 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d062      	beq.n	8004924 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800485e:	4b5f      	ldr	r3, [pc, #380]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e0bb      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800486e:	4b5b      	ldr	r3, [pc, #364]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a5a      	ldr	r2, [pc, #360]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004874:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004878:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800487a:	f7fd fd0d 	bl	8002298 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004882:	f7fd fd09 	bl	8002298 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e0a8      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004894:	4b51      	ldr	r3, [pc, #324]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f0      	bne.n	8004882 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048a0:	4b4e      	ldr	r3, [pc, #312]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	4b4e      	ldr	r3, [pc, #312]	; (80049e0 <HAL_RCC_OscConfig+0x830>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048b0:	3a01      	subs	r2, #1
 80048b2:	0112      	lsls	r2, r2, #4
 80048b4:	4311      	orrs	r1, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048ba:	0212      	lsls	r2, r2, #8
 80048bc:	4311      	orrs	r1, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048c2:	0852      	lsrs	r2, r2, #1
 80048c4:	3a01      	subs	r2, #1
 80048c6:	0552      	lsls	r2, r2, #21
 80048c8:	4311      	orrs	r1, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048ce:	0852      	lsrs	r2, r2, #1
 80048d0:	3a01      	subs	r2, #1
 80048d2:	0652      	lsls	r2, r2, #25
 80048d4:	4311      	orrs	r1, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048da:	06d2      	lsls	r2, r2, #27
 80048dc:	430a      	orrs	r2, r1
 80048de:	493f      	ldr	r1, [pc, #252]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048e4:	4b3d      	ldr	r3, [pc, #244]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a3c      	ldr	r2, [pc, #240]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80048ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048f0:	4b3a      	ldr	r3, [pc, #232]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4a39      	ldr	r2, [pc, #228]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80048f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048fc:	f7fd fccc 	bl	8002298 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004904:	f7fd fcc8 	bl	8002298 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e067      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004916:	4b31      	ldr	r3, [pc, #196]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004922:	e05f      	b.n	80049e4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e05e      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004928:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d157      	bne.n	80049e4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004934:	4b29      	ldr	r3, [pc, #164]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a28      	ldr	r2, [pc, #160]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 800493a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800493e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004940:	4b26      	ldr	r3, [pc, #152]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4a25      	ldr	r2, [pc, #148]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800494a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800494c:	f7fd fca4 	bl	8002298 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004954:	f7fd fca0 	bl	8002298 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e03f      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004966:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x7a4>
 8004972:	e037      	b.n	80049e4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b0c      	cmp	r3, #12
 8004978:	d02d      	beq.n	80049d6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497a:	4b18      	ldr	r3, [pc, #96]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004984:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d105      	bne.n	800499e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	4a11      	ldr	r2, [pc, #68]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004998:	f023 0303 	bic.w	r3, r3, #3
 800499c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800499e:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	4a0e      	ldr	r2, [pc, #56]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80049a4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80049a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ae:	f7fd fc73 	bl	8002298 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b6:	f7fd fc6f 	bl	8002298 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e00e      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x806>
 80049d4:	e006      	b.n	80049e4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e005      	b.n	80049e6 <HAL_RCC_OscConfig+0x836>
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
 80049e0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop

080049f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0c8      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a04:	4b66      	ldr	r3, [pc, #408]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d910      	bls.n	8004a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b63      	ldr	r3, [pc, #396]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 0207 	bic.w	r2, r3, #7
 8004a1a:	4961      	ldr	r1, [pc, #388]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b5f      	ldr	r3, [pc, #380]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0b0      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d04c      	beq.n	8004ada <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d107      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a48:	4b56      	ldr	r3, [pc, #344]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d121      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e09e      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d107      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a60:	4b50      	ldr	r3, [pc, #320]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d115      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e092      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d107      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a78:	4b4a      	ldr	r3, [pc, #296]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e086      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a88:	4b46      	ldr	r3, [pc, #280]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e07e      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a98:	4b42      	ldr	r3, [pc, #264]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f023 0203 	bic.w	r2, r3, #3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	493f      	ldr	r1, [pc, #252]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aaa:	f7fd fbf5 	bl	8002298 <HAL_GetTick>
 8004aae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab2:	f7fd fbf1 	bl	8002298 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e066      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac8:	4b36      	ldr	r3, [pc, #216]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 020c 	and.w	r2, r3, #12
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d1eb      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae6:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	492c      	ldr	r1, [pc, #176]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004af8:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d210      	bcs.n	8004b28 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b26      	ldr	r3, [pc, #152]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 0207 	bic.w	r2, r3, #7
 8004b0e:	4924      	ldr	r1, [pc, #144]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b22      	ldr	r3, [pc, #136]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e036      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b34:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4918      	ldr	r1, [pc, #96]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b52:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4910      	ldr	r1, [pc, #64]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b66:	f000 f825 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8004b6a:	4601      	mov	r1, r0
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	4a0c      	ldr	r2, [pc, #48]	; (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	5cd3      	ldrb	r3, [r2, r3]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	fa21 f303 	lsr.w	r3, r1, r3
 8004b82:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b86:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fc fe74 	bl	8001878 <HAL_InitTick>
 8004b90:	4603      	mov	r3, r0
 8004b92:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b94:	7afb      	ldrb	r3, [r7, #11]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40022000 	.word	0x40022000
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	0800d85c 	.word	0x0800d85c
 8004bac:	20000040 	.word	0x20000040
 8004bb0:	200000ac 	.word	0x200000ac

08004bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b089      	sub	sp, #36	; 0x24
 8004bb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc2:	4b3d      	ldr	r3, [pc, #244]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bcc:	4b3a      	ldr	r3, [pc, #232]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	2b0c      	cmp	r3, #12
 8004be0:	d121      	bne.n	8004c26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d11e      	bne.n	8004c26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004be8:	4b33      	ldr	r3, [pc, #204]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d107      	bne.n	8004c04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bf4:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	e005      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c04:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c10:	4a2a      	ldr	r2, [pc, #168]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10d      	bne.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d102      	bne.n	8004c32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c2c:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	e004      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c38:	4b22      	ldr	r3, [pc, #136]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b0c      	cmp	r3, #12
 8004c40:	d133      	bne.n	8004caa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c42:	4b1d      	ldr	r3, [pc, #116]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d002      	beq.n	8004c58 <HAL_RCC_GetSysClockFreq+0xa4>
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d003      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0xaa>
 8004c56:	e005      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c58:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c5a:	617b      	str	r3, [r7, #20]
      break;
 8004c5c:	e005      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c5e:	4b19      	ldr	r3, [pc, #100]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c60:	617b      	str	r3, [r7, #20]
      break;
 8004c62:	e002      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	617b      	str	r3, [r7, #20]
      break;
 8004c68:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	091b      	lsrs	r3, r3, #4
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	3301      	adds	r3, #1
 8004c76:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c78:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	fb02 f203 	mul.w	r2, r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c90:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	0e5b      	lsrs	r3, r3, #25
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004caa:	69bb      	ldr	r3, [r7, #24]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3724      	adds	r7, #36	; 0x24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	0800d874 	.word	0x0800d874
 8004cc0:	00f42400 	.word	0x00f42400
 8004cc4:	007a1200 	.word	0x007a1200

08004cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ccc:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cce:	681b      	ldr	r3, [r3, #0]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000040 	.word	0x20000040

08004ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ce4:	f7ff fff0 	bl	8004cc8 <HAL_RCC_GetHCLKFreq>
 8004ce8:	4601      	mov	r1, r0
 8004cea:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	0adb      	lsrs	r3, r3, #11
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cf6:	5cd3      	ldrb	r3, [r2, r3]
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40021000 	.word	0x40021000
 8004d08:	0800d86c 	.word	0x0800d86c

08004d0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	220f      	movs	r2, #15
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004d1c:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <HAL_RCC_GetClockConfig+0x5c>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0203 	and.w	r2, r3, #3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <HAL_RCC_GetClockConfig+0x5c>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <HAL_RCC_GetClockConfig+0x5c>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004d40:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <HAL_RCC_GetClockConfig+0x5c>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	08db      	lsrs	r3, r3, #3
 8004d46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004d4e:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <HAL_RCC_GetClockConfig+0x60>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0207 	and.w	r2, r3, #7
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	601a      	str	r2, [r3, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40022000 	.word	0x40022000

08004d70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d78:	2300      	movs	r3, #0
 8004d7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d7c:	4b2a      	ldr	r3, [pc, #168]	; (8004e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d88:	f7ff f99e 	bl	80040c8 <HAL_PWREx_GetVoltageRange>
 8004d8c:	6178      	str	r0, [r7, #20]
 8004d8e:	e014      	b.n	8004dba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d90:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d94:	4a24      	ldr	r2, [pc, #144]	; (8004e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d9c:	4b22      	ldr	r3, [pc, #136]	; (8004e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004da8:	f7ff f98e 	bl	80040c8 <HAL_PWREx_GetVoltageRange>
 8004dac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dae:	4b1e      	ldr	r3, [pc, #120]	; (8004e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db2:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc0:	d10b      	bne.n	8004dda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b80      	cmp	r3, #128	; 0x80
 8004dc6:	d919      	bls.n	8004dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2ba0      	cmp	r3, #160	; 0xa0
 8004dcc:	d902      	bls.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dce:	2302      	movs	r3, #2
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	e013      	b.n	8004dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	e010      	b.n	8004dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b80      	cmp	r3, #128	; 0x80
 8004dde:	d902      	bls.n	8004de6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004de0:	2303      	movs	r3, #3
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	e00a      	b.n	8004dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b80      	cmp	r3, #128	; 0x80
 8004dea:	d102      	bne.n	8004df2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dec:	2302      	movs	r3, #2
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	e004      	b.n	8004dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b70      	cmp	r3, #112	; 0x70
 8004df6:	d101      	bne.n	8004dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004df8:	2301      	movs	r3, #1
 8004dfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f023 0207 	bic.w	r2, r3, #7
 8004e04:	4909      	ldr	r1, [pc, #36]	; (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e0c:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d001      	beq.n	8004e1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	40022000 	.word	0x40022000

08004e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e38:	2300      	movs	r3, #0
 8004e3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d02f      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e54:	d005      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004e56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e5a:	d015      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004e60:	e00f      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004e62:	4b5d      	ldr	r3, [pc, #372]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	4a5c      	ldr	r2, [pc, #368]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e6e:	e00c      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3304      	adds	r3, #4
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fa1e 	bl	80052b8 <RCCEx_PLLSAI1_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e80:	e003      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	74fb      	strb	r3, [r7, #19]
      break;
 8004e86:	e000      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e8a:	7cfb      	ldrb	r3, [r7, #19]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e90:	4b51      	ldr	r3, [pc, #324]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	494e      	ldr	r1, [pc, #312]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ea6:	e001      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
 8004eaa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 809e 	beq.w	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ebe:	4b46      	ldr	r3, [pc, #280]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00d      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed4:	4b40      	ldr	r3, [pc, #256]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed8:	4a3f      	ldr	r2, [pc, #252]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ede:	6593      	str	r3, [r2, #88]	; 0x58
 8004ee0:	4b3d      	ldr	r3, [pc, #244]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eec:	2301      	movs	r3, #1
 8004eee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ef0:	4b3a      	ldr	r3, [pc, #232]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a39      	ldr	r2, [pc, #228]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004efc:	f7fd f9cc 	bl	8002298 <HAL_GetTick>
 8004f00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f02:	e009      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f04:	f7fd f9c8 	bl	8002298 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d902      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	74fb      	strb	r3, [r7, #19]
        break;
 8004f16:	e005      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f18:	4b30      	ldr	r3, [pc, #192]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0ef      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8004f24:	7cfb      	ldrb	r3, [r7, #19]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d15a      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f2a:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01e      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d019      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f46:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f50:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f52:	4b21      	ldr	r3, [pc, #132]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f58:	4a1f      	ldr	r2, [pc, #124]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f62:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f68:	4a1b      	ldr	r2, [pc, #108]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f72:	4a19      	ldr	r2, [pc, #100]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d016      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fd f988 	bl	8002298 <HAL_GetTick>
 8004f88:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8c:	f7fd f984 	bl	8002298 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d902      	bls.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	74fb      	strb	r3, [r7, #19]
            break;
 8004fa2:	e006      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0ec      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8004fb2:	7cfb      	ldrb	r3, [r7, #19]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10b      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fb8:	4b07      	ldr	r3, [pc, #28]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc6:	4904      	ldr	r1, [pc, #16]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fce:	e009      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fd0:	7cfb      	ldrb	r3, [r7, #19]
 8004fd2:	74bb      	strb	r3, [r7, #18]
 8004fd4:	e006      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004fd6:	bf00      	nop
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	7cfb      	ldrb	r3, [r7, #19]
 8004fe2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fe4:	7c7b      	ldrb	r3, [r7, #17]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d105      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fea:	4bb2      	ldr	r3, [pc, #712]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fee:	4ab1      	ldr	r2, [pc, #708]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005002:	4bac      	ldr	r3, [pc, #688]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f023 0203 	bic.w	r2, r3, #3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	49a8      	ldr	r1, [pc, #672]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005024:	4ba3      	ldr	r3, [pc, #652]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502a:	f023 020c 	bic.w	r2, r3, #12
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	49a0      	ldr	r1, [pc, #640]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005046:	4b9b      	ldr	r3, [pc, #620]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	4997      	ldr	r1, [pc, #604]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005068:	4b92      	ldr	r3, [pc, #584]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	498f      	ldr	r1, [pc, #572]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800508a:	4b8a      	ldr	r3, [pc, #552]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005098:	4986      	ldr	r1, [pc, #536]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050ac:	4b81      	ldr	r3, [pc, #516]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	497e      	ldr	r1, [pc, #504]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050ce:	4b79      	ldr	r3, [pc, #484]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050dc:	4975      	ldr	r1, [pc, #468]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050f0:	4b70      	ldr	r3, [pc, #448]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fe:	496d      	ldr	r1, [pc, #436]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005112:	4b68      	ldr	r3, [pc, #416]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	4964      	ldr	r1, [pc, #400]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d028      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005134:	4b5f      	ldr	r3, [pc, #380]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005142:	495c      	ldr	r1, [pc, #368]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005152:	d106      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005154:	4b57      	ldr	r3, [pc, #348]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4a56      	ldr	r2, [pc, #344]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800515a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800515e:	60d3      	str	r3, [r2, #12]
 8005160:	e011      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005166:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800516a:	d10c      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3304      	adds	r3, #4
 8005170:	2101      	movs	r1, #1
 8005172:	4618      	mov	r0, r3
 8005174:	f000 f8a0 	bl	80052b8 <RCCEx_PLLSAI1_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8005182:	7cfb      	ldrb	r3, [r7, #19]
 8005184:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d028      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005192:	4b48      	ldr	r3, [pc, #288]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a0:	4944      	ldr	r1, [pc, #272]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b0:	d106      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b2:	4b40      	ldr	r3, [pc, #256]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	4a3f      	ldr	r2, [pc, #252]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051bc:	60d3      	str	r3, [r2, #12]
 80051be:	e011      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051c8:	d10c      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3304      	adds	r3, #4
 80051ce:	2101      	movs	r1, #1
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 f871 	bl	80052b8 <RCCEx_PLLSAI1_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051da:	7cfb      	ldrb	r3, [r7, #19]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d028      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051f0:	4b30      	ldr	r3, [pc, #192]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fe:	492d      	ldr	r1, [pc, #180]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800520e:	d106      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005210:	4b28      	ldr	r3, [pc, #160]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4a27      	ldr	r2, [pc, #156]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800521a:	60d3      	str	r3, [r2, #12]
 800521c:	e011      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005222:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005226:	d10c      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	2101      	movs	r1, #1
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f842 	bl	80052b8 <RCCEx_PLLSAI1_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005238:	7cfb      	ldrb	r3, [r7, #19]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 800523e:	7cfb      	ldrb	r3, [r7, #19]
 8005240:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01c      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800524e:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525c:	4915      	ldr	r1, [pc, #84]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005268:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800526c:	d10c      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3304      	adds	r3, #4
 8005272:	2102      	movs	r1, #2
 8005274:	4618      	mov	r0, r3
 8005276:	f000 f81f 	bl	80052b8 <RCCEx_PLLSAI1_Config>
 800527a:	4603      	mov	r3, r0
 800527c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800527e:	7cfb      	ldrb	r3, [r7, #19]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8005284:	7cfb      	ldrb	r3, [r7, #19]
 8005286:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005294:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a2:	4904      	ldr	r1, [pc, #16]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40021000 	.word	0x40021000

080052b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052c6:	4b73      	ldr	r3, [pc, #460]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d018      	beq.n	8005304 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052d2:	4b70      	ldr	r3, [pc, #448]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f003 0203 	and.w	r2, r3, #3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d10d      	bne.n	80052fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
       ||
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80052ea:	4b6a      	ldr	r3, [pc, #424]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	091b      	lsrs	r3, r3, #4
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
       ||
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d044      	beq.n	8005388 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	73fb      	strb	r3, [r7, #15]
 8005302:	e041      	b.n	8005388 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d00c      	beq.n	8005326 <RCCEx_PLLSAI1_Config+0x6e>
 800530c:	2b03      	cmp	r3, #3
 800530e:	d013      	beq.n	8005338 <RCCEx_PLLSAI1_Config+0x80>
 8005310:	2b01      	cmp	r3, #1
 8005312:	d120      	bne.n	8005356 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005314:	4b5f      	ldr	r3, [pc, #380]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d11d      	bne.n	800535c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005324:	e01a      	b.n	800535c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005326:	4b5b      	ldr	r3, [pc, #364]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532e:	2b00      	cmp	r3, #0
 8005330:	d116      	bne.n	8005360 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005336:	e013      	b.n	8005360 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005338:	4b56      	ldr	r3, [pc, #344]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10f      	bne.n	8005364 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005344:	4b53      	ldr	r3, [pc, #332]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d109      	bne.n	8005364 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005354:	e006      	b.n	8005364 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	73fb      	strb	r3, [r7, #15]
      break;
 800535a:	e004      	b.n	8005366 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800535c:	bf00      	nop
 800535e:	e002      	b.n	8005366 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005360:	bf00      	nop
 8005362:	e000      	b.n	8005366 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005364:	bf00      	nop
    }

    if(status == HAL_OK)
 8005366:	7bfb      	ldrb	r3, [r7, #15]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10d      	bne.n	8005388 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800536c:	4b49      	ldr	r3, [pc, #292]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6819      	ldr	r1, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	3b01      	subs	r3, #1
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	430b      	orrs	r3, r1
 8005382:	4944      	ldr	r1, [pc, #272]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005384:	4313      	orrs	r3, r2
 8005386:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d17c      	bne.n	8005488 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800538e:	4b41      	ldr	r3, [pc, #260]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a40      	ldr	r2, [pc, #256]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005394:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800539a:	f7fc ff7d 	bl	8002298 <HAL_GetTick>
 800539e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053a0:	e009      	b.n	80053b6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053a2:	f7fc ff79 	bl	8002298 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d902      	bls.n	80053b6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	73fb      	strb	r3, [r7, #15]
        break;
 80053b4:	e005      	b.n	80053c2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053b6:	4b37      	ldr	r3, [pc, #220]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1ef      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d15f      	bne.n	8005488 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d110      	bne.n	80053f0 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053ce:	4b31      	ldr	r3, [pc, #196]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80053d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6892      	ldr	r2, [r2, #8]
 80053de:	0211      	lsls	r1, r2, #8
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68d2      	ldr	r2, [r2, #12]
 80053e4:	06d2      	lsls	r2, r2, #27
 80053e6:	430a      	orrs	r2, r1
 80053e8:	492a      	ldr	r1, [pc, #168]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	610b      	str	r3, [r1, #16]
 80053ee:	e027      	b.n	8005440 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d112      	bne.n	800541c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053f6:	4b27      	ldr	r3, [pc, #156]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80053fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6892      	ldr	r2, [r2, #8]
 8005406:	0211      	lsls	r1, r2, #8
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6912      	ldr	r2, [r2, #16]
 800540c:	0852      	lsrs	r2, r2, #1
 800540e:	3a01      	subs	r2, #1
 8005410:	0552      	lsls	r2, r2, #21
 8005412:	430a      	orrs	r2, r1
 8005414:	491f      	ldr	r1, [pc, #124]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005416:	4313      	orrs	r3, r2
 8005418:	610b      	str	r3, [r1, #16]
 800541a:	e011      	b.n	8005440 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800541c:	4b1d      	ldr	r3, [pc, #116]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005424:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6892      	ldr	r2, [r2, #8]
 800542c:	0211      	lsls	r1, r2, #8
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6952      	ldr	r2, [r2, #20]
 8005432:	0852      	lsrs	r2, r2, #1
 8005434:	3a01      	subs	r2, #1
 8005436:	0652      	lsls	r2, r2, #25
 8005438:	430a      	orrs	r2, r1
 800543a:	4916      	ldr	r1, [pc, #88]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 800543c:	4313      	orrs	r3, r2
 800543e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005440:	4b14      	ldr	r3, [pc, #80]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a13      	ldr	r2, [pc, #76]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005446:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800544a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544c:	f7fc ff24 	bl	8002298 <HAL_GetTick>
 8005450:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005452:	e009      	b.n	8005468 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005454:	f7fc ff20 	bl	8002298 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d902      	bls.n	8005468 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	73fb      	strb	r3, [r7, #15]
          break;
 8005466:	e005      	b.n	8005474 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0ef      	beq.n	8005454 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	4904      	ldr	r1, [pc, #16]	; (8005494 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005484:	4313      	orrs	r3, r2
 8005486:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40021000 	.word	0x40021000

08005498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e07c      	b.n	80055a4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d106      	bne.n	80054ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7fc f959 	bl	800177c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054ea:	d902      	bls.n	80054f2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e002      	b.n	80054f8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005500:	d007      	beq.n	8005512 <HAL_SPI_Init+0x7a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800550a:	d002      	beq.n	8005512 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10b      	bne.n	8005532 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005522:	d903      	bls.n	800552c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	631a      	str	r2, [r3, #48]	; 0x30
 800552a:	e002      	b.n	8005532 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	ea42 0103 	orr.w	r1, r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	0c1b      	lsrs	r3, r3, #16
 8005572:	f003 0204 	and.w	r2, r3, #4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	ea42 0103 	orr.w	r1, r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	430a      	orrs	r2, r1
 8005592:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_SPI_Transmit+0x22>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e150      	b.n	8005870 <HAL_SPI_Transmit+0x2c4>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055d6:	f7fc fe5f 	bl	8002298 <HAL_GetTick>
 80055da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055dc:	88fb      	ldrh	r3, [r7, #6]
 80055de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d002      	beq.n	80055f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055ec:	2302      	movs	r3, #2
 80055ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055f0:	e135      	b.n	800585e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <HAL_SPI_Transmit+0x52>
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005602:	e12c      	b.n	800585e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2203      	movs	r2, #3
 8005608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	88fa      	ldrh	r2, [r7, #6]
 800561c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	88fa      	ldrh	r2, [r7, #6]
 8005622:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564e:	d107      	bne.n	8005660 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800565e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b40      	cmp	r3, #64	; 0x40
 800566c:	d007      	beq.n	800567e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800567c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005686:	d94b      	bls.n	8005720 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_SPI_Transmit+0xea>
 8005690:	8afb      	ldrh	r3, [r7, #22]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d13e      	bne.n	8005714 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	881a      	ldrh	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	1c9a      	adds	r2, r3, #2
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056ba:	e02b      	b.n	8005714 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d112      	bne.n	80056f0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	881a      	ldrh	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	1c9a      	adds	r2, r3, #2
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056ee:	e011      	b.n	8005714 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056f0:	f7fc fdd2 	bl	8002298 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d803      	bhi.n	8005708 <HAL_SPI_Transmit+0x15c>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d102      	bne.n	800570e <HAL_SPI_Transmit+0x162>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d102      	bne.n	8005714 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005712:	e0a4      	b.n	800585e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1ce      	bne.n	80056bc <HAL_SPI_Transmit+0x110>
 800571e:	e07c      	b.n	800581a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_SPI_Transmit+0x182>
 8005728:	8afb      	ldrh	r3, [r7, #22]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d170      	bne.n	8005810 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d912      	bls.n	800575e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	881a      	ldrh	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	1c9a      	adds	r2, r3, #2
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005752:	b29b      	uxth	r3, r3
 8005754:	3b02      	subs	r3, #2
 8005756:	b29a      	uxth	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800575c:	e058      	b.n	8005810 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	330c      	adds	r3, #12
 8005768:	7812      	ldrb	r2, [r2, #0]
 800576a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005784:	e044      	b.n	8005810 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b02      	cmp	r3, #2
 8005792:	d12b      	bne.n	80057ec <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b01      	cmp	r3, #1
 800579c:	d912      	bls.n	80057c4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	881a      	ldrh	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	1c9a      	adds	r2, r3, #2
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b02      	subs	r3, #2
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057c2:	e025      	b.n	8005810 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	330c      	adds	r3, #12
 80057ce:	7812      	ldrb	r2, [r2, #0]
 80057d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057ea:	e011      	b.n	8005810 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ec:	f7fc fd54 	bl	8002298 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d803      	bhi.n	8005804 <HAL_SPI_Transmit+0x258>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005802:	d102      	bne.n	800580a <HAL_SPI_Transmit+0x25e>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800580e:	e026      	b.n	800585e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1b5      	bne.n	8005786 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	6839      	ldr	r1, [r7, #0]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fdb4 	bl	800638c <SPI_EndRxTxTransaction>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e000      	b.n	800585e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800585c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800586e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af02      	add	r7, sp, #8
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005894:	d112      	bne.n	80058bc <HAL_SPI_Receive+0x44>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10e      	bne.n	80058bc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2204      	movs	r2, #4
 80058a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058a6:	88fa      	ldrh	r2, [r7, #6]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	4613      	mov	r3, r2
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 f908 	bl	8005ac8 <HAL_SPI_TransmitReceive>
 80058b8:	4603      	mov	r3, r0
 80058ba:	e101      	b.n	8005ac0 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_SPI_Receive+0x52>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e0fa      	b.n	8005ac0 <HAL_SPI_Receive+0x248>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058d2:	f7fc fce1 	bl	8002298 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d002      	beq.n	80058ea <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80058e4:	2302      	movs	r3, #2
 80058e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058e8:	e0e1      	b.n	8005aae <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <HAL_SPI_Receive+0x7e>
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058fa:	e0d8      	b.n	8005aae <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2204      	movs	r2, #4
 8005900:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	88fa      	ldrh	r2, [r7, #6]
 8005914:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	88fa      	ldrh	r2, [r7, #6]
 800591c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005946:	d908      	bls.n	800595a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005956:	605a      	str	r2, [r3, #4]
 8005958:	e007      	b.n	800596a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005968:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005972:	d107      	bne.n	8005984 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005982:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598e:	2b40      	cmp	r3, #64	; 0x40
 8005990:	d007      	beq.n	80059a2 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059aa:	d867      	bhi.n	8005a7c <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80059ac:	e030      	b.n	8005a10 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d117      	bne.n	80059ec <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f103 020c 	add.w	r2, r3, #12
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	7812      	ldrb	r2, [r2, #0]
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80059ea:	e011      	b.n	8005a10 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ec:	f7fc fc54 	bl	8002298 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d803      	bhi.n	8005a04 <HAL_SPI_Receive+0x18c>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a02:	d102      	bne.n	8005a0a <HAL_SPI_Receive+0x192>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d102      	bne.n	8005a10 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a0e:	e04e      	b.n	8005aae <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1c8      	bne.n	80059ae <HAL_SPI_Receive+0x136>
 8005a1c:	e034      	b.n	8005a88 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d115      	bne.n	8005a58 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	b292      	uxth	r2, r2
 8005a38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	1c9a      	adds	r2, r3, #2
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005a56:	e011      	b.n	8005a7c <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a58:	f7fc fc1e 	bl	8002298 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d803      	bhi.n	8005a70 <HAL_SPI_Receive+0x1f8>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d102      	bne.n	8005a76 <HAL_SPI_Receive+0x1fe>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a7a:	e018      	b.n	8005aae <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1ca      	bne.n	8005a1e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 fc25 	bl	80062dc <SPI_EndRxTransaction>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
 8005aaa:	e000      	b.n	8005aae <HAL_SPI_Receive+0x236>
  }

error :
 8005aac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08a      	sub	sp, #40	; 0x28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_SPI_TransmitReceive+0x26>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e1fb      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x41e>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005af6:	f7fc fbcf 	bl	8002298 <HAL_GetTick>
 8005afa:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b02:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005b0a:	887b      	ldrh	r3, [r7, #2]
 8005b0c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005b0e:	887b      	ldrh	r3, [r7, #2]
 8005b10:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b12:	7efb      	ldrb	r3, [r7, #27]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d00e      	beq.n	8005b36 <HAL_SPI_TransmitReceive+0x6e>
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b1e:	d106      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d102      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x66>
 8005b28:	7efb      	ldrb	r3, [r7, #27]
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d003      	beq.n	8005b36 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005b34:	e1cd      	b.n	8005ed2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_SPI_TransmitReceive+0x80>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_SPI_TransmitReceive+0x80>
 8005b42:	887b      	ldrh	r3, [r7, #2]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d103      	bne.n	8005b50 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005b4e:	e1c0      	b.n	8005ed2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d003      	beq.n	8005b64 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2205      	movs	r2, #5
 8005b60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	887a      	ldrh	r2, [r7, #2]
 8005b74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	887a      	ldrh	r2, [r7, #2]
 8005b7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	887a      	ldrh	r2, [r7, #2]
 8005b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	887a      	ldrh	r2, [r7, #2]
 8005b90:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ba6:	d802      	bhi.n	8005bae <HAL_SPI_TransmitReceive+0xe6>
 8005ba8:	8a3b      	ldrh	r3, [r7, #16]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d908      	bls.n	8005bc0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	e007      	b.n	8005bd0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bda:	2b40      	cmp	r3, #64	; 0x40
 8005bdc:	d007      	beq.n	8005bee <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bf6:	d97c      	bls.n	8005cf2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_SPI_TransmitReceive+0x13e>
 8005c00:	8a7b      	ldrh	r3, [r7, #18]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d169      	bne.n	8005cda <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	881a      	ldrh	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	1c9a      	adds	r2, r3, #2
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c2a:	e056      	b.n	8005cda <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d11b      	bne.n	8005c72 <HAL_SPI_TransmitReceive+0x1aa>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d016      	beq.n	8005c72 <HAL_SPI_TransmitReceive+0x1aa>
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d113      	bne.n	8005c72 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	881a      	ldrh	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	1c9a      	adds	r2, r3, #2
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d11c      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x1f2>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d016      	beq.n	8005cba <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	b292      	uxth	r2, r2
 8005c98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	1c9a      	adds	r2, r3, #2
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005cba:	f7fc faed 	bl	8002298 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d807      	bhi.n	8005cda <HAL_SPI_TransmitReceive+0x212>
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d003      	beq.n	8005cda <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005cd8:	e0fb      	b.n	8005ed2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1a3      	bne.n	8005c2c <HAL_SPI_TransmitReceive+0x164>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d19d      	bne.n	8005c2c <HAL_SPI_TransmitReceive+0x164>
 8005cf0:	e0df      	b.n	8005eb2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_SPI_TransmitReceive+0x23a>
 8005cfa:	8a7b      	ldrh	r3, [r7, #18]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	f040 80cb 	bne.w	8005e98 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d912      	bls.n	8005d32 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	881a      	ldrh	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	1c9a      	adds	r2, r3, #2
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b02      	subs	r3, #2
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d30:	e0b2      	b.n	8005e98 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	330c      	adds	r3, #12
 8005d3c:	7812      	ldrb	r2, [r2, #0]
 8005d3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d58:	e09e      	b.n	8005e98 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d134      	bne.n	8005dd2 <HAL_SPI_TransmitReceive+0x30a>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d02f      	beq.n	8005dd2 <HAL_SPI_TransmitReceive+0x30a>
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d12c      	bne.n	8005dd2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d912      	bls.n	8005da8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	881a      	ldrh	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	1c9a      	adds	r2, r3, #2
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b02      	subs	r3, #2
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005da6:	e012      	b.n	8005dce <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	7812      	ldrb	r2, [r2, #0]
 8005db4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d148      	bne.n	8005e72 <HAL_SPI_TransmitReceive+0x3aa>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d042      	beq.n	8005e72 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d923      	bls.n	8005e40 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	b292      	uxth	r2, r2
 8005e04:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	1c9a      	adds	r2, r3, #2
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b02      	subs	r3, #2
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d81f      	bhi.n	8005e6e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e3c:	605a      	str	r2, [r3, #4]
 8005e3e:	e016      	b.n	8005e6e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f103 020c 	add.w	r2, r3, #12
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	7812      	ldrb	r2, [r2, #0]
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e72:	f7fc fa11 	bl	8002298 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d803      	bhi.n	8005e8a <HAL_SPI_TransmitReceive+0x3c2>
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d102      	bne.n	8005e90 <HAL_SPI_TransmitReceive+0x3c8>
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d103      	bne.n	8005e98 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005e96:	e01c      	b.n	8005ed2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f47f af5b 	bne.w	8005d5a <HAL_SPI_TransmitReceive+0x292>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f47f af54 	bne.w	8005d5a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 fa68 	bl	800638c <SPI_EndRxTxTransaction>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d006      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	661a      	str	r2, [r3, #96]	; 0x60
 8005ece:	e000      	b.n	8005ed2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005ed0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ee2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3728      	adds	r7, #40	; 0x28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	099b      	lsrs	r3, r3, #6
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10f      	bne.n	8005f34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	099b      	lsrs	r3, r3, #6
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d004      	beq.n	8005f34 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
    return;
 8005f32:	e0d8      	b.n	80060e6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	085b      	lsrs	r3, r3, #1
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <HAL_SPI_IRQHandler+0x66>
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	09db      	lsrs	r3, r3, #7
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d004      	beq.n	8005f56 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
    return;
 8005f54:	e0c7      	b.n	80060e6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10c      	bne.n	8005f7c <HAL_SPI_IRQHandler+0x8c>
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	099b      	lsrs	r3, r3, #6
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <HAL_SPI_IRQHandler+0x8c>
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 80b5 	beq.w	80060e6 <HAL_SPI_IRQHandler+0x1f6>
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 80ae 	beq.w	80060e6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	099b      	lsrs	r3, r3, #6
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d023      	beq.n	8005fde <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d011      	beq.n	8005fc6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa6:	f043 0204 	orr.w	r2, r3, #4
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fae:	2300      	movs	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	e00b      	b.n	8005fde <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	613b      	str	r3, [r7, #16]
 8005fda:	693b      	ldr	r3, [r7, #16]
        return;
 8005fdc:	e083      	b.n	80060e6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d014      	beq.n	8006014 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fee:	f043 0201 	orr.w	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	0a1b      	lsrs	r3, r3, #8
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00c      	beq.n	800603a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006024:	f043 0208 	orr.w	r2, r3, #8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800602c:	2300      	movs	r3, #0
 800602e:	60bb      	str	r3, [r7, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	60bb      	str	r3, [r7, #8]
 8006038:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800603e:	2b00      	cmp	r3, #0
 8006040:	d050      	beq.n	80060e4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006050:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <HAL_SPI_IRQHandler+0x17e>
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d034      	beq.n	80060d8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0203 	bic.w	r2, r2, #3
 800607c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006082:	2b00      	cmp	r3, #0
 8006084:	d011      	beq.n	80060aa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608a:	4a18      	ldr	r2, [pc, #96]	; (80060ec <HAL_SPI_IRQHandler+0x1fc>)
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006092:	4618      	mov	r0, r3
 8006094:	f7fc fa10 	bl	80024b8 <HAL_DMA_Abort_IT>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d016      	beq.n	80060e0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b6:	4a0d      	ldr	r2, [pc, #52]	; (80060ec <HAL_SPI_IRQHandler+0x1fc>)
 80060b8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fc f9fa 	bl	80024b8 <HAL_DMA_Abort_IT>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80060d6:	e003      	b.n	80060e0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f809 	bl	80060f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80060de:	e000      	b.n	80060e2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80060e0:	bf00      	nop
    return;
 80060e2:	bf00      	nop
 80060e4:	bf00      	nop
  }
}
 80060e6:	3720      	adds	r7, #32
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	08006105 	.word	0x08006105

080060f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff ffe5 	bl	80060f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006126:	bf00      	nop
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	603b      	str	r3, [r7, #0]
 800613a:	4613      	mov	r3, r2
 800613c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800613e:	e04c      	b.n	80061da <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006146:	d048      	beq.n	80061da <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006148:	f7fc f8a6 	bl	8002298 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d902      	bls.n	800615e <SPI_WaitFlagStateUntilTimeout+0x30>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d13d      	bne.n	80061da <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800616c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006176:	d111      	bne.n	800619c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006180:	d004      	beq.n	800618c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618a:	d107      	bne.n	800619c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800619a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a4:	d10f      	bne.n	80061c6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e00f      	b.n	80061fa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4013      	ands	r3, r2
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	bf0c      	ite	eq
 80061ea:	2301      	moveq	r3, #1
 80061ec:	2300      	movne	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	79fb      	ldrb	r3, [r7, #7]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d1a3      	bne.n	8006140 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
 800620e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006210:	e057      	b.n	80062c2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006218:	d106      	bne.n	8006228 <SPI_WaitFifoStateUntilTimeout+0x26>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d048      	beq.n	80062c2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006230:	f7fc f832 	bl	8002298 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d902      	bls.n	8006246 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d13d      	bne.n	80062c2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006254:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800625e:	d111      	bne.n	8006284 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006268:	d004      	beq.n	8006274 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006272:	d107      	bne.n	8006284 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006282:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628c:	d10f      	bne.n	80062ae <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e008      	b.n	80062d4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4013      	ands	r3, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d19f      	bne.n	8006212 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f0:	d111      	bne.n	8006316 <SPI_EndRxTransaction+0x3a>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062fa:	d004      	beq.n	8006306 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006304:	d107      	bne.n	8006316 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006314:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2200      	movs	r2, #0
 800631e:	2180      	movs	r1, #128	; 0x80
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff ff04 	bl	800612e <SPI_WaitFlagStateUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d007      	beq.n	800633c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006330:	f043 0220 	orr.w	r2, r3, #32
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e023      	b.n	8006384 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006344:	d11d      	bne.n	8006382 <SPI_EndRxTransaction+0xa6>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634e:	d004      	beq.n	800635a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006358:	d113      	bne.n	8006382 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2200      	movs	r2, #0
 8006362:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff ff4b 	bl	8006202 <SPI_WaitFifoStateUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006376:	f043 0220 	orr.w	r2, r3, #32
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e000      	b.n	8006384 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2200      	movs	r2, #0
 80063a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff ff2c 	bl	8006202 <SPI_WaitFifoStateUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d007      	beq.n	80063c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b4:	f043 0220 	orr.w	r2, r3, #32
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e027      	b.n	8006410 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2200      	movs	r2, #0
 80063c8:	2180      	movs	r1, #128	; 0x80
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7ff feaf 	bl	800612e <SPI_WaitFlagStateUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063da:	f043 0220 	orr.w	r2, r3, #32
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e014      	b.n	8006410 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff ff05 	bl	8006202 <SPI_WaitFifoStateUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006402:	f043 0220 	orr.w	r2, r3, #32
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e000      	b.n	8006410 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e01d      	b.n	8006466 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f815 	bl	800646e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f000 f986 	bl	8006768 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <HAL_TIM_Base_Start_IT+0x50>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b06      	cmp	r3, #6
 80064ac:	d00b      	beq.n	80064c6 <HAL_TIM_Base_Start_IT+0x42>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b4:	d007      	beq.n	80064c6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0201 	orr.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	00010007 	.word	0x00010007

080064d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d122      	bne.n	8006534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d11b      	bne.n	8006534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0202 	mvn.w	r2, #2
 8006504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f905 	bl	800672a <HAL_TIM_IC_CaptureCallback>
 8006520:	e005      	b.n	800652e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f8f7 	bl	8006716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f908 	bl	800673e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0304 	and.w	r3, r3, #4
 800653e:	2b04      	cmp	r3, #4
 8006540:	d122      	bne.n	8006588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b04      	cmp	r3, #4
 800654e:	d11b      	bne.n	8006588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0204 	mvn.w	r2, #4
 8006558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2202      	movs	r2, #2
 800655e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f8db 	bl	800672a <HAL_TIM_IC_CaptureCallback>
 8006574:	e005      	b.n	8006582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f8cd 	bl	8006716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f8de 	bl	800673e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b08      	cmp	r3, #8
 8006594:	d122      	bne.n	80065dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d11b      	bne.n	80065dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f06f 0208 	mvn.w	r2, #8
 80065ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2204      	movs	r2, #4
 80065b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f8b1 	bl	800672a <HAL_TIM_IC_CaptureCallback>
 80065c8:	e005      	b.n	80065d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f8a3 	bl	8006716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f8b4 	bl	800673e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f003 0310 	and.w	r3, r3, #16
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d122      	bne.n	8006630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b10      	cmp	r3, #16
 80065f6:	d11b      	bne.n	8006630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f06f 0210 	mvn.w	r2, #16
 8006600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2208      	movs	r2, #8
 8006606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f887 	bl	800672a <HAL_TIM_IC_CaptureCallback>
 800661c:	e005      	b.n	800662a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f879 	bl	8006716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f88a 	bl	800673e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b01      	cmp	r3, #1
 800663c:	d10e      	bne.n	800665c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b01      	cmp	r3, #1
 800664a:	d107      	bne.n	800665c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0201 	mvn.w	r2, #1
 8006654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fb f80a 	bl	8001670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006666:	2b80      	cmp	r3, #128	; 0x80
 8006668:	d10e      	bne.n	8006688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006674:	2b80      	cmp	r3, #128	; 0x80
 8006676:	d107      	bne.n	8006688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8de 	bl	8006844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006696:	d10e      	bne.n	80066b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a2:	2b80      	cmp	r3, #128	; 0x80
 80066a4:	d107      	bne.n	80066b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f8d1 	bl	8006858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c0:	2b40      	cmp	r3, #64	; 0x40
 80066c2:	d10e      	bne.n	80066e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ce:	2b40      	cmp	r3, #64	; 0x40
 80066d0:	d107      	bne.n	80066e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f838 	bl	8006752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	f003 0320 	and.w	r3, r3, #32
 80066ec:	2b20      	cmp	r3, #32
 80066ee:	d10e      	bne.n	800670e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f003 0320 	and.w	r3, r3, #32
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d107      	bne.n	800670e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f06f 0220 	mvn.w	r2, #32
 8006706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f891 	bl	8006830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
	...

08006768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a2a      	ldr	r2, [pc, #168]	; (8006824 <TIM_Base_SetConfig+0xbc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_Base_SetConfig+0x20>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006786:	d108      	bne.n	800679a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a21      	ldr	r2, [pc, #132]	; (8006824 <TIM_Base_SetConfig+0xbc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00b      	beq.n	80067ba <TIM_Base_SetConfig+0x52>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a8:	d007      	beq.n	80067ba <TIM_Base_SetConfig+0x52>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <TIM_Base_SetConfig+0xc0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d003      	beq.n	80067ba <TIM_Base_SetConfig+0x52>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1d      	ldr	r2, [pc, #116]	; (800682c <TIM_Base_SetConfig+0xc4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d108      	bne.n	80067cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a0c      	ldr	r2, [pc, #48]	; (8006824 <TIM_Base_SetConfig+0xbc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d007      	beq.n	8006808 <TIM_Base_SetConfig+0xa0>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0b      	ldr	r2, [pc, #44]	; (8006828 <TIM_Base_SetConfig+0xc0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_Base_SetConfig+0xa0>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a0a      	ldr	r2, [pc, #40]	; (800682c <TIM_Base_SetConfig+0xc4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d103      	bne.n	8006810 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	615a      	str	r2, [r3, #20]
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40014000 	.word	0x40014000
 800682c:	40014400 	.word	0x40014400

08006830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800686c:	b084      	sub	sp, #16
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	f107 0014 	add.w	r0, r7, #20
 800687a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	b004      	add	sp, #16
 800688c:	4770      	bx	lr

0800688e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800688e:	b480      	push	{r7}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006896:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800689a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	4313      	orrs	r3, r2
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80068c8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80068cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	43db      	mvns	r3, r3
 80068dc:	b29b      	uxth	r3, r3
 80068de:	4013      	ands	r3, r2
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	460b      	mov	r3, r1
 8006900:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006910:	b084      	sub	sp, #16
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	f107 0014 	add.w	r0, r7, #20
 800691e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff ffa3 	bl	800688e <USB_EnableGlobalInt>

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006954:	b004      	add	sp, #16
 8006956:	4770      	bx	lr

08006958 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006958:	b490      	push	{r4, r7}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	78db      	ldrb	r3, [r3, #3]
 8006982:	2b03      	cmp	r3, #3
 8006984:	d819      	bhi.n	80069ba <USB_ActivateEndpoint+0x62>
 8006986:	a201      	add	r2, pc, #4	; (adr r2, 800698c <USB_ActivateEndpoint+0x34>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	0800699d 	.word	0x0800699d
 8006990:	080069b1 	.word	0x080069b1
 8006994:	080069c1 	.word	0x080069c1
 8006998:	080069a7 	.word	0x080069a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800699c:	89bb      	ldrh	r3, [r7, #12]
 800699e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069a2:	81bb      	strh	r3, [r7, #12]
      break;
 80069a4:	e00d      	b.n	80069c2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80069a6:	89bb      	ldrh	r3, [r7, #12]
 80069a8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80069ac:	81bb      	strh	r3, [r7, #12]
      break;
 80069ae:	e008      	b.n	80069c2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80069b0:	89bb      	ldrh	r3, [r7, #12]
 80069b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069b6:	81bb      	strh	r3, [r7, #12]
      break;
 80069b8:	e003      	b.n	80069c2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	73fb      	strb	r3, [r7, #15]
      break;
 80069be:	e000      	b.n	80069c2 <USB_ActivateEndpoint+0x6a>
      break;
 80069c0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	441a      	add	r2, r3
 80069cc:	89bb      	ldrh	r3, [r7, #12]
 80069ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069de:	b29b      	uxth	r3, r3
 80069e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	b21b      	sxth	r3, r3
 80069f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fa:	b21a      	sxth	r2, r3
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	b21b      	sxth	r3, r3
 8006a02:	4313      	orrs	r3, r2
 8006a04:	b21b      	sxth	r3, r3
 8006a06:	b29c      	uxth	r4, r3
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	441a      	add	r2, r3
 8006a12:	4b8a      	ldr	r3, [pc, #552]	; (8006c3c <USB_ActivateEndpoint+0x2e4>)
 8006a14:	4323      	orrs	r3, r4
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	7b1b      	ldrb	r3, [r3, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f040 8112 	bne.w	8006c48 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	785b      	ldrb	r3, [r3, #1]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d067      	beq.n	8006afc <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a2c:	687c      	ldr	r4, [r7, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	441c      	add	r4, r3
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	4423      	add	r3, r4
 8006a40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a44:	461c      	mov	r4, r3
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	88db      	ldrh	r3, [r3, #6]
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29c      	uxth	r4, r3
 8006a62:	4623      	mov	r3, r4
 8006a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d014      	beq.n	8006a96 <USB_ActivateEndpoint+0x13e>
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a82:	b29c      	uxth	r4, r3
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	4b6c      	ldr	r3, [pc, #432]	; (8006c40 <USB_ActivateEndpoint+0x2e8>)
 8006a90:	4323      	orrs	r3, r4
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	78db      	ldrb	r3, [r3, #3]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d018      	beq.n	8006ad0 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab4:	b29c      	uxth	r4, r3
 8006ab6:	f084 0320 	eor.w	r3, r4, #32
 8006aba:	b29c      	uxth	r4, r3
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	441a      	add	r2, r3
 8006ac6:	4b5d      	ldr	r3, [pc, #372]	; (8006c3c <USB_ActivateEndpoint+0x2e4>)
 8006ac8:	4323      	orrs	r3, r4
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	8013      	strh	r3, [r2, #0]
 8006ace:	e22b      	b.n	8006f28 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae6:	b29c      	uxth	r4, r3
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	441a      	add	r2, r3
 8006af2:	4b52      	ldr	r3, [pc, #328]	; (8006c3c <USB_ActivateEndpoint+0x2e4>)
 8006af4:	4323      	orrs	r3, r4
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	8013      	strh	r3, [r2, #0]
 8006afa:	e215      	b.n	8006f28 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006afc:	687c      	ldr	r4, [r7, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	441c      	add	r4, r3
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4423      	add	r3, r4
 8006b10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b14:	461c      	mov	r4, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	88db      	ldrh	r3, [r3, #6]
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006b24:	687c      	ldr	r4, [r7, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	441c      	add	r4, r3
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	00db      	lsls	r3, r3, #3
 8006b36:	4423      	add	r3, r4
 8006b38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b3c:	461c      	mov	r4, r3
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10e      	bne.n	8006b64 <USB_ActivateEndpoint+0x20c>
 8006b46:	8823      	ldrh	r3, [r4, #0]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	8023      	strh	r3, [r4, #0]
 8006b52:	8823      	ldrh	r3, [r4, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	8023      	strh	r3, [r4, #0]
 8006b62:	e02d      	b.n	8006bc0 <USB_ActivateEndpoint+0x268>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	2b3e      	cmp	r3, #62	; 0x3e
 8006b6a:	d812      	bhi.n	8006b92 <USB_ActivateEndpoint+0x23a>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	085b      	lsrs	r3, r3, #1
 8006b72:	60bb      	str	r3, [r7, #8]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <USB_ActivateEndpoint+0x22e>
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	3301      	adds	r3, #1
 8006b84:	60bb      	str	r3, [r7, #8]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	029b      	lsls	r3, r3, #10
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	8023      	strh	r3, [r4, #0]
 8006b90:	e016      	b.n	8006bc0 <USB_ActivateEndpoint+0x268>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	095b      	lsrs	r3, r3, #5
 8006b98:	60bb      	str	r3, [r7, #8]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 031f 	and.w	r3, r3, #31
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <USB_ActivateEndpoint+0x254>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	60bb      	str	r3, [r7, #8]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	029b      	lsls	r3, r3, #10
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29c      	uxth	r4, r3
 8006bce:	4623      	mov	r3, r4
 8006bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d014      	beq.n	8006c02 <USB_ActivateEndpoint+0x2aa>
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bee:	b29c      	uxth	r4, r3
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	441a      	add	r2, r3
 8006bfa:	4b12      	ldr	r3, [pc, #72]	; (8006c44 <USB_ActivateEndpoint+0x2ec>)
 8006bfc:	4323      	orrs	r3, r4
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c18:	b29c      	uxth	r4, r3
 8006c1a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006c1e:	b29c      	uxth	r4, r3
 8006c20:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006c24:	b29c      	uxth	r4, r3
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	441a      	add	r2, r3
 8006c30:	4b02      	ldr	r3, [pc, #8]	; (8006c3c <USB_ActivateEndpoint+0x2e4>)
 8006c32:	4323      	orrs	r3, r4
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	8013      	strh	r3, [r2, #0]
 8006c38:	e176      	b.n	8006f28 <USB_ActivateEndpoint+0x5d0>
 8006c3a:	bf00      	nop
 8006c3c:	ffff8080 	.word	0xffff8080
 8006c40:	ffff80c0 	.word	0xffff80c0
 8006c44:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5e:	b29c      	uxth	r4, r3
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	441a      	add	r2, r3
 8006c6a:	4b96      	ldr	r3, [pc, #600]	; (8006ec4 <USB_ActivateEndpoint+0x56c>)
 8006c6c:	4323      	orrs	r3, r4
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006c72:	687c      	ldr	r4, [r7, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	441c      	add	r4, r3
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	4423      	add	r3, r4
 8006c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c8a:	461c      	mov	r4, r3
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	891b      	ldrh	r3, [r3, #8]
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	8023      	strh	r3, [r4, #0]
 8006c9a:	687c      	ldr	r4, [r7, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	441c      	add	r4, r3
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	4423      	add	r3, r4
 8006cae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cb2:	461c      	mov	r4, r3
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	895b      	ldrh	r3, [r3, #10]
 8006cb8:	085b      	lsrs	r3, r3, #1
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f040 8088 	bne.w	8006ddc <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	b29c      	uxth	r4, r3
 8006cda:	4623      	mov	r3, r4
 8006cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d014      	beq.n	8006d0e <USB_ActivateEndpoint+0x3b6>
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfa:	b29c      	uxth	r4, r3
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	441a      	add	r2, r3
 8006d06:	4b70      	ldr	r3, [pc, #448]	; (8006ec8 <USB_ActivateEndpoint+0x570>)
 8006d08:	4323      	orrs	r3, r4
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29c      	uxth	r4, r3
 8006d1c:	4623      	mov	r3, r4
 8006d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d014      	beq.n	8006d50 <USB_ActivateEndpoint+0x3f8>
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3c:	b29c      	uxth	r4, r3
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	441a      	add	r2, r3
 8006d48:	4b60      	ldr	r3, [pc, #384]	; (8006ecc <USB_ActivateEndpoint+0x574>)
 8006d4a:	4323      	orrs	r3, r4
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d66:	b29c      	uxth	r4, r3
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	441a      	add	r2, r3
 8006d72:	4b56      	ldr	r3, [pc, #344]	; (8006ecc <USB_ActivateEndpoint+0x574>)
 8006d74:	4323      	orrs	r3, r4
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d90:	b29c      	uxth	r4, r3
 8006d92:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006d96:	b29c      	uxth	r4, r3
 8006d98:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006d9c:	b29c      	uxth	r4, r3
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	441a      	add	r2, r3
 8006da8:	4b49      	ldr	r3, [pc, #292]	; (8006ed0 <USB_ActivateEndpoint+0x578>)
 8006daa:	4323      	orrs	r3, r4
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc6:	b29c      	uxth	r4, r3
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	441a      	add	r2, r3
 8006dd2:	4b3f      	ldr	r3, [pc, #252]	; (8006ed0 <USB_ActivateEndpoint+0x578>)
 8006dd4:	4323      	orrs	r3, r4
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	8013      	strh	r3, [r2, #0]
 8006dda:	e0a5      	b.n	8006f28 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	b29c      	uxth	r4, r3
 8006dea:	4623      	mov	r3, r4
 8006dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d014      	beq.n	8006e1e <USB_ActivateEndpoint+0x4c6>
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0a:	b29c      	uxth	r4, r3
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	441a      	add	r2, r3
 8006e16:	4b2c      	ldr	r3, [pc, #176]	; (8006ec8 <USB_ActivateEndpoint+0x570>)
 8006e18:	4323      	orrs	r3, r4
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b29c      	uxth	r4, r3
 8006e2c:	4623      	mov	r3, r4
 8006e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d014      	beq.n	8006e60 <USB_ActivateEndpoint+0x508>
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4c:	b29c      	uxth	r4, r3
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	441a      	add	r2, r3
 8006e58:	4b1c      	ldr	r3, [pc, #112]	; (8006ecc <USB_ActivateEndpoint+0x574>)
 8006e5a:	4323      	orrs	r3, r4
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e76:	b29c      	uxth	r4, r3
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	441a      	add	r2, r3
 8006e82:	4b11      	ldr	r3, [pc, #68]	; (8006ec8 <USB_ActivateEndpoint+0x570>)
 8006e84:	4323      	orrs	r3, r4
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	78db      	ldrb	r3, [r3, #3]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d020      	beq.n	8006ed4 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea8:	b29c      	uxth	r4, r3
 8006eaa:	f084 0320 	eor.w	r3, r4, #32
 8006eae:	b29c      	uxth	r4, r3
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	441a      	add	r2, r3
 8006eba:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <USB_ActivateEndpoint+0x578>)
 8006ebc:	4323      	orrs	r3, r4
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	8013      	strh	r3, [r2, #0]
 8006ec2:	e01c      	b.n	8006efe <USB_ActivateEndpoint+0x5a6>
 8006ec4:	ffff8180 	.word	0xffff8180
 8006ec8:	ffffc080 	.word	0xffffc080
 8006ecc:	ffff80c0 	.word	0xffff80c0
 8006ed0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eea:	b29c      	uxth	r4, r3
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	441a      	add	r2, r3
 8006ef6:	4b0f      	ldr	r3, [pc, #60]	; (8006f34 <USB_ActivateEndpoint+0x5dc>)
 8006ef8:	4323      	orrs	r3, r4
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f14:	b29c      	uxth	r4, r3
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	441a      	add	r2, r3
 8006f20:	4b04      	ldr	r3, [pc, #16]	; (8006f34 <USB_ActivateEndpoint+0x5dc>)
 8006f22:	4323      	orrs	r3, r4
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bc90      	pop	{r4, r7}
 8006f32:	4770      	bx	lr
 8006f34:	ffff8080 	.word	0xffff8080

08006f38 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f38:	b490      	push	{r4, r7}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	7b1b      	ldrb	r3, [r3, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d171      	bne.n	800702e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	785b      	ldrb	r3, [r3, #1]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d036      	beq.n	8006fc0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	b29c      	uxth	r4, r3
 8006f60:	4623      	mov	r3, r4
 8006f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d014      	beq.n	8006f94 <USB_DeactivateEndpoint+0x5c>
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f80:	b29c      	uxth	r4, r3
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	441a      	add	r2, r3
 8006f8c:	4b6b      	ldr	r3, [pc, #428]	; (800713c <USB_DeactivateEndpoint+0x204>)
 8006f8e:	4323      	orrs	r3, r4
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006faa:	b29c      	uxth	r4, r3
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	441a      	add	r2, r3
 8006fb6:	4b62      	ldr	r3, [pc, #392]	; (8007140 <USB_DeactivateEndpoint+0x208>)
 8006fb8:	4323      	orrs	r3, r4
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8013      	strh	r3, [r2, #0]
 8006fbe:	e144      	b.n	800724a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29c      	uxth	r4, r3
 8006fce:	4623      	mov	r3, r4
 8006fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d014      	beq.n	8007002 <USB_DeactivateEndpoint+0xca>
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	b29c      	uxth	r4, r3
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	441a      	add	r2, r3
 8006ffa:	4b52      	ldr	r3, [pc, #328]	; (8007144 <USB_DeactivateEndpoint+0x20c>)
 8006ffc:	4323      	orrs	r3, r4
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007018:	b29c      	uxth	r4, r3
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	441a      	add	r2, r3
 8007024:	4b46      	ldr	r3, [pc, #280]	; (8007140 <USB_DeactivateEndpoint+0x208>)
 8007026:	4323      	orrs	r3, r4
 8007028:	b29b      	uxth	r3, r3
 800702a:	8013      	strh	r3, [r2, #0]
 800702c:	e10d      	b.n	800724a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	785b      	ldrb	r3, [r3, #1]
 8007032:	2b00      	cmp	r3, #0
 8007034:	f040 8088 	bne.w	8007148 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29c      	uxth	r4, r3
 8007046:	4623      	mov	r3, r4
 8007048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d014      	beq.n	800707a <USB_DeactivateEndpoint+0x142>
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	b29b      	uxth	r3, r3
 800705e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007066:	b29c      	uxth	r4, r3
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	441a      	add	r2, r3
 8007072:	4b34      	ldr	r3, [pc, #208]	; (8007144 <USB_DeactivateEndpoint+0x20c>)
 8007074:	4323      	orrs	r3, r4
 8007076:	b29b      	uxth	r3, r3
 8007078:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29c      	uxth	r4, r3
 8007088:	4623      	mov	r3, r4
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d014      	beq.n	80070bc <USB_DeactivateEndpoint+0x184>
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a8:	b29c      	uxth	r4, r3
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	441a      	add	r2, r3
 80070b4:	4b21      	ldr	r3, [pc, #132]	; (800713c <USB_DeactivateEndpoint+0x204>)
 80070b6:	4323      	orrs	r3, r4
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d2:	b29c      	uxth	r4, r3
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	441a      	add	r2, r3
 80070de:	4b17      	ldr	r3, [pc, #92]	; (800713c <USB_DeactivateEndpoint+0x204>)
 80070e0:	4323      	orrs	r3, r4
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fc:	b29c      	uxth	r4, r3
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	441a      	add	r2, r3
 8007108:	4b0d      	ldr	r3, [pc, #52]	; (8007140 <USB_DeactivateEndpoint+0x208>)
 800710a:	4323      	orrs	r3, r4
 800710c:	b29b      	uxth	r3, r3
 800710e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	b29b      	uxth	r3, r3
 800711e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007126:	b29c      	uxth	r4, r3
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	441a      	add	r2, r3
 8007132:	4b03      	ldr	r3, [pc, #12]	; (8007140 <USB_DeactivateEndpoint+0x208>)
 8007134:	4323      	orrs	r3, r4
 8007136:	b29b      	uxth	r3, r3
 8007138:	8013      	strh	r3, [r2, #0]
 800713a:	e086      	b.n	800724a <USB_DeactivateEndpoint+0x312>
 800713c:	ffff80c0 	.word	0xffff80c0
 8007140:	ffff8080 	.word	0xffff8080
 8007144:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	b29c      	uxth	r4, r3
 8007156:	4623      	mov	r3, r4
 8007158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d014      	beq.n	800718a <USB_DeactivateEndpoint+0x252>
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	b29b      	uxth	r3, r3
 800716e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007176:	b29c      	uxth	r4, r3
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	441a      	add	r2, r3
 8007182:	4b35      	ldr	r3, [pc, #212]	; (8007258 <USB_DeactivateEndpoint+0x320>)
 8007184:	4323      	orrs	r3, r4
 8007186:	b29b      	uxth	r3, r3
 8007188:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	b29c      	uxth	r4, r3
 8007198:	4623      	mov	r3, r4
 800719a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d014      	beq.n	80071cc <USB_DeactivateEndpoint+0x294>
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b8:	b29c      	uxth	r4, r3
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	441a      	add	r2, r3
 80071c4:	4b25      	ldr	r3, [pc, #148]	; (800725c <USB_DeactivateEndpoint+0x324>)
 80071c6:	4323      	orrs	r3, r4
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e2:	b29c      	uxth	r4, r3
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	441a      	add	r2, r3
 80071ee:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <USB_DeactivateEndpoint+0x320>)
 80071f0:	4323      	orrs	r3, r4
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	b29b      	uxth	r3, r3
 8007204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800720c:	b29c      	uxth	r4, r3
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	441a      	add	r2, r3
 8007218:	4b11      	ldr	r3, [pc, #68]	; (8007260 <USB_DeactivateEndpoint+0x328>)
 800721a:	4323      	orrs	r3, r4
 800721c:	b29b      	uxth	r3, r3
 800721e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007236:	b29c      	uxth	r4, r3
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	441a      	add	r2, r3
 8007242:	4b07      	ldr	r3, [pc, #28]	; (8007260 <USB_DeactivateEndpoint+0x328>)
 8007244:	4323      	orrs	r3, r4
 8007246:	b29b      	uxth	r3, r3
 8007248:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bc90      	pop	{r4, r7}
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	ffffc080 	.word	0xffffc080
 800725c:	ffff80c0 	.word	0xffff80c0
 8007260:	ffff8080 	.word	0xffff8080

08007264 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007264:	b590      	push	{r4, r7, lr}
 8007266:	b08d      	sub	sp, #52	; 0x34
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	785b      	ldrb	r3, [r3, #1]
 8007272:	2b01      	cmp	r3, #1
 8007274:	f040 8160 	bne.w	8007538 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	699a      	ldr	r2, [r3, #24]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	429a      	cmp	r2, r3
 8007282:	d909      	bls.n	8007298 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	699a      	ldr	r2, [r3, #24]
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	1ad2      	subs	r2, r2, r3
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	619a      	str	r2, [r3, #24]
 8007296:	e005      	b.n	80072a4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2200      	movs	r2, #0
 80072a2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	7b1b      	ldrb	r3, [r3, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d119      	bne.n	80072e0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	6959      	ldr	r1, [r3, #20]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	88da      	ldrh	r2, [r3, #6]
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fbbd 	bl	8007a38 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80072be:	687c      	ldr	r4, [r7, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	441c      	add	r4, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	4423      	add	r3, r4
 80072d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072d6:	461c      	mov	r4, r3
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	b29b      	uxth	r3, r3
 80072dc:	8023      	strh	r3, [r4, #0]
 80072de:	e10f      	b.n	8007500 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d065      	beq.n	80073c2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072f6:	687c      	ldr	r4, [r7, #4]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d148      	bne.n	8007392 <USB_EPStartXfer+0x12e>
 8007300:	687c      	ldr	r4, [r7, #4]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007308:	b29b      	uxth	r3, r3
 800730a:	441c      	add	r4, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	4423      	add	r3, r4
 8007314:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007318:	461c      	mov	r4, r3
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10e      	bne.n	800733e <USB_EPStartXfer+0xda>
 8007320:	8823      	ldrh	r3, [r4, #0]
 8007322:	b29b      	uxth	r3, r3
 8007324:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007328:	b29b      	uxth	r3, r3
 800732a:	8023      	strh	r3, [r4, #0]
 800732c:	8823      	ldrh	r3, [r4, #0]
 800732e:	b29b      	uxth	r3, r3
 8007330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007338:	b29b      	uxth	r3, r3
 800733a:	8023      	strh	r3, [r4, #0]
 800733c:	e03d      	b.n	80073ba <USB_EPStartXfer+0x156>
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	2b3e      	cmp	r3, #62	; 0x3e
 8007342:	d810      	bhi.n	8007366 <USB_EPStartXfer+0x102>
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	085b      	lsrs	r3, r3, #1
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <USB_EPStartXfer+0xf6>
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	3301      	adds	r3, #1
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	b29b      	uxth	r3, r3
 800735e:	029b      	lsls	r3, r3, #10
 8007360:	b29b      	uxth	r3, r3
 8007362:	8023      	strh	r3, [r4, #0]
 8007364:	e029      	b.n	80073ba <USB_EPStartXfer+0x156>
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	095b      	lsrs	r3, r3, #5
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
 800736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736e:	f003 031f 	and.w	r3, r3, #31
 8007372:	2b00      	cmp	r3, #0
 8007374:	d102      	bne.n	800737c <USB_EPStartXfer+0x118>
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	3b01      	subs	r3, #1
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	b29b      	uxth	r3, r3
 8007380:	029b      	lsls	r3, r3, #10
 8007382:	b29b      	uxth	r3, r3
 8007384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800738c:	b29b      	uxth	r3, r3
 800738e:	8023      	strh	r3, [r4, #0]
 8007390:	e013      	b.n	80073ba <USB_EPStartXfer+0x156>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d10f      	bne.n	80073ba <USB_EPStartXfer+0x156>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	441c      	add	r4, r3
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	4423      	add	r3, r4
 80073ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	895b      	ldrh	r3, [r3, #10]
 80073be:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80073c0:	e063      	b.n	800748a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d148      	bne.n	800745c <USB_EPStartXfer+0x1f8>
 80073ca:	687c      	ldr	r4, [r7, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	441c      	add	r4, r3
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	4423      	add	r3, r4
 80073de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073e2:	461c      	mov	r4, r3
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10e      	bne.n	8007408 <USB_EPStartXfer+0x1a4>
 80073ea:	8823      	ldrh	r3, [r4, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	8023      	strh	r3, [r4, #0]
 80073f6:	8823      	ldrh	r3, [r4, #0]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007402:	b29b      	uxth	r3, r3
 8007404:	8023      	strh	r3, [r4, #0]
 8007406:	e03d      	b.n	8007484 <USB_EPStartXfer+0x220>
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	2b3e      	cmp	r3, #62	; 0x3e
 800740c:	d810      	bhi.n	8007430 <USB_EPStartXfer+0x1cc>
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	085b      	lsrs	r3, r3, #1
 8007412:	623b      	str	r3, [r7, #32]
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <USB_EPStartXfer+0x1c0>
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	3301      	adds	r3, #1
 8007422:	623b      	str	r3, [r7, #32]
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	b29b      	uxth	r3, r3
 8007428:	029b      	lsls	r3, r3, #10
 800742a:	b29b      	uxth	r3, r3
 800742c:	8023      	strh	r3, [r4, #0]
 800742e:	e029      	b.n	8007484 <USB_EPStartXfer+0x220>
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	623b      	str	r3, [r7, #32]
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	2b00      	cmp	r3, #0
 800743e:	d102      	bne.n	8007446 <USB_EPStartXfer+0x1e2>
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	3b01      	subs	r3, #1
 8007444:	623b      	str	r3, [r7, #32]
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	b29b      	uxth	r3, r3
 800744a:	029b      	lsls	r3, r3, #10
 800744c:	b29b      	uxth	r3, r3
 800744e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007456:	b29b      	uxth	r3, r3
 8007458:	8023      	strh	r3, [r4, #0]
 800745a:	e013      	b.n	8007484 <USB_EPStartXfer+0x220>
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	785b      	ldrb	r3, [r3, #1]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d10f      	bne.n	8007484 <USB_EPStartXfer+0x220>
 8007464:	687c      	ldr	r4, [r7, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800746c:	b29b      	uxth	r3, r3
 800746e:	441c      	add	r4, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	4423      	add	r3, r4
 8007478:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800747c:	461c      	mov	r4, r3
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	b29b      	uxth	r3, r3
 8007482:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	891b      	ldrh	r3, [r3, #8]
 8007488:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	6959      	ldr	r1, [r3, #20]
 800748e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007490:	b29b      	uxth	r3, r3
 8007492:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 facf 	bl	8007a38 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	785b      	ldrb	r3, [r3, #1]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d115      	bne.n	80074ce <USB_EPStartXfer+0x26a>
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b8:	b29c      	uxth	r4, r3
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	441a      	add	r2, r3
 80074c4:	4b9a      	ldr	r3, [pc, #616]	; (8007730 <USB_EPStartXfer+0x4cc>)
 80074c6:	4323      	orrs	r3, r4
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	8013      	strh	r3, [r2, #0]
 80074cc:	e018      	b.n	8007500 <USB_EPStartXfer+0x29c>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	785b      	ldrb	r3, [r3, #1]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d114      	bne.n	8007500 <USB_EPStartXfer+0x29c>
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ec:	b29c      	uxth	r4, r3
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	441a      	add	r2, r3
 80074f8:	4b8e      	ldr	r3, [pc, #568]	; (8007734 <USB_EPStartXfer+0x4d0>)
 80074fa:	4323      	orrs	r3, r4
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007516:	b29c      	uxth	r4, r3
 8007518:	f084 0310 	eor.w	r3, r4, #16
 800751c:	b29c      	uxth	r4, r3
 800751e:	f084 0320 	eor.w	r3, r4, #32
 8007522:	b29c      	uxth	r4, r3
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	441a      	add	r2, r3
 800752e:	4b82      	ldr	r3, [pc, #520]	; (8007738 <USB_EPStartXfer+0x4d4>)
 8007530:	4323      	orrs	r3, r4
 8007532:	b29b      	uxth	r3, r3
 8007534:	8013      	strh	r3, [r2, #0]
 8007536:	e146      	b.n	80077c6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	699a      	ldr	r2, [r3, #24]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	429a      	cmp	r2, r3
 8007542:	d909      	bls.n	8007558 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007550:	1ad2      	subs	r2, r2, r3
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	619a      	str	r2, [r3, #24]
 8007556:	e005      	b.n	8007564 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2200      	movs	r2, #0
 8007562:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	7b1b      	ldrb	r3, [r3, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d148      	bne.n	80075fe <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800756c:	687c      	ldr	r4, [r7, #4]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007574:	b29b      	uxth	r3, r3
 8007576:	441c      	add	r4, r3
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	4423      	add	r3, r4
 8007580:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007584:	461c      	mov	r4, r3
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10e      	bne.n	80075aa <USB_EPStartXfer+0x346>
 800758c:	8823      	ldrh	r3, [r4, #0]
 800758e:	b29b      	uxth	r3, r3
 8007590:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007594:	b29b      	uxth	r3, r3
 8007596:	8023      	strh	r3, [r4, #0]
 8007598:	8823      	ldrh	r3, [r4, #0]
 800759a:	b29b      	uxth	r3, r3
 800759c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	8023      	strh	r3, [r4, #0]
 80075a8:	e0f2      	b.n	8007790 <USB_EPStartXfer+0x52c>
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	2b3e      	cmp	r3, #62	; 0x3e
 80075ae:	d810      	bhi.n	80075d2 <USB_EPStartXfer+0x36e>
 80075b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b2:	085b      	lsrs	r3, r3, #1
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <USB_EPStartXfer+0x362>
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	3301      	adds	r3, #1
 80075c4:	61fb      	str	r3, [r7, #28]
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	029b      	lsls	r3, r3, #10
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	8023      	strh	r3, [r4, #0]
 80075d0:	e0de      	b.n	8007790 <USB_EPStartXfer+0x52c>
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	61fb      	str	r3, [r7, #28]
 80075d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075da:	f003 031f 	and.w	r3, r3, #31
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d102      	bne.n	80075e8 <USB_EPStartXfer+0x384>
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	61fb      	str	r3, [r7, #28]
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	029b      	lsls	r3, r3, #10
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	8023      	strh	r3, [r4, #0]
 80075fc:	e0c8      	b.n	8007790 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d148      	bne.n	8007698 <USB_EPStartXfer+0x434>
 8007606:	687c      	ldr	r4, [r7, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760e:	b29b      	uxth	r3, r3
 8007610:	441c      	add	r4, r3
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	4423      	add	r3, r4
 800761a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800761e:	461c      	mov	r4, r3
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10e      	bne.n	8007644 <USB_EPStartXfer+0x3e0>
 8007626:	8823      	ldrh	r3, [r4, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800762e:	b29b      	uxth	r3, r3
 8007630:	8023      	strh	r3, [r4, #0]
 8007632:	8823      	ldrh	r3, [r4, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800763a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800763e:	b29b      	uxth	r3, r3
 8007640:	8023      	strh	r3, [r4, #0]
 8007642:	e03d      	b.n	80076c0 <USB_EPStartXfer+0x45c>
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	2b3e      	cmp	r3, #62	; 0x3e
 8007648:	d810      	bhi.n	800766c <USB_EPStartXfer+0x408>
 800764a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764c:	085b      	lsrs	r3, r3, #1
 800764e:	61bb      	str	r3, [r7, #24]
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <USB_EPStartXfer+0x3fc>
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	3301      	adds	r3, #1
 800765e:	61bb      	str	r3, [r7, #24]
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	b29b      	uxth	r3, r3
 8007664:	029b      	lsls	r3, r3, #10
 8007666:	b29b      	uxth	r3, r3
 8007668:	8023      	strh	r3, [r4, #0]
 800766a:	e029      	b.n	80076c0 <USB_EPStartXfer+0x45c>
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	095b      	lsrs	r3, r3, #5
 8007670:	61bb      	str	r3, [r7, #24]
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	f003 031f 	and.w	r3, r3, #31
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <USB_EPStartXfer+0x41e>
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	3b01      	subs	r3, #1
 8007680:	61bb      	str	r3, [r7, #24]
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	b29b      	uxth	r3, r3
 8007686:	029b      	lsls	r3, r3, #10
 8007688:	b29b      	uxth	r3, r3
 800768a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800768e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007692:	b29b      	uxth	r3, r3
 8007694:	8023      	strh	r3, [r4, #0]
 8007696:	e013      	b.n	80076c0 <USB_EPStartXfer+0x45c>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d10f      	bne.n	80076c0 <USB_EPStartXfer+0x45c>
 80076a0:	687c      	ldr	r4, [r7, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	441c      	add	r4, r3
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	4423      	add	r3, r4
 80076b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076b8:	461c      	mov	r4, r3
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	b29b      	uxth	r3, r3
 80076be:	8023      	strh	r3, [r4, #0]
 80076c0:	687c      	ldr	r4, [r7, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d14e      	bne.n	8007768 <USB_EPStartXfer+0x504>
 80076ca:	687c      	ldr	r4, [r7, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	441c      	add	r4, r3
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	4423      	add	r3, r4
 80076de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076e2:	461c      	mov	r4, r3
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10e      	bne.n	8007708 <USB_EPStartXfer+0x4a4>
 80076ea:	8823      	ldrh	r3, [r4, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	8023      	strh	r3, [r4, #0]
 80076f6:	8823      	ldrh	r3, [r4, #0]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007702:	b29b      	uxth	r3, r3
 8007704:	8023      	strh	r3, [r4, #0]
 8007706:	e043      	b.n	8007790 <USB_EPStartXfer+0x52c>
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	2b3e      	cmp	r3, #62	; 0x3e
 800770c:	d816      	bhi.n	800773c <USB_EPStartXfer+0x4d8>
 800770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007710:	085b      	lsrs	r3, r3, #1
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <USB_EPStartXfer+0x4c0>
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	3301      	adds	r3, #1
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	b29b      	uxth	r3, r3
 8007728:	029b      	lsls	r3, r3, #10
 800772a:	b29b      	uxth	r3, r3
 800772c:	8023      	strh	r3, [r4, #0]
 800772e:	e02f      	b.n	8007790 <USB_EPStartXfer+0x52c>
 8007730:	ffff80c0 	.word	0xffff80c0
 8007734:	ffffc080 	.word	0xffffc080
 8007738:	ffff8080 	.word	0xffff8080
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	095b      	lsrs	r3, r3, #5
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	f003 031f 	and.w	r3, r3, #31
 8007748:	2b00      	cmp	r3, #0
 800774a:	d102      	bne.n	8007752 <USB_EPStartXfer+0x4ee>
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	3b01      	subs	r3, #1
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	b29b      	uxth	r3, r3
 8007756:	029b      	lsls	r3, r3, #10
 8007758:	b29b      	uxth	r3, r3
 800775a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800775e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007762:	b29b      	uxth	r3, r3
 8007764:	8023      	strh	r3, [r4, #0]
 8007766:	e013      	b.n	8007790 <USB_EPStartXfer+0x52c>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	785b      	ldrb	r3, [r3, #1]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d10f      	bne.n	8007790 <USB_EPStartXfer+0x52c>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007776:	b29b      	uxth	r3, r3
 8007778:	441c      	add	r4, r3
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4423      	add	r3, r4
 8007782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	b29a      	uxth	r2, r3
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	b29b      	uxth	r3, r3
 800779e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a6:	b29c      	uxth	r4, r3
 80077a8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80077ac:	b29c      	uxth	r4, r3
 80077ae:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80077b2:	b29c      	uxth	r4, r3
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	441a      	add	r2, r3
 80077be:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <USB_EPStartXfer+0x56c>)
 80077c0:	4323      	orrs	r3, r4
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3734      	adds	r7, #52	; 0x34
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd90      	pop	{r4, r7, pc}
 80077d0:	ffff8080 	.word	0xffff8080

080077d4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077d4:	b490      	push	{r4, r7}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d018      	beq.n	8007818 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077fc:	b29c      	uxth	r4, r3
 80077fe:	f084 0310 	eor.w	r3, r4, #16
 8007802:	b29c      	uxth	r4, r3
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	441a      	add	r2, r3
 800780e:	4b11      	ldr	r3, [pc, #68]	; (8007854 <USB_EPSetStall+0x80>)
 8007810:	4323      	orrs	r3, r4
 8007812:	b29b      	uxth	r3, r3
 8007814:	8013      	strh	r3, [r2, #0]
 8007816:	e017      	b.n	8007848 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	b29b      	uxth	r3, r3
 8007826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800782a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800782e:	b29c      	uxth	r4, r3
 8007830:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007834:	b29c      	uxth	r4, r3
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	441a      	add	r2, r3
 8007840:	4b04      	ldr	r3, [pc, #16]	; (8007854 <USB_EPSetStall+0x80>)
 8007842:	4323      	orrs	r3, r4
 8007844:	b29b      	uxth	r3, r3
 8007846:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bc90      	pop	{r4, r7}
 8007852:	4770      	bx	lr
 8007854:	ffff8080 	.word	0xffff8080

08007858 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007858:	b490      	push	{r4, r7}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	7b1b      	ldrb	r3, [r3, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d17d      	bne.n	8007966 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	785b      	ldrb	r3, [r3, #1]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d03d      	beq.n	80078ee <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b29c      	uxth	r4, r3
 8007880:	4623      	mov	r3, r4
 8007882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d014      	beq.n	80078b4 <USB_EPClearStall+0x5c>
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b29b      	uxth	r3, r3
 8007898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800789c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a0:	b29c      	uxth	r4, r3
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	441a      	add	r2, r3
 80078ac:	4b31      	ldr	r3, [pc, #196]	; (8007974 <USB_EPClearStall+0x11c>)
 80078ae:	4323      	orrs	r3, r4
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	78db      	ldrb	r3, [r3, #3]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d054      	beq.n	8007966 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078d2:	b29c      	uxth	r4, r3
 80078d4:	f084 0320 	eor.w	r3, r4, #32
 80078d8:	b29c      	uxth	r4, r3
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	441a      	add	r2, r3
 80078e4:	4b24      	ldr	r3, [pc, #144]	; (8007978 <USB_EPClearStall+0x120>)
 80078e6:	4323      	orrs	r3, r4
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	8013      	strh	r3, [r2, #0]
 80078ec:	e03b      	b.n	8007966 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29c      	uxth	r4, r3
 80078fc:	4623      	mov	r3, r4
 80078fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d014      	beq.n	8007930 <USB_EPClearStall+0xd8>
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b29b      	uxth	r3, r3
 8007914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791c:	b29c      	uxth	r4, r3
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	441a      	add	r2, r3
 8007928:	4b14      	ldr	r3, [pc, #80]	; (800797c <USB_EPClearStall+0x124>)
 800792a:	4323      	orrs	r3, r4
 800792c:	b29b      	uxth	r3, r3
 800792e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b29b      	uxth	r3, r3
 800793e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007946:	b29c      	uxth	r4, r3
 8007948:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800794c:	b29c      	uxth	r4, r3
 800794e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007952:	b29c      	uxth	r4, r3
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	441a      	add	r2, r3
 800795e:	4b06      	ldr	r3, [pc, #24]	; (8007978 <USB_EPClearStall+0x120>)
 8007960:	4323      	orrs	r3, r4
 8007962:	b29b      	uxth	r3, r3
 8007964:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bc90      	pop	{r4, r7}
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	ffff80c0 	.word	0xffff80c0
 8007978:	ffff8080 	.word	0xffff8080
 800797c:	ffffc080 	.word	0xffffc080

08007980 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d103      	bne.n	800799a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2280      	movs	r2, #128	; 0x80
 8007996:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007a12:	68fb      	ldr	r3, [r7, #12]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b08d      	sub	sp, #52	; 0x34
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4611      	mov	r1, r2
 8007a44:	461a      	mov	r2, r3
 8007a46:	460b      	mov	r3, r1
 8007a48:	80fb      	strh	r3, [r7, #6]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a4e:	88bb      	ldrh	r3, [r7, #4]
 8007a50:	3301      	adds	r3, #1
 8007a52:	085b      	lsrs	r3, r3, #1
 8007a54:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a5e:	88fa      	ldrh	r2, [r7, #6]
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a68:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a6e:	e01b      	b.n	8007aa8 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	3301      	adds	r3, #1
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	021b      	lsls	r3, r3, #8
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	461a      	mov	r2, r3
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	3302      	adds	r3, #2
 8007a9a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e0      	bne.n	8007a70 <USB_WritePMA+0x38>
  }
}
 8007aae:	bf00      	nop
 8007ab0:	3734      	adds	r7, #52	; 0x34
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b08b      	sub	sp, #44	; 0x2c
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	60b9      	str	r1, [r7, #8]
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	460b      	mov	r3, r1
 8007aca:	80fb      	strh	r3, [r7, #6]
 8007acc:	4613      	mov	r3, r2
 8007ace:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007ad0:	88bb      	ldrh	r3, [r7, #4]
 8007ad2:	085b      	lsrs	r3, r3, #1
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ae0:	88fa      	ldrh	r2, [r7, #6]
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aea:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
 8007af0:	e018      	b.n	8007b24 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	3302      	adds	r3, #2
 8007afe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	0a1b      	lsrs	r3, r3, #8
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	3b01      	subs	r3, #1
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e3      	bne.n	8007af2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007b2a:	88bb      	ldrh	r3, [r7, #4]
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d007      	beq.n	8007b46 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	701a      	strb	r2, [r3, #0]
  }
}
 8007b46:	bf00      	nop
 8007b48:	372c      	adds	r7, #44	; 0x2c
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	7c1b      	ldrb	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d115      	bne.n	8007b96 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b6e:	2202      	movs	r2, #2
 8007b70:	2181      	movs	r1, #129	; 0x81
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f005 fb3c 	bl	800d1f0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b82:	2202      	movs	r2, #2
 8007b84:	2101      	movs	r1, #1
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f005 fb32 	bl	800d1f0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007b94:	e012      	b.n	8007bbc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b96:	2340      	movs	r3, #64	; 0x40
 8007b98:	2202      	movs	r2, #2
 8007b9a:	2181      	movs	r1, #129	; 0x81
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f005 fb27 	bl	800d1f0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ba8:	2340      	movs	r3, #64	; 0x40
 8007baa:	2202      	movs	r2, #2
 8007bac:	2101      	movs	r1, #1
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f005 fb1e 	bl	800d1f0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	2203      	movs	r2, #3
 8007bc0:	2182      	movs	r1, #130	; 0x82
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f005 fb14 	bl	800d1f0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007bd2:	f005 fd07 	bl	800d5e4 <USBD_static_malloc>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007be8:	2301      	movs	r3, #1
 8007bea:	73fb      	strb	r3, [r7, #15]
 8007bec:	e026      	b.n	8007c3c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	7c1b      	ldrb	r3, [r3, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d109      	bne.n	8007c2c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c22:	2101      	movs	r1, #1
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f005 fc59 	bl	800d4dc <USBD_LL_PrepareReceive>
 8007c2a:	e007      	b.n	8007c3c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c32:	2340      	movs	r3, #64	; 0x40
 8007c34:	2101      	movs	r1, #1
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f005 fc50 	bl	800d4dc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	460b      	mov	r3, r1
 8007c50:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007c56:	2181      	movs	r1, #129	; 0x81
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f005 fb07 	bl	800d26c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c64:	2101      	movs	r1, #1
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f005 fb00 	bl	800d26c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c74:	2182      	movs	r1, #130	; 0x82
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f005 faf8 	bl	800d26c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00e      	beq.n	8007caa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f005 fcaf 	bl	800d600 <USBD_static_free>
    pdev->pClassData = NULL;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d039      	beq.n	8007d52 <USBD_CDC_Setup+0x9e>
 8007cde:	2b20      	cmp	r3, #32
 8007ce0:	d17c      	bne.n	8007ddc <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	88db      	ldrh	r3, [r3, #6]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d029      	beq.n	8007d3e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	b25b      	sxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	da11      	bge.n	8007d18 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007d00:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	88d2      	ldrh	r2, [r2, #6]
 8007d06:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007d08:	6939      	ldr	r1, [r7, #16]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	88db      	ldrh	r3, [r3, #6]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 f9fb 	bl	800910c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007d16:	e068      	b.n	8007dea <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	785a      	ldrb	r2, [r3, #1]
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	88db      	ldrh	r3, [r3, #6]
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007d2e:	6939      	ldr	r1, [r7, #16]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	88db      	ldrh	r3, [r3, #6]
 8007d34:	461a      	mov	r2, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f001 fa16 	bl	8009168 <USBD_CtlPrepareRx>
      break;
 8007d3c:	e055      	b.n	8007dea <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	7850      	ldrb	r0, [r2, #1]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	4798      	blx	r3
      break;
 8007d50:	e04b      	b.n	8007dea <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	785b      	ldrb	r3, [r3, #1]
 8007d56:	2b0a      	cmp	r3, #10
 8007d58:	d017      	beq.n	8007d8a <USBD_CDC_Setup+0xd6>
 8007d5a:	2b0b      	cmp	r3, #11
 8007d5c:	d029      	beq.n	8007db2 <USBD_CDC_Setup+0xfe>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d133      	bne.n	8007dca <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d107      	bne.n	8007d7c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007d6c:	f107 030c 	add.w	r3, r7, #12
 8007d70:	2202      	movs	r2, #2
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f001 f9c9 	bl	800910c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d7a:	e02e      	b.n	8007dda <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 f959 	bl	8009036 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d84:	2302      	movs	r3, #2
 8007d86:	75fb      	strb	r3, [r7, #23]
          break;
 8007d88:	e027      	b.n	8007dda <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d107      	bne.n	8007da4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d94:	f107 030f 	add.w	r3, r7, #15
 8007d98:	2201      	movs	r2, #1
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 f9b5 	bl	800910c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007da2:	e01a      	b.n	8007dda <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 f945 	bl	8009036 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dac:	2302      	movs	r3, #2
 8007dae:	75fb      	strb	r3, [r7, #23]
          break;
 8007db0:	e013      	b.n	8007dda <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d00d      	beq.n	8007dd8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f001 f939 	bl	8009036 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007dc8:	e006      	b.n	8007dd8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 f932 	bl	8009036 <USBD_CtlError>
          ret = USBD_FAIL;
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	75fb      	strb	r3, [r7, #23]
          break;
 8007dd6:	e000      	b.n	8007dda <USBD_CDC_Setup+0x126>
          break;
 8007dd8:	bf00      	nop
      }
      break;
 8007dda:	e006      	b.n	8007dea <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f001 f929 	bl	8009036 <USBD_CtlError>
      ret = USBD_FAIL;
 8007de4:	2302      	movs	r3, #2
 8007de6:	75fb      	strb	r3, [r7, #23]
      break;
 8007de8:	bf00      	nop
  }

  return ret;
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e06:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e0e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d037      	beq.n	8007e8a <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e1a:	78fa      	ldrb	r2, [r7, #3]
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	440b      	add	r3, r1
 8007e28:	331c      	adds	r3, #28
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d026      	beq.n	8007e7e <USBD_CDC_DataIn+0x8a>
 8007e30:	78fa      	ldrb	r2, [r7, #3]
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	4613      	mov	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	440b      	add	r3, r1
 8007e3e:	331c      	adds	r3, #28
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	78fa      	ldrb	r2, [r7, #3]
 8007e44:	68b9      	ldr	r1, [r7, #8]
 8007e46:	0152      	lsls	r2, r2, #5
 8007e48:	440a      	add	r2, r1
 8007e4a:	3238      	adds	r2, #56	; 0x38
 8007e4c:	6812      	ldr	r2, [r2, #0]
 8007e4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e52:	fb02 f201 	mul.w	r2, r2, r1
 8007e56:	1a9b      	subs	r3, r3, r2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d110      	bne.n	8007e7e <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	440b      	add	r3, r1
 8007e6a:	331c      	adds	r3, #28
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e70:	78f9      	ldrb	r1, [r7, #3]
 8007e72:	2300      	movs	r3, #0
 8007e74:	2200      	movs	r2, #0
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f005 faf6 	bl	800d468 <USBD_LL_Transmit>
 8007e7c:	e003      	b.n	8007e86 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	e000      	b.n	8007e8c <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8007e8a:	2302      	movs	r3, #2
  }
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ea8:	78fb      	ldrb	r3, [r7, #3]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f005 fb4f 	bl	800d550 <USBD_LL_GetRxDataSize>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00d      	beq.n	8007ee0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ed8:	4611      	mov	r1, r2
 8007eda:	4798      	blx	r3

    return USBD_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	e000      	b.n	8007ee2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007ee0:	2302      	movs	r3, #2
  }
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d015      	beq.n	8007f30 <USBD_CDC_EP0_RxReady+0x46>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f0a:	2bff      	cmp	r3, #255	; 0xff
 8007f0c:	d010      	beq.n	8007f30 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007f1c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f24:	b292      	uxth	r2, r2
 8007f26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	22ff      	movs	r2, #255	; 0xff
 8007f2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2243      	movs	r2, #67	; 0x43
 8007f48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007f4a:	4b03      	ldr	r3, [pc, #12]	; (8007f58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	2000013c 	.word	0x2000013c

08007f5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2243      	movs	r2, #67	; 0x43
 8007f68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007f6a:	4b03      	ldr	r3, [pc, #12]	; (8007f78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	200000f8 	.word	0x200000f8

08007f7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2243      	movs	r2, #67	; 0x43
 8007f88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007f8a:	4b03      	ldr	r3, [pc, #12]	; (8007f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	20000180 	.word	0x20000180

08007f9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	220a      	movs	r2, #10
 8007fa8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007faa:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	200000b4 	.word	0x200000b4

08007fbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d005      	beq.n	8007fdc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b087      	sub	sp, #28
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffe:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008008:	88fa      	ldrh	r2, [r7, #6]
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800801e:	b480      	push	{r7}
 8008020:	b085      	sub	sp, #20
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008054:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805c:	2b00      	cmp	r3, #0
 800805e:	d017      	beq.n	8008090 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	7c1b      	ldrb	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d109      	bne.n	800807c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800806e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008072:	2101      	movs	r1, #1
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f005 fa31 	bl	800d4dc <USBD_LL_PrepareReceive>
 800807a:	e007      	b.n	800808c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008082:	2340      	movs	r3, #64	; 0x40
 8008084:	2101      	movs	r1, #1
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f005 fa28 	bl	800d4dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	e000      	b.n	8008092 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008090:	2302      	movs	r3, #2
  }
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	60f8      	str	r0, [r7, #12]
 80080a2:	60b9      	str	r1, [r7, #8]
 80080a4:	4613      	mov	r3, r2
 80080a6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080ae:	2302      	movs	r3, #2
 80080b0:	e01a      	b.n	80080e8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	79fa      	ldrb	r2, [r7, #7]
 80080de:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f004 fff1 	bl	800d0c8 <USBD_LL_Init>

  return USBD_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d006      	beq.n	8008112 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	73fb      	strb	r3, [r7, #15]
 8008110:	e001      	b.n	8008116 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008112:	2302      	movs	r3, #2
 8008114:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f005 f82d 	bl	800d18c <USBD_LL_Start>

  return USBD_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800815e:	2302      	movs	r3, #2
 8008160:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00c      	beq.n	8008186 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	78fa      	ldrb	r2, [r7, #3]
 8008176:	4611      	mov	r1, r2
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	4798      	blx	r3
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008186:	7bfb      	ldrb	r3, [r7, #15]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	78fa      	ldrb	r2, [r7, #3]
 80081a6:	4611      	mov	r1, r2
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	4798      	blx	r3

  return USBD_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fef7 	bl	8008fbc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80081dc:	461a      	mov	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80081ea:	f003 031f 	and.w	r3, r3, #31
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d00c      	beq.n	800820c <USBD_LL_SetupStage+0x56>
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d302      	bcc.n	80081fc <USBD_LL_SetupStage+0x46>
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d010      	beq.n	800821c <USBD_LL_SetupStage+0x66>
 80081fa:	e017      	b.n	800822c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f9cd 	bl	80085a4 <USBD_StdDevReq>
      break;
 800820a:	e01a      	b.n	8008242 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fa2f 	bl	8008678 <USBD_StdItfReq>
      break;
 800821a:	e012      	b.n	8008242 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fa6d 	bl	8008704 <USBD_StdEPReq>
      break;
 800822a:	e00a      	b.n	8008242 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008232:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008236:	b2db      	uxtb	r3, r3
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f005 f84c 	bl	800d2d8 <USBD_LL_StallEP>
      break;
 8008240:	bf00      	nop
  }

  return USBD_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	460b      	mov	r3, r1
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800825a:	7afb      	ldrb	r3, [r7, #11]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d14b      	bne.n	80082f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008266:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800826e:	2b03      	cmp	r3, #3
 8008270:	d134      	bne.n	80082dc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	429a      	cmp	r2, r3
 800827c:	d919      	bls.n	80082b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	1ad2      	subs	r2, r2, r3
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008294:	429a      	cmp	r2, r3
 8008296:	d203      	bcs.n	80082a0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800829c:	b29b      	uxth	r3, r3
 800829e:	e002      	b.n	80082a6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	461a      	mov	r2, r3
 80082a8:	6879      	ldr	r1, [r7, #4]
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 ff7a 	bl	80091a4 <USBD_CtlContinueRx>
 80082b0:	e038      	b.n	8008324 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00a      	beq.n	80082d4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d105      	bne.n	80082d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 ff77 	bl	80091c8 <USBD_CtlSendStatus>
 80082da:	e023      	b.n	8008324 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082e2:	2b05      	cmp	r3, #5
 80082e4:	d11e      	bne.n	8008324 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80082ee:	2100      	movs	r1, #0
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f004 fff1 	bl	800d2d8 <USBD_LL_StallEP>
 80082f6:	e015      	b.n	8008324 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00d      	beq.n	8008320 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800830a:	2b03      	cmp	r3, #3
 800830c:	d108      	bne.n	8008320 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	7afa      	ldrb	r2, [r7, #11]
 8008318:	4611      	mov	r1, r2
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	4798      	blx	r3
 800831e:	e001      	b.n	8008324 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008320:	2302      	movs	r3, #2
 8008322:	e000      	b.n	8008326 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b086      	sub	sp, #24
 8008332:	af00      	add	r7, sp, #0
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	460b      	mov	r3, r1
 8008338:	607a      	str	r2, [r7, #4]
 800833a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800833c:	7afb      	ldrb	r3, [r7, #11]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d17f      	bne.n	8008442 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3314      	adds	r3, #20
 8008346:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800834e:	2b02      	cmp	r3, #2
 8008350:	d15c      	bne.n	800840c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	68da      	ldr	r2, [r3, #12]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	429a      	cmp	r2, r3
 800835c:	d915      	bls.n	800838a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	68da      	ldr	r2, [r3, #12]
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	1ad2      	subs	r2, r2, r3
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	b29b      	uxth	r3, r3
 8008372:	461a      	mov	r2, r3
 8008374:	6879      	ldr	r1, [r7, #4]
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 fee4 	bl	8009144 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800837c:	2300      	movs	r3, #0
 800837e:	2200      	movs	r2, #0
 8008380:	2100      	movs	r1, #0
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f005 f8aa 	bl	800d4dc <USBD_LL_PrepareReceive>
 8008388:	e04e      	b.n	8008428 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	6912      	ldr	r2, [r2, #16]
 8008392:	fbb3 f1f2 	udiv	r1, r3, r2
 8008396:	fb02 f201 	mul.w	r2, r2, r1
 800839a:	1a9b      	subs	r3, r3, r2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d11c      	bne.n	80083da <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d316      	bcc.n	80083da <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d20f      	bcs.n	80083da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083ba:	2200      	movs	r2, #0
 80083bc:	2100      	movs	r1, #0
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fec0 	bl	8009144 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083cc:	2300      	movs	r3, #0
 80083ce:	2200      	movs	r2, #0
 80083d0:	2100      	movs	r1, #0
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f005 f882 	bl	800d4dc <USBD_LL_PrepareReceive>
 80083d8:	e026      	b.n	8008428 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d105      	bne.n	80083fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80083fc:	2180      	movs	r1, #128	; 0x80
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f004 ff6a 	bl	800d2d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 fef2 	bl	80091ee <USBD_CtlReceiveStatus>
 800840a:	e00d      	b.n	8008428 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008412:	2b04      	cmp	r3, #4
 8008414:	d004      	beq.n	8008420 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800841c:	2b00      	cmp	r3, #0
 800841e:	d103      	bne.n	8008428 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008420:	2180      	movs	r1, #128	; 0x80
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f004 ff58 	bl	800d2d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800842e:	2b01      	cmp	r3, #1
 8008430:	d11d      	bne.n	800846e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f7ff fe82 	bl	800813c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008440:	e015      	b.n	800846e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00d      	beq.n	800846a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008454:	2b03      	cmp	r3, #3
 8008456:	d108      	bne.n	800846a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	7afa      	ldrb	r2, [r7, #11]
 8008462:	4611      	mov	r1, r2
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	4798      	blx	r3
 8008468:	e001      	b.n	800846e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800846a:	2302      	movs	r3, #2
 800846c:	e000      	b.n	8008470 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008480:	2340      	movs	r3, #64	; 0x40
 8008482:	2200      	movs	r2, #0
 8008484:	2100      	movs	r1, #0
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f004 feb2 	bl	800d1f0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2240      	movs	r2, #64	; 0x40
 8008498:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800849c:	2340      	movs	r3, #64	; 0x40
 800849e:	2200      	movs	r2, #0
 80084a0:	2180      	movs	r1, #128	; 0x80
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f004 fea4 	bl	800d1f0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2240      	movs	r2, #64	; 0x40
 80084b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d009      	beq.n	80084f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	6852      	ldr	r2, [r2, #4]
 80084e8:	b2d2      	uxtb	r2, r2
 80084ea:	4611      	mov	r1, r2
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	4798      	blx	r3
  }

  return USBD_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	78fa      	ldrb	r2, [r7, #3]
 800850a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2204      	movs	r2, #4
 8008532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008552:	2b04      	cmp	r3, #4
 8008554:	d105      	bne.n	8008562 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857e:	2b03      	cmp	r3, #3
 8008580:	d10b      	bne.n	800859a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	d004      	beq.n	80085c8 <USBD_StdDevReq+0x24>
 80085be:	2b40      	cmp	r3, #64	; 0x40
 80085c0:	d002      	beq.n	80085c8 <USBD_StdDevReq+0x24>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d008      	beq.n	80085d8 <USBD_StdDevReq+0x34>
 80085c6:	e04c      	b.n	8008662 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
      break;
 80085d6:	e049      	b.n	800866c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	785b      	ldrb	r3, [r3, #1]
 80085dc:	2b09      	cmp	r3, #9
 80085de:	d83a      	bhi.n	8008656 <USBD_StdDevReq+0xb2>
 80085e0:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <USBD_StdDevReq+0x44>)
 80085e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e6:	bf00      	nop
 80085e8:	08008639 	.word	0x08008639
 80085ec:	0800864d 	.word	0x0800864d
 80085f0:	08008657 	.word	0x08008657
 80085f4:	08008643 	.word	0x08008643
 80085f8:	08008657 	.word	0x08008657
 80085fc:	0800861b 	.word	0x0800861b
 8008600:	08008611 	.word	0x08008611
 8008604:	08008657 	.word	0x08008657
 8008608:	0800862f 	.word	0x0800862f
 800860c:	08008625 	.word	0x08008625
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f9d4 	bl	80089c0 <USBD_GetDescriptor>
          break;
 8008618:	e022      	b.n	8008660 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fb61 	bl	8008ce4 <USBD_SetAddress>
          break;
 8008622:	e01d      	b.n	8008660 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fb9e 	bl	8008d68 <USBD_SetConfig>
          break;
 800862c:	e018      	b.n	8008660 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fc27 	bl	8008e84 <USBD_GetConfig>
          break;
 8008636:	e013      	b.n	8008660 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fc56 	bl	8008eec <USBD_GetStatus>
          break;
 8008640:	e00e      	b.n	8008660 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fc84 	bl	8008f52 <USBD_SetFeature>
          break;
 800864a:	e009      	b.n	8008660 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fc93 	bl	8008f7a <USBD_ClrFeature>
          break;
 8008654:	e004      	b.n	8008660 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fcec 	bl	8009036 <USBD_CtlError>
          break;
 800865e:	bf00      	nop
      }
      break;
 8008660:	e004      	b.n	800866c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fce6 	bl	8009036 <USBD_CtlError>
      break;
 800866a:	bf00      	nop
  }

  return ret;
 800866c:	7bfb      	ldrb	r3, [r7, #15]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop

08008678 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800868e:	2b20      	cmp	r3, #32
 8008690:	d003      	beq.n	800869a <USBD_StdItfReq+0x22>
 8008692:	2b40      	cmp	r3, #64	; 0x40
 8008694:	d001      	beq.n	800869a <USBD_StdItfReq+0x22>
 8008696:	2b00      	cmp	r3, #0
 8008698:	d12a      	bne.n	80086f0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a0:	3b01      	subs	r3, #1
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d81d      	bhi.n	80086e2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	889b      	ldrh	r3, [r3, #4]
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d813      	bhi.n	80086d8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	4798      	blx	r3
 80086be:	4603      	mov	r3, r0
 80086c0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	88db      	ldrh	r3, [r3, #6]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d110      	bne.n	80086ec <USBD_StdItfReq+0x74>
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10d      	bne.n	80086ec <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fd79 	bl	80091c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80086d6:	e009      	b.n	80086ec <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fcab 	bl	8009036 <USBD_CtlError>
          break;
 80086e0:	e004      	b.n	80086ec <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fca6 	bl	8009036 <USBD_CtlError>
          break;
 80086ea:	e000      	b.n	80086ee <USBD_StdItfReq+0x76>
          break;
 80086ec:	bf00      	nop
      }
      break;
 80086ee:	e004      	b.n	80086fa <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fc9f 	bl	8009036 <USBD_CtlError>
      break;
 80086f8:	bf00      	nop
  }

  return USBD_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	889b      	ldrh	r3, [r3, #4]
 8008716:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008720:	2b20      	cmp	r3, #32
 8008722:	d004      	beq.n	800872e <USBD_StdEPReq+0x2a>
 8008724:	2b40      	cmp	r3, #64	; 0x40
 8008726:	d002      	beq.n	800872e <USBD_StdEPReq+0x2a>
 8008728:	2b00      	cmp	r3, #0
 800872a:	d008      	beq.n	800873e <USBD_StdEPReq+0x3a>
 800872c:	e13d      	b.n	80089aa <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	4798      	blx	r3
      break;
 800873c:	e13a      	b.n	80089b4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008746:	2b20      	cmp	r3, #32
 8008748:	d10a      	bne.n	8008760 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	4798      	blx	r3
 8008758:	4603      	mov	r3, r0
 800875a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	e12a      	b.n	80089b6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	785b      	ldrb	r3, [r3, #1]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d03e      	beq.n	80087e6 <USBD_StdEPReq+0xe2>
 8008768:	2b03      	cmp	r3, #3
 800876a:	d002      	beq.n	8008772 <USBD_StdEPReq+0x6e>
 800876c:	2b00      	cmp	r3, #0
 800876e:	d070      	beq.n	8008852 <USBD_StdEPReq+0x14e>
 8008770:	e115      	b.n	800899e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008778:	2b02      	cmp	r3, #2
 800877a:	d002      	beq.n	8008782 <USBD_StdEPReq+0x7e>
 800877c:	2b03      	cmp	r3, #3
 800877e:	d015      	beq.n	80087ac <USBD_StdEPReq+0xa8>
 8008780:	e02b      	b.n	80087da <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008782:	7bbb      	ldrb	r3, [r7, #14]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00c      	beq.n	80087a2 <USBD_StdEPReq+0x9e>
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	2b80      	cmp	r3, #128	; 0x80
 800878c:	d009      	beq.n	80087a2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800878e:	7bbb      	ldrb	r3, [r7, #14]
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f004 fda0 	bl	800d2d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008798:	2180      	movs	r1, #128	; 0x80
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f004 fd9c 	bl	800d2d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087a0:	e020      	b.n	80087e4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fc46 	bl	8009036 <USBD_CtlError>
              break;
 80087aa:	e01b      	b.n	80087e4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	885b      	ldrh	r3, [r3, #2]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10e      	bne.n	80087d2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00b      	beq.n	80087d2 <USBD_StdEPReq+0xce>
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	2b80      	cmp	r3, #128	; 0x80
 80087be:	d008      	beq.n	80087d2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	88db      	ldrh	r3, [r3, #6]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d104      	bne.n	80087d2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f004 fd83 	bl	800d2d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fcf8 	bl	80091c8 <USBD_CtlSendStatus>

              break;
 80087d8:	e004      	b.n	80087e4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fc2a 	bl	8009036 <USBD_CtlError>
              break;
 80087e2:	bf00      	nop
          }
          break;
 80087e4:	e0e0      	b.n	80089a8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d002      	beq.n	80087f6 <USBD_StdEPReq+0xf2>
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d015      	beq.n	8008820 <USBD_StdEPReq+0x11c>
 80087f4:	e026      	b.n	8008844 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00c      	beq.n	8008816 <USBD_StdEPReq+0x112>
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	2b80      	cmp	r3, #128	; 0x80
 8008800:	d009      	beq.n	8008816 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f004 fd66 	bl	800d2d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800880c:	2180      	movs	r1, #128	; 0x80
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f004 fd62 	bl	800d2d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008814:	e01c      	b.n	8008850 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fc0c 	bl	8009036 <USBD_CtlError>
              break;
 800881e:	e017      	b.n	8008850 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	885b      	ldrh	r3, [r3, #2]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d112      	bne.n	800884e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008828:	7bbb      	ldrb	r3, [r7, #14]
 800882a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800882e:	2b00      	cmp	r3, #0
 8008830:	d004      	beq.n	800883c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008832:	7bbb      	ldrb	r3, [r7, #14]
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f004 fd84 	bl	800d344 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fcc3 	bl	80091c8 <USBD_CtlSendStatus>
              }
              break;
 8008842:	e004      	b.n	800884e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fbf5 	bl	8009036 <USBD_CtlError>
              break;
 800884c:	e000      	b.n	8008850 <USBD_StdEPReq+0x14c>
              break;
 800884e:	bf00      	nop
          }
          break;
 8008850:	e0aa      	b.n	80089a8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008858:	2b02      	cmp	r3, #2
 800885a:	d002      	beq.n	8008862 <USBD_StdEPReq+0x15e>
 800885c:	2b03      	cmp	r3, #3
 800885e:	d032      	beq.n	80088c6 <USBD_StdEPReq+0x1c2>
 8008860:	e097      	b.n	8008992 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d007      	beq.n	8008878 <USBD_StdEPReq+0x174>
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	2b80      	cmp	r3, #128	; 0x80
 800886c:	d004      	beq.n	8008878 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fbe0 	bl	8009036 <USBD_CtlError>
                break;
 8008876:	e091      	b.n	800899c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800887c:	2b00      	cmp	r3, #0
 800887e:	da0b      	bge.n	8008898 <USBD_StdEPReq+0x194>
 8008880:	7bbb      	ldrb	r3, [r7, #14]
 8008882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	3310      	adds	r3, #16
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	4413      	add	r3, r2
 8008894:	3304      	adds	r3, #4
 8008896:	e00b      	b.n	80088b0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008898:	7bbb      	ldrb	r3, [r7, #14]
 800889a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	4413      	add	r3, r2
 80088ae:	3304      	adds	r3, #4
 80088b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2202      	movs	r2, #2
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fc24 	bl	800910c <USBD_CtlSendData>
              break;
 80088c4:	e06a      	b.n	800899c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80088c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	da11      	bge.n	80088f2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	f003 020f 	and.w	r2, r3, #15
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	440b      	add	r3, r1
 80088e0:	3318      	adds	r3, #24
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d117      	bne.n	8008918 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fba3 	bl	8009036 <USBD_CtlError>
                  break;
 80088f0:	e054      	b.n	800899c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	f003 020f 	and.w	r2, r3, #15
 80088f8:	6879      	ldr	r1, [r7, #4]
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fb90 	bl	8009036 <USBD_CtlError>
                  break;
 8008916:	e041      	b.n	800899c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800891c:	2b00      	cmp	r3, #0
 800891e:	da0b      	bge.n	8008938 <USBD_StdEPReq+0x234>
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008926:	4613      	mov	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	3310      	adds	r3, #16
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	4413      	add	r3, r2
 8008934:	3304      	adds	r3, #4
 8008936:	e00b      	b.n	8008950 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008938:	7bbb      	ldrb	r3, [r7, #14]
 800893a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	4413      	add	r3, r2
 800894e:	3304      	adds	r3, #4
 8008950:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008952:	7bbb      	ldrb	r3, [r7, #14]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <USBD_StdEPReq+0x25a>
 8008958:	7bbb      	ldrb	r3, [r7, #14]
 800895a:	2b80      	cmp	r3, #128	; 0x80
 800895c:	d103      	bne.n	8008966 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	e00e      	b.n	8008984 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f004 fd20 	bl	800d3b0 <USBD_LL_IsStallEP>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2201      	movs	r2, #1
 800897a:	601a      	str	r2, [r3, #0]
 800897c:	e002      	b.n	8008984 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2202      	movs	r2, #2
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fbbe 	bl	800910c <USBD_CtlSendData>
              break;
 8008990:	e004      	b.n	800899c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fb4e 	bl	8009036 <USBD_CtlError>
              break;
 800899a:	bf00      	nop
          }
          break;
 800899c:	e004      	b.n	80089a8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fb48 	bl	8009036 <USBD_CtlError>
          break;
 80089a6:	bf00      	nop
      }
      break;
 80089a8:	e004      	b.n	80089b4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fb42 	bl	8009036 <USBD_CtlError>
      break;
 80089b2:	bf00      	nop
  }

  return ret;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
	...

080089c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	885b      	ldrh	r3, [r3, #2]
 80089da:	0a1b      	lsrs	r3, r3, #8
 80089dc:	b29b      	uxth	r3, r3
 80089de:	3b01      	subs	r3, #1
 80089e0:	2b0e      	cmp	r3, #14
 80089e2:	f200 8152 	bhi.w	8008c8a <USBD_GetDescriptor+0x2ca>
 80089e6:	a201      	add	r2, pc, #4	; (adr r2, 80089ec <USBD_GetDescriptor+0x2c>)
 80089e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ec:	08008a5d 	.word	0x08008a5d
 80089f0:	08008a75 	.word	0x08008a75
 80089f4:	08008ab5 	.word	0x08008ab5
 80089f8:	08008c8b 	.word	0x08008c8b
 80089fc:	08008c8b 	.word	0x08008c8b
 8008a00:	08008c2b 	.word	0x08008c2b
 8008a04:	08008c57 	.word	0x08008c57
 8008a08:	08008c8b 	.word	0x08008c8b
 8008a0c:	08008c8b 	.word	0x08008c8b
 8008a10:	08008c8b 	.word	0x08008c8b
 8008a14:	08008c8b 	.word	0x08008c8b
 8008a18:	08008c8b 	.word	0x08008c8b
 8008a1c:	08008c8b 	.word	0x08008c8b
 8008a20:	08008c8b 	.word	0x08008c8b
 8008a24:	08008a29 	.word	0x08008a29
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	7c12      	ldrb	r2, [r2, #16]
 8008a40:	f107 0108 	add.w	r1, r7, #8
 8008a44:	4610      	mov	r0, r2
 8008a46:	4798      	blx	r3
 8008a48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a4a:	e126      	b.n	8008c9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 faf1 	bl	8009036 <USBD_CtlError>
        err++;
 8008a54:	7afb      	ldrb	r3, [r7, #11]
 8008a56:	3301      	adds	r3, #1
 8008a58:	72fb      	strb	r3, [r7, #11]
      break;
 8008a5a:	e11e      	b.n	8008c9a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	7c12      	ldrb	r2, [r2, #16]
 8008a68:	f107 0108 	add.w	r1, r7, #8
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
 8008a70:	60f8      	str	r0, [r7, #12]
      break;
 8008a72:	e112      	b.n	8008c9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	7c1b      	ldrb	r3, [r3, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10d      	bne.n	8008a98 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a84:	f107 0208 	add.w	r2, r7, #8
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4798      	blx	r3
 8008a8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3301      	adds	r3, #1
 8008a92:	2202      	movs	r2, #2
 8008a94:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a96:	e100      	b.n	8008c9a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa0:	f107 0208 	add.w	r2, r7, #8
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	4798      	blx	r3
 8008aa8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	3301      	adds	r3, #1
 8008aae:	2202      	movs	r2, #2
 8008ab0:	701a      	strb	r2, [r3, #0]
      break;
 8008ab2:	e0f2      	b.n	8008c9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	885b      	ldrh	r3, [r3, #2]
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b05      	cmp	r3, #5
 8008abc:	f200 80ac 	bhi.w	8008c18 <USBD_GetDescriptor+0x258>
 8008ac0:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <USBD_GetDescriptor+0x108>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008ae1 	.word	0x08008ae1
 8008acc:	08008b15 	.word	0x08008b15
 8008ad0:	08008b49 	.word	0x08008b49
 8008ad4:	08008b7d 	.word	0x08008b7d
 8008ad8:	08008bb1 	.word	0x08008bb1
 8008adc:	08008be5 	.word	0x08008be5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00b      	beq.n	8008b04 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	7c12      	ldrb	r2, [r2, #16]
 8008af8:	f107 0108 	add.w	r1, r7, #8
 8008afc:	4610      	mov	r0, r2
 8008afe:	4798      	blx	r3
 8008b00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b02:	e091      	b.n	8008c28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fa95 	bl	8009036 <USBD_CtlError>
            err++;
 8008b0c:	7afb      	ldrb	r3, [r7, #11]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	72fb      	strb	r3, [r7, #11]
          break;
 8008b12:	e089      	b.n	8008c28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00b      	beq.n	8008b38 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	7c12      	ldrb	r2, [r2, #16]
 8008b2c:	f107 0108 	add.w	r1, r7, #8
 8008b30:	4610      	mov	r0, r2
 8008b32:	4798      	blx	r3
 8008b34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b36:	e077      	b.n	8008c28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fa7b 	bl	8009036 <USBD_CtlError>
            err++;
 8008b40:	7afb      	ldrb	r3, [r7, #11]
 8008b42:	3301      	adds	r3, #1
 8008b44:	72fb      	strb	r3, [r7, #11]
          break;
 8008b46:	e06f      	b.n	8008c28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00b      	beq.n	8008b6c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	7c12      	ldrb	r2, [r2, #16]
 8008b60:	f107 0108 	add.w	r1, r7, #8
 8008b64:	4610      	mov	r0, r2
 8008b66:	4798      	blx	r3
 8008b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b6a:	e05d      	b.n	8008c28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fa61 	bl	8009036 <USBD_CtlError>
            err++;
 8008b74:	7afb      	ldrb	r3, [r7, #11]
 8008b76:	3301      	adds	r3, #1
 8008b78:	72fb      	strb	r3, [r7, #11]
          break;
 8008b7a:	e055      	b.n	8008c28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00b      	beq.n	8008ba0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	7c12      	ldrb	r2, [r2, #16]
 8008b94:	f107 0108 	add.w	r1, r7, #8
 8008b98:	4610      	mov	r0, r2
 8008b9a:	4798      	blx	r3
 8008b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b9e:	e043      	b.n	8008c28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fa47 	bl	8009036 <USBD_CtlError>
            err++;
 8008ba8:	7afb      	ldrb	r3, [r7, #11]
 8008baa:	3301      	adds	r3, #1
 8008bac:	72fb      	strb	r3, [r7, #11]
          break;
 8008bae:	e03b      	b.n	8008c28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00b      	beq.n	8008bd4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	7c12      	ldrb	r2, [r2, #16]
 8008bc8:	f107 0108 	add.w	r1, r7, #8
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4798      	blx	r3
 8008bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bd2:	e029      	b.n	8008c28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fa2d 	bl	8009036 <USBD_CtlError>
            err++;
 8008bdc:	7afb      	ldrb	r3, [r7, #11]
 8008bde:	3301      	adds	r3, #1
 8008be0:	72fb      	strb	r3, [r7, #11]
          break;
 8008be2:	e021      	b.n	8008c28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00b      	beq.n	8008c08 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	7c12      	ldrb	r2, [r2, #16]
 8008bfc:	f107 0108 	add.w	r1, r7, #8
 8008c00:	4610      	mov	r0, r2
 8008c02:	4798      	blx	r3
 8008c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c06:	e00f      	b.n	8008c28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fa13 	bl	8009036 <USBD_CtlError>
            err++;
 8008c10:	7afb      	ldrb	r3, [r7, #11]
 8008c12:	3301      	adds	r3, #1
 8008c14:	72fb      	strb	r3, [r7, #11]
          break;
 8008c16:	e007      	b.n	8008c28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fa0b 	bl	8009036 <USBD_CtlError>
          err++;
 8008c20:	7afb      	ldrb	r3, [r7, #11]
 8008c22:	3301      	adds	r3, #1
 8008c24:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008c26:	e038      	b.n	8008c9a <USBD_GetDescriptor+0x2da>
 8008c28:	e037      	b.n	8008c9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	7c1b      	ldrb	r3, [r3, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d109      	bne.n	8008c46 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3a:	f107 0208 	add.w	r2, r7, #8
 8008c3e:	4610      	mov	r0, r2
 8008c40:	4798      	blx	r3
 8008c42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c44:	e029      	b.n	8008c9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f9f4 	bl	8009036 <USBD_CtlError>
        err++;
 8008c4e:	7afb      	ldrb	r3, [r7, #11]
 8008c50:	3301      	adds	r3, #1
 8008c52:	72fb      	strb	r3, [r7, #11]
      break;
 8008c54:	e021      	b.n	8008c9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	7c1b      	ldrb	r3, [r3, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10d      	bne.n	8008c7a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c66:	f107 0208 	add.w	r2, r7, #8
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	4798      	blx	r3
 8008c6e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3301      	adds	r3, #1
 8008c74:	2207      	movs	r2, #7
 8008c76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c78:	e00f      	b.n	8008c9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f9da 	bl	8009036 <USBD_CtlError>
        err++;
 8008c82:	7afb      	ldrb	r3, [r7, #11]
 8008c84:	3301      	adds	r3, #1
 8008c86:	72fb      	strb	r3, [r7, #11]
      break;
 8008c88:	e007      	b.n	8008c9a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f9d2 	bl	8009036 <USBD_CtlError>
      err++;
 8008c92:	7afb      	ldrb	r3, [r7, #11]
 8008c94:	3301      	adds	r3, #1
 8008c96:	72fb      	strb	r3, [r7, #11]
      break;
 8008c98:	bf00      	nop
  }

  if (err != 0U)
 8008c9a:	7afb      	ldrb	r3, [r7, #11]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d11c      	bne.n	8008cda <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ca0:	893b      	ldrh	r3, [r7, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d011      	beq.n	8008cca <USBD_GetDescriptor+0x30a>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	88db      	ldrh	r3, [r3, #6]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00d      	beq.n	8008cca <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	88da      	ldrh	r2, [r3, #6]
 8008cb2:	893b      	ldrh	r3, [r7, #8]
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	bf28      	it	cs
 8008cb8:	4613      	movcs	r3, r2
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cbe:	893b      	ldrh	r3, [r7, #8]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	68f9      	ldr	r1, [r7, #12]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fa21 	bl	800910c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	88db      	ldrh	r3, [r3, #6]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d104      	bne.n	8008cdc <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fa78 	bl	80091c8 <USBD_CtlSendStatus>
 8008cd8:	e000      	b.n	8008cdc <USBD_GetDescriptor+0x31c>
    return;
 8008cda:	bf00      	nop
    }
  }
}
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop

08008ce4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	889b      	ldrh	r3, [r3, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d130      	bne.n	8008d58 <USBD_SetAddress+0x74>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	88db      	ldrh	r3, [r3, #6]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d12c      	bne.n	8008d58 <USBD_SetAddress+0x74>
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	885b      	ldrh	r3, [r3, #2]
 8008d02:	2b7f      	cmp	r3, #127	; 0x7f
 8008d04:	d828      	bhi.n	8008d58 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	885b      	ldrh	r3, [r3, #2]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d104      	bne.n	8008d26 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f989 	bl	8009036 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d24:	e01c      	b.n	8008d60 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	7bfa      	ldrb	r2, [r7, #15]
 8008d2a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f004 fb62 	bl	800d3fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fa45 	bl	80091c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d004      	beq.n	8008d4e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d4c:	e008      	b.n	8008d60 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d56:	e003      	b.n	8008d60 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f96b 	bl	8009036 <USBD_CtlError>
  }
}
 8008d60:	bf00      	nop
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	885b      	ldrh	r3, [r3, #2]
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	4b41      	ldr	r3, [pc, #260]	; (8008e80 <USBD_SetConfig+0x118>)
 8008d7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d7c:	4b40      	ldr	r3, [pc, #256]	; (8008e80 <USBD_SetConfig+0x118>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d904      	bls.n	8008d8e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f955 	bl	8009036 <USBD_CtlError>
 8008d8c:	e075      	b.n	8008e7a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d002      	beq.n	8008d9e <USBD_SetConfig+0x36>
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d023      	beq.n	8008de4 <USBD_SetConfig+0x7c>
 8008d9c:	e062      	b.n	8008e64 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008d9e:	4b38      	ldr	r3, [pc, #224]	; (8008e80 <USBD_SetConfig+0x118>)
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d01a      	beq.n	8008ddc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008da6:	4b36      	ldr	r3, [pc, #216]	; (8008e80 <USBD_SetConfig+0x118>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2203      	movs	r2, #3
 8008db4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008db8:	4b31      	ldr	r3, [pc, #196]	; (8008e80 <USBD_SetConfig+0x118>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7ff f9c7 	bl	8008152 <USBD_SetClassConfig>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d104      	bne.n	8008dd4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f932 	bl	8009036 <USBD_CtlError>
            return;
 8008dd2:	e052      	b.n	8008e7a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f9f7 	bl	80091c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008dda:	e04e      	b.n	8008e7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f9f3 	bl	80091c8 <USBD_CtlSendStatus>
        break;
 8008de2:	e04a      	b.n	8008e7a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008de4:	4b26      	ldr	r3, [pc, #152]	; (8008e80 <USBD_SetConfig+0x118>)
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d112      	bne.n	8008e12 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008df4:	4b22      	ldr	r3, [pc, #136]	; (8008e80 <USBD_SetConfig+0x118>)
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008dfe:	4b20      	ldr	r3, [pc, #128]	; (8008e80 <USBD_SetConfig+0x118>)
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7ff f9c3 	bl	8008190 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f9dc 	bl	80091c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e10:	e033      	b.n	8008e7a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008e12:	4b1b      	ldr	r3, [pc, #108]	; (8008e80 <USBD_SetConfig+0x118>)
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d01d      	beq.n	8008e5c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff f9b1 	bl	8008190 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008e2e:	4b14      	ldr	r3, [pc, #80]	; (8008e80 <USBD_SetConfig+0x118>)
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e38:	4b11      	ldr	r3, [pc, #68]	; (8008e80 <USBD_SetConfig+0x118>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff f987 	bl	8008152 <USBD_SetClassConfig>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d104      	bne.n	8008e54 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f8f2 	bl	8009036 <USBD_CtlError>
            return;
 8008e52:	e012      	b.n	8008e7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f9b7 	bl	80091c8 <USBD_CtlSendStatus>
        break;
 8008e5a:	e00e      	b.n	8008e7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f9b3 	bl	80091c8 <USBD_CtlSendStatus>
        break;
 8008e62:	e00a      	b.n	8008e7a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f8e5 	bl	8009036 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008e6c:	4b04      	ldr	r3, [pc, #16]	; (8008e80 <USBD_SetConfig+0x118>)
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff f98c 	bl	8008190 <USBD_ClrClassConfig>
        break;
 8008e78:	bf00      	nop
    }
  }
}
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	20000274 	.word	0x20000274

08008e84 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	88db      	ldrh	r3, [r3, #6]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d004      	beq.n	8008ea0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f8cc 	bl	8009036 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e9e:	e021      	b.n	8008ee4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	db17      	blt.n	8008eda <USBD_GetConfig+0x56>
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	dd02      	ble.n	8008eb4 <USBD_GetConfig+0x30>
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d00b      	beq.n	8008eca <USBD_GetConfig+0x46>
 8008eb2:	e012      	b.n	8008eda <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f922 	bl	800910c <USBD_CtlSendData>
        break;
 8008ec8:	e00c      	b.n	8008ee4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	2201      	movs	r2, #1
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f91a 	bl	800910c <USBD_CtlSendData>
        break;
 8008ed8:	e004      	b.n	8008ee4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f8aa 	bl	8009036 <USBD_CtlError>
        break;
 8008ee2:	bf00      	nop
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efc:	3b01      	subs	r3, #1
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d81e      	bhi.n	8008f40 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	88db      	ldrh	r3, [r3, #6]
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d004      	beq.n	8008f14 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f892 	bl	8009036 <USBD_CtlError>
        break;
 8008f12:	e01a      	b.n	8008f4a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d005      	beq.n	8008f30 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	f043 0202 	orr.w	r2, r3, #2
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	330c      	adds	r3, #12
 8008f34:	2202      	movs	r2, #2
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f8e7 	bl	800910c <USBD_CtlSendData>
      break;
 8008f3e:	e004      	b.n	8008f4a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f877 	bl	8009036 <USBD_CtlError>
      break;
 8008f48:	bf00      	nop
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	885b      	ldrh	r3, [r3, #2]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d106      	bne.n	8008f72 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f92b 	bl	80091c8 <USBD_CtlSendStatus>
  }
}
 8008f72:	bf00      	nop
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d80b      	bhi.n	8008fa8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	885b      	ldrh	r3, [r3, #2]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d10c      	bne.n	8008fb2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f911 	bl	80091c8 <USBD_CtlSendStatus>
      }
      break;
 8008fa6:	e004      	b.n	8008fb2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f843 	bl	8009036 <USBD_CtlError>
      break;
 8008fb0:	e000      	b.n	8008fb4 <USBD_ClrFeature+0x3a>
      break;
 8008fb2:	bf00      	nop
  }
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	781a      	ldrb	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	785a      	ldrb	r2, [r3, #1]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	3302      	adds	r3, #2
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	3303      	adds	r3, #3
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	021b      	lsls	r3, r3, #8
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	4413      	add	r3, r2
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	3305      	adds	r3, #5
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	b29b      	uxth	r3, r3
 8009002:	021b      	lsls	r3, r3, #8
 8009004:	b29b      	uxth	r3, r3
 8009006:	4413      	add	r3, r2
 8009008:	b29a      	uxth	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	3306      	adds	r3, #6
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	b29a      	uxth	r2, r3
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	3307      	adds	r3, #7
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	b29b      	uxth	r3, r3
 800901e:	021b      	lsls	r3, r3, #8
 8009020:	b29b      	uxth	r3, r3
 8009022:	4413      	add	r3, r2
 8009024:	b29a      	uxth	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	80da      	strh	r2, [r3, #6]

}
 800902a:	bf00      	nop
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b082      	sub	sp, #8
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009040:	2180      	movs	r1, #128	; 0x80
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f004 f948 	bl	800d2d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009048:	2100      	movs	r1, #0
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f004 f944 	bl	800d2d8 <USBD_LL_StallEP>
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009064:	2300      	movs	r3, #0
 8009066:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d032      	beq.n	80090d4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 f834 	bl	80090dc <USBD_GetLen>
 8009074:	4603      	mov	r3, r0
 8009076:	3301      	adds	r3, #1
 8009078:	b29b      	uxth	r3, r3
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	b29a      	uxth	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	75fa      	strb	r2, [r7, #23]
 8009088:	461a      	mov	r2, r3
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	4413      	add	r3, r2
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	7812      	ldrb	r2, [r2, #0]
 8009092:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009094:	7dfb      	ldrb	r3, [r7, #23]
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	75fa      	strb	r2, [r7, #23]
 800909a:	461a      	mov	r2, r3
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	4413      	add	r3, r2
 80090a0:	2203      	movs	r2, #3
 80090a2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80090a4:	e012      	b.n	80090cc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	1c5a      	adds	r2, r3, #1
 80090aa:	60fa      	str	r2, [r7, #12]
 80090ac:	7dfa      	ldrb	r2, [r7, #23]
 80090ae:	1c51      	adds	r1, r2, #1
 80090b0:	75f9      	strb	r1, [r7, #23]
 80090b2:	4611      	mov	r1, r2
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	440a      	add	r2, r1
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
 80090be:	1c5a      	adds	r2, r3, #1
 80090c0:	75fa      	strb	r2, [r7, #23]
 80090c2:	461a      	mov	r2, r3
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	4413      	add	r3, r2
 80090c8:	2200      	movs	r2, #0
 80090ca:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1e8      	bne.n	80090a6 <USBD_GetString+0x4e>
    }
  }
}
 80090d4:	bf00      	nop
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80090e8:	e005      	b.n	80090f6 <USBD_GetLen+0x1a>
  {
    len++;
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	3301      	adds	r3, #1
 80090ee:	73fb      	strb	r3, [r7, #15]
    buf++;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3301      	adds	r3, #1
 80090f4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1f5      	bne.n	80090ea <USBD_GetLen+0xe>
  }

  return len;
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	4613      	mov	r3, r2
 8009118:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2202      	movs	r2, #2
 800911e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009122:	88fa      	ldrh	r2, [r7, #6]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009128:	88fa      	ldrh	r2, [r7, #6]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	2100      	movs	r1, #0
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f004 f997 	bl	800d468 <USBD_LL_Transmit>

  return USBD_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	4613      	mov	r3, r2
 8009150:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009152:	88fb      	ldrh	r3, [r7, #6]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	2100      	movs	r1, #0
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f004 f985 	bl	800d468 <USBD_LL_Transmit>

  return USBD_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	4613      	mov	r3, r2
 8009174:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2203      	movs	r2, #3
 800917a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800917e:	88fa      	ldrh	r2, [r7, #6]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009186:	88fa      	ldrh	r2, [r7, #6]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800918e:	88fb      	ldrh	r3, [r7, #6]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	2100      	movs	r1, #0
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f004 f9a1 	bl	800d4dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091b2:	88fb      	ldrh	r3, [r7, #6]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	2100      	movs	r1, #0
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f004 f98f 	bl	800d4dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2204      	movs	r2, #4
 80091d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80091d8:	2300      	movs	r3, #0
 80091da:	2200      	movs	r2, #0
 80091dc:	2100      	movs	r1, #0
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f004 f942 	bl	800d468 <USBD_LL_Transmit>

  return USBD_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2205      	movs	r2, #5
 80091fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091fe:	2300      	movs	r3, #0
 8009200:	2200      	movs	r2, #0
 8009202:	2100      	movs	r1, #0
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f004 f969 	bl	800d4dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009214:	b480      	push	{r7}
 8009216:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009218:	bf00      	nop
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
	...

08009224 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800922a:	f3ef 8305 	mrs	r3, IPSR
 800922e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009230:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009232:	2b00      	cmp	r3, #0
 8009234:	d10f      	bne.n	8009256 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009236:	f3ef 8310 	mrs	r3, PRIMASK
 800923a:	607b      	str	r3, [r7, #4]
  return(result);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d105      	bne.n	800924e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009242:	f3ef 8311 	mrs	r3, BASEPRI
 8009246:	603b      	str	r3, [r7, #0]
  return(result);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d007      	beq.n	800925e <osKernelInitialize+0x3a>
 800924e:	4b0e      	ldr	r3, [pc, #56]	; (8009288 <osKernelInitialize+0x64>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b02      	cmp	r3, #2
 8009254:	d103      	bne.n	800925e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009256:	f06f 0305 	mvn.w	r3, #5
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	e00c      	b.n	8009278 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800925e:	4b0a      	ldr	r3, [pc, #40]	; (8009288 <osKernelInitialize+0x64>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d105      	bne.n	8009272 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009266:	4b08      	ldr	r3, [pc, #32]	; (8009288 <osKernelInitialize+0x64>)
 8009268:	2201      	movs	r2, #1
 800926a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800926c:	2300      	movs	r3, #0
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	e002      	b.n	8009278 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009272:	f04f 33ff 	mov.w	r3, #4294967295
 8009276:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009278:	68fb      	ldr	r3, [r7, #12]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	20000278 	.word	0x20000278

0800928c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009292:	f3ef 8305 	mrs	r3, IPSR
 8009296:	60bb      	str	r3, [r7, #8]
  return(result);
 8009298:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10f      	bne.n	80092be <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800929e:	f3ef 8310 	mrs	r3, PRIMASK
 80092a2:	607b      	str	r3, [r7, #4]
  return(result);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d105      	bne.n	80092b6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80092aa:	f3ef 8311 	mrs	r3, BASEPRI
 80092ae:	603b      	str	r3, [r7, #0]
  return(result);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d007      	beq.n	80092c6 <osKernelStart+0x3a>
 80092b6:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <osKernelStart+0x68>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d103      	bne.n	80092c6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80092be:	f06f 0305 	mvn.w	r3, #5
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	e010      	b.n	80092e8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80092c6:	4b0b      	ldr	r3, [pc, #44]	; (80092f4 <osKernelStart+0x68>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d109      	bne.n	80092e2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80092ce:	f7ff ffa1 	bl	8009214 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80092d2:	4b08      	ldr	r3, [pc, #32]	; (80092f4 <osKernelStart+0x68>)
 80092d4:	2202      	movs	r2, #2
 80092d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80092d8:	f001 fea2 	bl	800b020 <vTaskStartScheduler>
      stat = osOK;
 80092dc:	2300      	movs	r3, #0
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	e002      	b.n	80092e8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80092e2:	f04f 33ff 	mov.w	r3, #4294967295
 80092e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80092e8:	68fb      	ldr	r3, [r7, #12]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	20000278 	.word	0x20000278

080092f8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092fe:	f3ef 8305 	mrs	r3, IPSR
 8009302:	60bb      	str	r3, [r7, #8]
  return(result);
 8009304:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10f      	bne.n	800932a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800930a:	f3ef 8310 	mrs	r3, PRIMASK
 800930e:	607b      	str	r3, [r7, #4]
  return(result);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d105      	bne.n	8009322 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009316:	f3ef 8311 	mrs	r3, BASEPRI
 800931a:	603b      	str	r3, [r7, #0]
  return(result);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d007      	beq.n	8009332 <osKernelGetTickCount+0x3a>
 8009322:	4b08      	ldr	r3, [pc, #32]	; (8009344 <osKernelGetTickCount+0x4c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2b02      	cmp	r3, #2
 8009328:	d103      	bne.n	8009332 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800932a:	f001 ff97 	bl	800b25c <xTaskGetTickCountFromISR>
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	e002      	b.n	8009338 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8009332:	f001 ff83 	bl	800b23c <xTaskGetTickCount>
 8009336:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8009338:	68fb      	ldr	r3, [r7, #12]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20000278 	.word	0x20000278

08009348 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800934c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8009350:	4618      	mov	r0, r3
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
	...

0800935c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800935c:	b580      	push	{r7, lr}
 800935e:	b090      	sub	sp, #64	; 0x40
 8009360:	af04      	add	r7, sp, #16
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009368:	2300      	movs	r3, #0
 800936a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800936c:	f3ef 8305 	mrs	r3, IPSR
 8009370:	61fb      	str	r3, [r7, #28]
  return(result);
 8009372:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009374:	2b00      	cmp	r3, #0
 8009376:	f040 808f 	bne.w	8009498 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800937a:	f3ef 8310 	mrs	r3, PRIMASK
 800937e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d105      	bne.n	8009392 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009386:	f3ef 8311 	mrs	r3, BASEPRI
 800938a:	617b      	str	r3, [r7, #20]
  return(result);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <osThreadNew+0x3e>
 8009392:	4b44      	ldr	r3, [pc, #272]	; (80094a4 <osThreadNew+0x148>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b02      	cmp	r3, #2
 8009398:	d07e      	beq.n	8009498 <osThreadNew+0x13c>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d07b      	beq.n	8009498 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80093a0:	2380      	movs	r3, #128	; 0x80
 80093a2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80093a4:	2318      	movs	r3, #24
 80093a6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80093a8:	2300      	movs	r3, #0
 80093aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80093ac:	f04f 33ff 	mov.w	r3, #4294967295
 80093b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d045      	beq.n	8009444 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <osThreadNew+0x6a>
        name = attr->name;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d002      	beq.n	80093d4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d008      	beq.n	80093ec <osThreadNew+0x90>
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	2b38      	cmp	r3, #56	; 0x38
 80093de:	d805      	bhi.n	80093ec <osThreadNew+0x90>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <osThreadNew+0x94>
        return (NULL);
 80093ec:	2300      	movs	r3, #0
 80093ee:	e054      	b.n	800949a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	695b      	ldr	r3, [r3, #20]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d003      	beq.n	8009400 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	089b      	lsrs	r3, r3, #2
 80093fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00e      	beq.n	8009426 <osThreadNew+0xca>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	2b5b      	cmp	r3, #91	; 0x5b
 800940e:	d90a      	bls.n	8009426 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009414:	2b00      	cmp	r3, #0
 8009416:	d006      	beq.n	8009426 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <osThreadNew+0xca>
        mem = 1;
 8009420:	2301      	movs	r3, #1
 8009422:	623b      	str	r3, [r7, #32]
 8009424:	e010      	b.n	8009448 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10c      	bne.n	8009448 <osThreadNew+0xec>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d108      	bne.n	8009448 <osThreadNew+0xec>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d104      	bne.n	8009448 <osThreadNew+0xec>
          mem = 0;
 800943e:	2300      	movs	r3, #0
 8009440:	623b      	str	r3, [r7, #32]
 8009442:	e001      	b.n	8009448 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d110      	bne.n	8009470 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009456:	9202      	str	r2, [sp, #8]
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f001 fb8f 	bl	800ab88 <xTaskCreateStatic>
 800946a:	4603      	mov	r3, r0
 800946c:	613b      	str	r3, [r7, #16]
 800946e:	e013      	b.n	8009498 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009470:	6a3b      	ldr	r3, [r7, #32]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d110      	bne.n	8009498 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009478:	b29a      	uxth	r2, r3
 800947a:	f107 0310 	add.w	r3, r7, #16
 800947e:	9301      	str	r3, [sp, #4]
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f001 fbd7 	bl	800ac3c <xTaskCreate>
 800948e:	4603      	mov	r3, r0
 8009490:	2b01      	cmp	r3, #1
 8009492:	d001      	beq.n	8009498 <osThreadNew+0x13c>
          hTask = NULL;
 8009494:	2300      	movs	r3, #0
 8009496:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009498:	693b      	ldr	r3, [r7, #16]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3730      	adds	r7, #48	; 0x30
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20000278 	.word	0x20000278

080094a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094b0:	f3ef 8305 	mrs	r3, IPSR
 80094b4:	613b      	str	r3, [r7, #16]
  return(result);
 80094b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10f      	bne.n	80094dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094bc:	f3ef 8310 	mrs	r3, PRIMASK
 80094c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d105      	bne.n	80094d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094c8:	f3ef 8311 	mrs	r3, BASEPRI
 80094cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d007      	beq.n	80094e4 <osDelay+0x3c>
 80094d4:	4b0a      	ldr	r3, [pc, #40]	; (8009500 <osDelay+0x58>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d103      	bne.n	80094e4 <osDelay+0x3c>
    stat = osErrorISR;
 80094dc:	f06f 0305 	mvn.w	r3, #5
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	e007      	b.n	80094f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f001 fd62 	bl	800afb8 <vTaskDelay>
    }
  }

  return (stat);
 80094f4:	697b      	ldr	r3, [r7, #20]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	20000278 	.word	0x20000278

08009504 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009504:	b580      	push	{r7, lr}
 8009506:	b088      	sub	sp, #32
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800950c:	f3ef 8305 	mrs	r3, IPSR
 8009510:	617b      	str	r3, [r7, #20]
  return(result);
 8009512:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10f      	bne.n	8009538 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009518:	f3ef 8310 	mrs	r3, PRIMASK
 800951c:	613b      	str	r3, [r7, #16]
  return(result);
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d105      	bne.n	8009530 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009524:	f3ef 8311 	mrs	r3, BASEPRI
 8009528:	60fb      	str	r3, [r7, #12]
  return(result);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d007      	beq.n	8009540 <osDelayUntil+0x3c>
 8009530:	4b13      	ldr	r3, [pc, #76]	; (8009580 <osDelayUntil+0x7c>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b02      	cmp	r3, #2
 8009536:	d103      	bne.n	8009540 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8009538:	f06f 0305 	mvn.w	r3, #5
 800953c:	61fb      	str	r3, [r7, #28]
 800953e:	e019      	b.n	8009574 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8009540:	2300      	movs	r3, #0
 8009542:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8009544:	f001 fe7a 	bl	800b23c <xTaskGetTickCount>
 8009548:	4603      	mov	r3, r0
 800954a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d009      	beq.n	800956e <osDelayUntil+0x6a>
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	2b00      	cmp	r3, #0
 800955e:	db06      	blt.n	800956e <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8009560:	f107 0308 	add.w	r3, r7, #8
 8009564:	69b9      	ldr	r1, [r7, #24]
 8009566:	4618      	mov	r0, r3
 8009568:	f001 fcac 	bl	800aec4 <vTaskDelayUntil>
 800956c:	e002      	b.n	8009574 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800956e:	f06f 0303 	mvn.w	r3, #3
 8009572:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8009574:	69fb      	ldr	r3, [r7, #28]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3720      	adds	r7, #32
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20000278 	.word	0x20000278

08009584 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009584:	b580      	push	{r7, lr}
 8009586:	b08a      	sub	sp, #40	; 0x28
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800958c:	2300      	movs	r3, #0
 800958e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009590:	f3ef 8305 	mrs	r3, IPSR
 8009594:	613b      	str	r3, [r7, #16]
  return(result);
 8009596:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009598:	2b00      	cmp	r3, #0
 800959a:	f040 8085 	bne.w	80096a8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800959e:	f3ef 8310 	mrs	r3, PRIMASK
 80095a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d105      	bne.n	80095b6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80095aa:	f3ef 8311 	mrs	r3, BASEPRI
 80095ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <osMutexNew+0x3a>
 80095b6:	4b3f      	ldr	r3, [pc, #252]	; (80096b4 <osMutexNew+0x130>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d074      	beq.n	80096a8 <osMutexNew+0x124>
    if (attr != NULL) {
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <osMutexNew+0x48>
      type = attr->attr_bits;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	623b      	str	r3, [r7, #32]
 80095ca:	e001      	b.n	80095d0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80095d0:	6a3b      	ldr	r3, [r7, #32]
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <osMutexNew+0x5c>
      rmtx = 1U;
 80095da:	2301      	movs	r3, #1
 80095dc:	61fb      	str	r3, [r7, #28]
 80095de:	e001      	b.n	80095e4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80095e0:	2300      	movs	r3, #0
 80095e2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	f003 0308 	and.w	r3, r3, #8
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d15c      	bne.n	80096a8 <osMutexNew+0x124>
      mem = -1;
 80095ee:	f04f 33ff 	mov.w	r3, #4294967295
 80095f2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d015      	beq.n	8009626 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d006      	beq.n	8009610 <osMutexNew+0x8c>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	2b4f      	cmp	r3, #79	; 0x4f
 8009608:	d902      	bls.n	8009610 <osMutexNew+0x8c>
          mem = 1;
 800960a:	2301      	movs	r3, #1
 800960c:	61bb      	str	r3, [r7, #24]
 800960e:	e00c      	b.n	800962a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d108      	bne.n	800962a <osMutexNew+0xa6>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d104      	bne.n	800962a <osMutexNew+0xa6>
            mem = 0;
 8009620:	2300      	movs	r3, #0
 8009622:	61bb      	str	r3, [r7, #24]
 8009624:	e001      	b.n	800962a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d112      	bne.n	8009656 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d007      	beq.n	8009646 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	4619      	mov	r1, r3
 800963c:	2004      	movs	r0, #4
 800963e:	f000 fcac 	bl	8009f9a <xQueueCreateMutexStatic>
 8009642:	6278      	str	r0, [r7, #36]	; 0x24
 8009644:	e016      	b.n	8009674 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	4619      	mov	r1, r3
 800964c:	2001      	movs	r0, #1
 800964e:	f000 fca4 	bl	8009f9a <xQueueCreateMutexStatic>
 8009652:	6278      	str	r0, [r7, #36]	; 0x24
 8009654:	e00e      	b.n	8009674 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10b      	bne.n	8009674 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d004      	beq.n	800966c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009662:	2004      	movs	r0, #4
 8009664:	f000 fc81 	bl	8009f6a <xQueueCreateMutex>
 8009668:	6278      	str	r0, [r7, #36]	; 0x24
 800966a:	e003      	b.n	8009674 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800966c:	2001      	movs	r0, #1
 800966e:	f000 fc7c 	bl	8009f6a <xQueueCreateMutex>
 8009672:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00c      	beq.n	8009694 <osMutexNew+0x110>
        if (attr != NULL) {
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d003      	beq.n	8009688 <osMutexNew+0x104>
          name = attr->name;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	617b      	str	r3, [r7, #20]
 8009686:	e001      	b.n	800968c <osMutexNew+0x108>
        } else {
          name = NULL;
 8009688:	2300      	movs	r3, #0
 800968a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800968c:	6979      	ldr	r1, [r7, #20]
 800968e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009690:	f001 fa1e 	bl	800aad0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	2b00      	cmp	r3, #0
 8009698:	d006      	beq.n	80096a8 <osMutexNew+0x124>
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	f043 0301 	orr.w	r3, r3, #1
 80096a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3728      	adds	r7, #40	; 0x28
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20000278 	.word	0x20000278

080096b8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f023 0301 	bic.w	r3, r3, #1
 80096c8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096d6:	f3ef 8305 	mrs	r3, IPSR
 80096da:	613b      	str	r3, [r7, #16]
  return(result);
 80096dc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10f      	bne.n	8009702 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096e2:	f3ef 8310 	mrs	r3, PRIMASK
 80096e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d105      	bne.n	80096fa <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80096ee:	f3ef 8311 	mrs	r3, BASEPRI
 80096f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d007      	beq.n	800970a <osMutexAcquire+0x52>
 80096fa:	4b1d      	ldr	r3, [pc, #116]	; (8009770 <osMutexAcquire+0xb8>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d103      	bne.n	800970a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8009702:	f06f 0305 	mvn.w	r3, #5
 8009706:	61fb      	str	r3, [r7, #28]
 8009708:	e02c      	b.n	8009764 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d103      	bne.n	8009718 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009710:	f06f 0303 	mvn.w	r3, #3
 8009714:	61fb      	str	r3, [r7, #28]
 8009716:	e025      	b.n	8009764 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d011      	beq.n	8009742 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	69b8      	ldr	r0, [r7, #24]
 8009722:	f000 fc88 	bl	800a036 <xQueueTakeMutexRecursive>
 8009726:	4603      	mov	r3, r0
 8009728:	2b01      	cmp	r3, #1
 800972a:	d01b      	beq.n	8009764 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009732:	f06f 0301 	mvn.w	r3, #1
 8009736:	61fb      	str	r3, [r7, #28]
 8009738:	e014      	b.n	8009764 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800973a:	f06f 0302 	mvn.w	r3, #2
 800973e:	61fb      	str	r3, [r7, #28]
 8009740:	e010      	b.n	8009764 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	69b8      	ldr	r0, [r7, #24]
 8009746:	f000 ff15 	bl	800a574 <xQueueSemaphoreTake>
 800974a:	4603      	mov	r3, r0
 800974c:	2b01      	cmp	r3, #1
 800974e:	d009      	beq.n	8009764 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009756:	f06f 0301 	mvn.w	r3, #1
 800975a:	61fb      	str	r3, [r7, #28]
 800975c:	e002      	b.n	8009764 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800975e:	f06f 0302 	mvn.w	r3, #2
 8009762:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009764:	69fb      	ldr	r3, [r7, #28]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3720      	adds	r7, #32
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20000278 	.word	0x20000278

08009774 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009774:	b580      	push	{r7, lr}
 8009776:	b088      	sub	sp, #32
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f023 0301 	bic.w	r3, r3, #1
 8009782:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800978c:	2300      	movs	r3, #0
 800978e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009790:	f3ef 8305 	mrs	r3, IPSR
 8009794:	613b      	str	r3, [r7, #16]
  return(result);
 8009796:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10f      	bne.n	80097bc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800979c:	f3ef 8310 	mrs	r3, PRIMASK
 80097a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d105      	bne.n	80097b4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097a8:	f3ef 8311 	mrs	r3, BASEPRI
 80097ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d007      	beq.n	80097c4 <osMutexRelease+0x50>
 80097b4:	4b16      	ldr	r3, [pc, #88]	; (8009810 <osMutexRelease+0x9c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d103      	bne.n	80097c4 <osMutexRelease+0x50>
    stat = osErrorISR;
 80097bc:	f06f 0305 	mvn.w	r3, #5
 80097c0:	61fb      	str	r3, [r7, #28]
 80097c2:	e01f      	b.n	8009804 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d103      	bne.n	80097d2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80097ca:	f06f 0303 	mvn.w	r3, #3
 80097ce:	61fb      	str	r3, [r7, #28]
 80097d0:	e018      	b.n	8009804 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d009      	beq.n	80097ec <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80097d8:	69b8      	ldr	r0, [r7, #24]
 80097da:	f000 fbf9 	bl	8009fd0 <xQueueGiveMutexRecursive>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d00f      	beq.n	8009804 <osMutexRelease+0x90>
        stat = osErrorResource;
 80097e4:	f06f 0302 	mvn.w	r3, #2
 80097e8:	61fb      	str	r3, [r7, #28]
 80097ea:	e00b      	b.n	8009804 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80097ec:	2300      	movs	r3, #0
 80097ee:	2200      	movs	r2, #0
 80097f0:	2100      	movs	r1, #0
 80097f2:	69b8      	ldr	r0, [r7, #24]
 80097f4:	f000 fc54 	bl	800a0a0 <xQueueGenericSend>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d002      	beq.n	8009804 <osMutexRelease+0x90>
        stat = osErrorResource;
 80097fe:	f06f 0302 	mvn.w	r3, #2
 8009802:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009804:	69fb      	ldr	r3, [r7, #28]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3720      	adds	r7, #32
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000278 	.word	0x20000278

08009814 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009814:	b580      	push	{r7, lr}
 8009816:	b08c      	sub	sp, #48	; 0x30
 8009818:	af02      	add	r7, sp, #8
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009820:	2300      	movs	r3, #0
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009824:	f3ef 8305 	mrs	r3, IPSR
 8009828:	61bb      	str	r3, [r7, #24]
  return(result);
 800982a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800982c:	2b00      	cmp	r3, #0
 800982e:	d170      	bne.n	8009912 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009830:	f3ef 8310 	mrs	r3, PRIMASK
 8009834:	617b      	str	r3, [r7, #20]
  return(result);
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d105      	bne.n	8009848 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800983c:	f3ef 8311 	mrs	r3, BASEPRI
 8009840:	613b      	str	r3, [r7, #16]
  return(result);
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <osMessageQueueNew+0x3c>
 8009848:	4b34      	ldr	r3, [pc, #208]	; (800991c <osMessageQueueNew+0x108>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b02      	cmp	r3, #2
 800984e:	d060      	beq.n	8009912 <osMessageQueueNew+0xfe>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d05d      	beq.n	8009912 <osMessageQueueNew+0xfe>
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d05a      	beq.n	8009912 <osMessageQueueNew+0xfe>
    mem = -1;
 800985c:	f04f 33ff 	mov.w	r3, #4294967295
 8009860:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d029      	beq.n	80098bc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d012      	beq.n	8009896 <osMessageQueueNew+0x82>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	2b4f      	cmp	r3, #79	; 0x4f
 8009876:	d90e      	bls.n	8009896 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00a      	beq.n	8009896 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	695a      	ldr	r2, [r3, #20]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	68b9      	ldr	r1, [r7, #8]
 8009888:	fb01 f303 	mul.w	r3, r1, r3
 800988c:	429a      	cmp	r2, r3
 800988e:	d302      	bcc.n	8009896 <osMessageQueueNew+0x82>
        mem = 1;
 8009890:	2301      	movs	r3, #1
 8009892:	623b      	str	r3, [r7, #32]
 8009894:	e014      	b.n	80098c0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d110      	bne.n	80098c0 <osMessageQueueNew+0xac>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10c      	bne.n	80098c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d108      	bne.n	80098c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	695b      	ldr	r3, [r3, #20]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d104      	bne.n	80098c0 <osMessageQueueNew+0xac>
          mem = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	623b      	str	r3, [r7, #32]
 80098ba:	e001      	b.n	80098c0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80098bc:	2300      	movs	r3, #0
 80098be:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d10c      	bne.n	80098e0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	691a      	ldr	r2, [r3, #16]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6899      	ldr	r1, [r3, #8]
 80098ce:	2300      	movs	r3, #0
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	460b      	mov	r3, r1
 80098d4:	68b9      	ldr	r1, [r7, #8]
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 fa58 	bl	8009d8c <xQueueGenericCreateStatic>
 80098dc:	6278      	str	r0, [r7, #36]	; 0x24
 80098de:	e008      	b.n	80098f2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d105      	bne.n	80098f2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80098e6:	2200      	movs	r2, #0
 80098e8:	68b9      	ldr	r1, [r7, #8]
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 fac1 	bl	8009e72 <xQueueGenericCreate>
 80098f0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80098f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00c      	beq.n	8009912 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <osMessageQueueNew+0xf2>
        name = attr->name;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	61fb      	str	r3, [r7, #28]
 8009904:	e001      	b.n	800990a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8009906:	2300      	movs	r3, #0
 8009908:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800990a:	69f9      	ldr	r1, [r7, #28]
 800990c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800990e:	f001 f8df 	bl	800aad0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009914:	4618      	mov	r0, r3
 8009916:	3728      	adds	r7, #40	; 0x28
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	20000278 	.word	0x20000278

08009920 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009920:	b580      	push	{r7, lr}
 8009922:	b08a      	sub	sp, #40	; 0x28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	603b      	str	r3, [r7, #0]
 800992c:	4613      	mov	r3, r2
 800992e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009934:	2300      	movs	r3, #0
 8009936:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009938:	f3ef 8305 	mrs	r3, IPSR
 800993c:	61fb      	str	r3, [r7, #28]
  return(result);
 800993e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10f      	bne.n	8009964 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009944:	f3ef 8310 	mrs	r3, PRIMASK
 8009948:	61bb      	str	r3, [r7, #24]
  return(result);
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d105      	bne.n	800995c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009950:	f3ef 8311 	mrs	r3, BASEPRI
 8009954:	617b      	str	r3, [r7, #20]
  return(result);
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d02c      	beq.n	80099b6 <osMessageQueuePut+0x96>
 800995c:	4b28      	ldr	r3, [pc, #160]	; (8009a00 <osMessageQueuePut+0xe0>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b02      	cmp	r3, #2
 8009962:	d128      	bne.n	80099b6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d005      	beq.n	8009976 <osMessageQueuePut+0x56>
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <osMessageQueuePut+0x56>
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d003      	beq.n	800997e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009976:	f06f 0303 	mvn.w	r3, #3
 800997a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800997c:	e039      	b.n	80099f2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800997e:	2300      	movs	r3, #0
 8009980:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009982:	f107 0210 	add.w	r2, r7, #16
 8009986:	2300      	movs	r3, #0
 8009988:	68b9      	ldr	r1, [r7, #8]
 800998a:	6a38      	ldr	r0, [r7, #32]
 800998c:	f000 fc82 	bl	800a294 <xQueueGenericSendFromISR>
 8009990:	4603      	mov	r3, r0
 8009992:	2b01      	cmp	r3, #1
 8009994:	d003      	beq.n	800999e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009996:	f06f 0302 	mvn.w	r3, #2
 800999a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800999c:	e029      	b.n	80099f2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d026      	beq.n	80099f2 <osMessageQueuePut+0xd2>
 80099a4:	4b17      	ldr	r3, [pc, #92]	; (8009a04 <osMessageQueuePut+0xe4>)
 80099a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099aa:	601a      	str	r2, [r3, #0]
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099b4:	e01d      	b.n	80099f2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80099b6:	6a3b      	ldr	r3, [r7, #32]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d002      	beq.n	80099c2 <osMessageQueuePut+0xa2>
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d103      	bne.n	80099ca <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80099c2:	f06f 0303 	mvn.w	r3, #3
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
 80099c8:	e014      	b.n	80099f4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80099ca:	2300      	movs	r3, #0
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	68b9      	ldr	r1, [r7, #8]
 80099d0:	6a38      	ldr	r0, [r7, #32]
 80099d2:	f000 fb65 	bl	800a0a0 <xQueueGenericSend>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d00b      	beq.n	80099f4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80099e2:	f06f 0301 	mvn.w	r3, #1
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
 80099e8:	e004      	b.n	80099f4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80099ea:	f06f 0302 	mvn.w	r3, #2
 80099ee:	627b      	str	r3, [r7, #36]	; 0x24
 80099f0:	e000      	b.n	80099f4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099f2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3728      	adds	r7, #40	; 0x28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20000278 	.word	0x20000278
 8009a04:	e000ed04 	.word	0xe000ed04

08009a08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08a      	sub	sp, #40	; 0x28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a1e:	f3ef 8305 	mrs	r3, IPSR
 8009a22:	61fb      	str	r3, [r7, #28]
  return(result);
 8009a24:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10f      	bne.n	8009a4a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8009a2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d105      	bne.n	8009a42 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a36:	f3ef 8311 	mrs	r3, BASEPRI
 8009a3a:	617b      	str	r3, [r7, #20]
  return(result);
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d02c      	beq.n	8009a9c <osMessageQueueGet+0x94>
 8009a42:	4b28      	ldr	r3, [pc, #160]	; (8009ae4 <osMessageQueueGet+0xdc>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d128      	bne.n	8009a9c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d005      	beq.n	8009a5c <osMessageQueueGet+0x54>
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d002      	beq.n	8009a5c <osMessageQueueGet+0x54>
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d003      	beq.n	8009a64 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009a5c:	f06f 0303 	mvn.w	r3, #3
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a62:	e038      	b.n	8009ad6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009a64:	2300      	movs	r3, #0
 8009a66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009a68:	f107 0310 	add.w	r3, r7, #16
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	68b9      	ldr	r1, [r7, #8]
 8009a70:	6a38      	ldr	r0, [r7, #32]
 8009a72:	f000 fe87 	bl	800a784 <xQueueReceiveFromISR>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d003      	beq.n	8009a84 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009a7c:	f06f 0302 	mvn.w	r3, #2
 8009a80:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a82:	e028      	b.n	8009ad6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d025      	beq.n	8009ad6 <osMessageQueueGet+0xce>
 8009a8a:	4b17      	ldr	r3, [pc, #92]	; (8009ae8 <osMessageQueueGet+0xe0>)
 8009a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a9a:	e01c      	b.n	8009ad6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <osMessageQueueGet+0xa0>
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d103      	bne.n	8009ab0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009aa8:	f06f 0303 	mvn.w	r3, #3
 8009aac:	627b      	str	r3, [r7, #36]	; 0x24
 8009aae:	e013      	b.n	8009ad8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	68b9      	ldr	r1, [r7, #8]
 8009ab4:	6a38      	ldr	r0, [r7, #32]
 8009ab6:	f000 fc81 	bl	800a3bc <xQueueReceive>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d00b      	beq.n	8009ad8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d003      	beq.n	8009ace <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009ac6:	f06f 0301 	mvn.w	r3, #1
 8009aca:	627b      	str	r3, [r7, #36]	; 0x24
 8009acc:	e004      	b.n	8009ad8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009ace:	f06f 0302 	mvn.w	r3, #2
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad4:	e000      	b.n	8009ad8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ad6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3728      	adds	r7, #40	; 0x28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20000278 	.word	0x20000278
 8009ae8:	e000ed04 	.word	0xe000ed04

08009aec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4a07      	ldr	r2, [pc, #28]	; (8009b18 <vApplicationGetIdleTaskMemory+0x2c>)
 8009afc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	4a06      	ldr	r2, [pc, #24]	; (8009b1c <vApplicationGetIdleTaskMemory+0x30>)
 8009b02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2280      	movs	r2, #128	; 0x80
 8009b08:	601a      	str	r2, [r3, #0]
}
 8009b0a:	bf00      	nop
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	2000027c 	.word	0x2000027c
 8009b1c:	200002d8 	.word	0x200002d8

08009b20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4a07      	ldr	r2, [pc, #28]	; (8009b4c <vApplicationGetTimerTaskMemory+0x2c>)
 8009b30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	4a06      	ldr	r2, [pc, #24]	; (8009b50 <vApplicationGetTimerTaskMemory+0x30>)
 8009b36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b3e:	601a      	str	r2, [r3, #0]
}
 8009b40:	bf00      	nop
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	200004d8 	.word	0x200004d8
 8009b50:	20000534 	.word	0x20000534

08009b54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f103 0208 	add.w	r2, r3, #8
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f103 0208 	add.w	r2, r3, #8
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f103 0208 	add.w	r2, r3, #8
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ba2:	bf00      	nop
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b085      	sub	sp, #20
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	689a      	ldr	r2, [r3, #8]
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	601a      	str	r2, [r3, #0]
}
 8009bea:	bf00      	nop
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b085      	sub	sp, #20
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0c:	d103      	bne.n	8009c16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	60fb      	str	r3, [r7, #12]
 8009c14:	e00c      	b.n	8009c30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	3308      	adds	r3, #8
 8009c1a:	60fb      	str	r3, [r7, #12]
 8009c1c:	e002      	b.n	8009c24 <vListInsert+0x2e>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d2f6      	bcs.n	8009c1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	683a      	ldr	r2, [r7, #0]
 8009c4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	601a      	str	r2, [r3, #0]
}
 8009c5c:	bf00      	nop
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	6892      	ldr	r2, [r2, #8]
 8009c7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6852      	ldr	r2, [r2, #4]
 8009c88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d103      	bne.n	8009c9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	689a      	ldr	r2, [r3, #8]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	1e5a      	subs	r2, r3, #1
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d109      	bne.n	8009ce4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	60bb      	str	r3, [r7, #8]
 8009ce2:	e7fe      	b.n	8009ce2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009ce4:	f002 fc3a 	bl	800c55c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cf0:	68f9      	ldr	r1, [r7, #12]
 8009cf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009cf4:	fb01 f303 	mul.w	r3, r1, r3
 8009cf8:	441a      	add	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d14:	3b01      	subs	r3, #1
 8009d16:	68f9      	ldr	r1, [r7, #12]
 8009d18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d1a:	fb01 f303 	mul.w	r3, r1, r3
 8009d1e:	441a      	add	r2, r3
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	22ff      	movs	r2, #255	; 0xff
 8009d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	22ff      	movs	r2, #255	; 0xff
 8009d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d114      	bne.n	8009d64 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d01a      	beq.n	8009d78 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3310      	adds	r3, #16
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 fbfc 	bl	800b544 <xTaskRemoveFromEventList>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d012      	beq.n	8009d78 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d52:	4b0d      	ldr	r3, [pc, #52]	; (8009d88 <xQueueGenericReset+0xcc>)
 8009d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	e009      	b.n	8009d78 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	3310      	adds	r3, #16
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7ff fef3 	bl	8009b54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3324      	adds	r3, #36	; 0x24
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7ff feee 	bl	8009b54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d78:	f002 fc1e 	bl	800c5b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d7c:	2301      	movs	r3, #1
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	e000ed04 	.word	0xe000ed04

08009d8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08e      	sub	sp, #56	; 0x38
 8009d90:	af02      	add	r7, sp, #8
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
 8009d98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d109      	bne.n	8009db4 <xQueueGenericCreateStatic+0x28>
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009db2:	e7fe      	b.n	8009db2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d109      	bne.n	8009dce <xQueueGenericCreateStatic+0x42>
 8009dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbe:	f383 8811 	msr	BASEPRI, r3
 8009dc2:	f3bf 8f6f 	isb	sy
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	627b      	str	r3, [r7, #36]	; 0x24
 8009dcc:	e7fe      	b.n	8009dcc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <xQueueGenericCreateStatic+0x4e>
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <xQueueGenericCreateStatic+0x52>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <xQueueGenericCreateStatic+0x54>
 8009dde:	2300      	movs	r3, #0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d109      	bne.n	8009df8 <xQueueGenericCreateStatic+0x6c>
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	623b      	str	r3, [r7, #32]
 8009df6:	e7fe      	b.n	8009df6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <xQueueGenericCreateStatic+0x78>
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <xQueueGenericCreateStatic+0x7c>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e000      	b.n	8009e0a <xQueueGenericCreateStatic+0x7e>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d109      	bne.n	8009e22 <xQueueGenericCreateStatic+0x96>
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	61fb      	str	r3, [r7, #28]
 8009e20:	e7fe      	b.n	8009e20 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e22:	2350      	movs	r3, #80	; 0x50
 8009e24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	2b50      	cmp	r3, #80	; 0x50
 8009e2a:	d009      	beq.n	8009e40 <xQueueGenericCreateStatic+0xb4>
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	61bb      	str	r3, [r7, #24]
 8009e3e:	e7fe      	b.n	8009e3e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e40:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00d      	beq.n	8009e68 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e54:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	68b9      	ldr	r1, [r7, #8]
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 f844 	bl	8009ef0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3730      	adds	r7, #48	; 0x30
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b08a      	sub	sp, #40	; 0x28
 8009e76:	af02      	add	r7, sp, #8
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	60b9      	str	r1, [r7, #8]
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d109      	bne.n	8009e9a <xQueueGenericCreate+0x28>
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	613b      	str	r3, [r7, #16]
 8009e98:	e7fe      	b.n	8009e98 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d102      	bne.n	8009ea6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	61fb      	str	r3, [r7, #28]
 8009ea4:	e004      	b.n	8009eb0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	fb02 f303 	mul.w	r3, r2, r3
 8009eae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	3350      	adds	r3, #80	; 0x50
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f002 fc6b 	bl	800c790 <pvPortMalloc>
 8009eba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d011      	beq.n	8009ee6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	3350      	adds	r3, #80	; 0x50
 8009eca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ed4:	79fa      	ldrb	r2, [r7, #7]
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	4613      	mov	r3, r2
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	68b9      	ldr	r1, [r7, #8]
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 f805 	bl	8009ef0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ee6:	69bb      	ldr	r3, [r7, #24]
	}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3720      	adds	r7, #32
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
 8009efc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d103      	bne.n	8009f0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	69ba      	ldr	r2, [r7, #24]
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	e002      	b.n	8009f12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f1e:	2101      	movs	r1, #1
 8009f20:	69b8      	ldr	r0, [r7, #24]
 8009f22:	f7ff fecb 	bl	8009cbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	78fa      	ldrb	r2, [r7, #3]
 8009f2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f2e:	bf00      	nop
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00e      	beq.n	8009f62 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009f56:	2300      	movs	r3, #0
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f89f 	bl	800a0a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b086      	sub	sp, #24
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	4603      	mov	r3, r0
 8009f72:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009f74:	2301      	movs	r3, #1
 8009f76:	617b      	str	r3, [r7, #20]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009f7c:	79fb      	ldrb	r3, [r7, #7]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	6939      	ldr	r1, [r7, #16]
 8009f82:	6978      	ldr	r0, [r7, #20]
 8009f84:	f7ff ff75 	bl	8009e72 <xQueueGenericCreate>
 8009f88:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f7ff ffd3 	bl	8009f36 <prvInitialiseMutex>

		return xNewQueue;
 8009f90:	68fb      	ldr	r3, [r7, #12]
	}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3718      	adds	r7, #24
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b088      	sub	sp, #32
 8009f9e:	af02      	add	r7, sp, #8
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	6039      	str	r1, [r7, #0]
 8009fa4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	617b      	str	r3, [r7, #20]
 8009faa:	2300      	movs	r3, #0
 8009fac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009fae:	79fb      	ldrb	r3, [r7, #7]
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	6939      	ldr	r1, [r7, #16]
 8009fb8:	6978      	ldr	r0, [r7, #20]
 8009fba:	f7ff fee7 	bl	8009d8c <xQueueGenericCreateStatic>
 8009fbe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f7ff ffb8 	bl	8009f36 <prvInitialiseMutex>

		return xNewQueue;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
	}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3718      	adds	r7, #24
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009fd0:	b590      	push	{r4, r7, lr}
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d109      	bne.n	8009ff6 <xQueueGiveMutexRecursive+0x26>
 8009fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	e7fe      	b.n	8009ff4 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	689c      	ldr	r4, [r3, #8]
 8009ffa:	f001 fc59 	bl	800b8b0 <xTaskGetCurrentTaskHandle>
 8009ffe:	4603      	mov	r3, r0
 800a000:	429c      	cmp	r4, r3
 800a002:	d111      	bne.n	800a028 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	1e5a      	subs	r2, r3, #1
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d105      	bne.n	800a022 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a016:	2300      	movs	r3, #0
 800a018:	2200      	movs	r2, #0
 800a01a:	2100      	movs	r1, #0
 800a01c:	6938      	ldr	r0, [r7, #16]
 800a01e:	f000 f83f 	bl	800a0a0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a022:	2301      	movs	r3, #1
 800a024:	617b      	str	r3, [r7, #20]
 800a026:	e001      	b.n	800a02c <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a028:	2300      	movs	r3, #0
 800a02a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a02c:	697b      	ldr	r3, [r7, #20]
	}
 800a02e:	4618      	mov	r0, r3
 800a030:	371c      	adds	r7, #28
 800a032:	46bd      	mov	sp, r7
 800a034:	bd90      	pop	{r4, r7, pc}

0800a036 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a036:	b590      	push	{r4, r7, lr}
 800a038:	b087      	sub	sp, #28
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d109      	bne.n	800a05e <xQueueTakeMutexRecursive+0x28>
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	e7fe      	b.n	800a05c <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	689c      	ldr	r4, [r3, #8]
 800a062:	f001 fc25 	bl	800b8b0 <xTaskGetCurrentTaskHandle>
 800a066:	4603      	mov	r3, r0
 800a068:	429c      	cmp	r4, r3
 800a06a:	d107      	bne.n	800a07c <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	1c5a      	adds	r2, r3, #1
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a076:	2301      	movs	r3, #1
 800a078:	617b      	str	r3, [r7, #20]
 800a07a:	e00c      	b.n	800a096 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6938      	ldr	r0, [r7, #16]
 800a080:	f000 fa78 	bl	800a574 <xQueueSemaphoreTake>
 800a084:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d004      	beq.n	800a096 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a096:	697b      	ldr	r3, [r7, #20]
	}
 800a098:	4618      	mov	r0, r3
 800a09a:	371c      	adds	r7, #28
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd90      	pop	{r4, r7, pc}

0800a0a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b08e      	sub	sp, #56	; 0x38
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
 800a0ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d109      	bne.n	800a0d0 <xQueueGenericSend+0x30>
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0ce:	e7fe      	b.n	800a0ce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d103      	bne.n	800a0de <xQueueGenericSend+0x3e>
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <xQueueGenericSend+0x42>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e000      	b.n	800a0e4 <xQueueGenericSend+0x44>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d109      	bne.n	800a0fc <xQueueGenericSend+0x5c>
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a0fa:	e7fe      	b.n	800a0fa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d103      	bne.n	800a10a <xQueueGenericSend+0x6a>
 800a102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a106:	2b01      	cmp	r3, #1
 800a108:	d101      	bne.n	800a10e <xQueueGenericSend+0x6e>
 800a10a:	2301      	movs	r3, #1
 800a10c:	e000      	b.n	800a110 <xQueueGenericSend+0x70>
 800a10e:	2300      	movs	r3, #0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d109      	bne.n	800a128 <xQueueGenericSend+0x88>
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	623b      	str	r3, [r7, #32]
 800a126:	e7fe      	b.n	800a126 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a128:	f001 fbd2 	bl	800b8d0 <xTaskGetSchedulerState>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d102      	bne.n	800a138 <xQueueGenericSend+0x98>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d101      	bne.n	800a13c <xQueueGenericSend+0x9c>
 800a138:	2301      	movs	r3, #1
 800a13a:	e000      	b.n	800a13e <xQueueGenericSend+0x9e>
 800a13c:	2300      	movs	r3, #0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d109      	bne.n	800a156 <xQueueGenericSend+0xb6>
 800a142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a146:	f383 8811 	msr	BASEPRI, r3
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	61fb      	str	r3, [r7, #28]
 800a154:	e7fe      	b.n	800a154 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a156:	f002 fa01 	bl	800c55c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a162:	429a      	cmp	r2, r3
 800a164:	d302      	bcc.n	800a16c <xQueueGenericSend+0xcc>
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d129      	bne.n	800a1c0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	68b9      	ldr	r1, [r7, #8]
 800a170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a172:	f000 fb9c 	bl	800a8ae <prvCopyDataToQueue>
 800a176:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d010      	beq.n	800a1a2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a182:	3324      	adds	r3, #36	; 0x24
 800a184:	4618      	mov	r0, r3
 800a186:	f001 f9dd 	bl	800b544 <xTaskRemoveFromEventList>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d013      	beq.n	800a1b8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a190:	4b3f      	ldr	r3, [pc, #252]	; (800a290 <xQueueGenericSend+0x1f0>)
 800a192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	e00a      	b.n	800a1b8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d007      	beq.n	800a1b8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a1a8:	4b39      	ldr	r3, [pc, #228]	; (800a290 <xQueueGenericSend+0x1f0>)
 800a1aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ae:	601a      	str	r2, [r3, #0]
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a1b8:	f002 f9fe 	bl	800c5b8 <vPortExitCritical>
				return pdPASS;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e063      	b.n	800a288 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d103      	bne.n	800a1ce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1c6:	f002 f9f7 	bl	800c5b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e05c      	b.n	800a288 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d106      	bne.n	800a1e2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1d4:	f107 0314 	add.w	r3, r7, #20
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f001 fa15 	bl	800b608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1e2:	f002 f9e9 	bl	800c5b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1e6:	f000 ff7f 	bl	800b0e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1ea:	f002 f9b7 	bl	800c55c <vPortEnterCritical>
 800a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1f4:	b25b      	sxtb	r3, r3
 800a1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fa:	d103      	bne.n	800a204 <xQueueGenericSend+0x164>
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a20a:	b25b      	sxtb	r3, r3
 800a20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a210:	d103      	bne.n	800a21a <xQueueGenericSend+0x17a>
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a21a:	f002 f9cd 	bl	800c5b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a21e:	1d3a      	adds	r2, r7, #4
 800a220:	f107 0314 	add.w	r3, r7, #20
 800a224:	4611      	mov	r1, r2
 800a226:	4618      	mov	r0, r3
 800a228:	f001 fa04 	bl	800b634 <xTaskCheckForTimeOut>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d124      	bne.n	800a27c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a234:	f000 fc33 	bl	800aa9e <prvIsQueueFull>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d018      	beq.n	800a270 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a240:	3310      	adds	r3, #16
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	4611      	mov	r1, r2
 800a246:	4618      	mov	r0, r3
 800a248:	f001 f92e 	bl	800b4a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a24c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a24e:	f000 fbbe 	bl	800a9ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a252:	f000 ff57 	bl	800b104 <xTaskResumeAll>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f47f af7c 	bne.w	800a156 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a25e:	4b0c      	ldr	r3, [pc, #48]	; (800a290 <xQueueGenericSend+0x1f0>)
 800a260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	e772      	b.n	800a156 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a272:	f000 fbac 	bl	800a9ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a276:	f000 ff45 	bl	800b104 <xTaskResumeAll>
 800a27a:	e76c      	b.n	800a156 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a27c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a27e:	f000 fba6 	bl	800a9ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a282:	f000 ff3f 	bl	800b104 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a286:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3738      	adds	r7, #56	; 0x38
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	e000ed04 	.word	0xe000ed04

0800a294 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08e      	sub	sp, #56	; 0x38
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d109      	bne.n	800a2c0 <xQueueGenericSendFromISR+0x2c>
 800a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a2be:	e7fe      	b.n	800a2be <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d103      	bne.n	800a2ce <xQueueGenericSendFromISR+0x3a>
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <xQueueGenericSendFromISR+0x3e>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e000      	b.n	800a2d4 <xQueueGenericSendFromISR+0x40>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d109      	bne.n	800a2ec <xQueueGenericSendFromISR+0x58>
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	623b      	str	r3, [r7, #32]
 800a2ea:	e7fe      	b.n	800a2ea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d103      	bne.n	800a2fa <xQueueGenericSendFromISR+0x66>
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d101      	bne.n	800a2fe <xQueueGenericSendFromISR+0x6a>
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e000      	b.n	800a300 <xQueueGenericSendFromISR+0x6c>
 800a2fe:	2300      	movs	r3, #0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d109      	bne.n	800a318 <xQueueGenericSendFromISR+0x84>
 800a304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	61fb      	str	r3, [r7, #28]
 800a316:	e7fe      	b.n	800a316 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a318:	f002 f9fc 	bl	800c714 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a31c:	f3ef 8211 	mrs	r2, BASEPRI
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	61ba      	str	r2, [r7, #24]
 800a332:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a334:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a336:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a340:	429a      	cmp	r2, r3
 800a342:	d302      	bcc.n	800a34a <xQueueGenericSendFromISR+0xb6>
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2b02      	cmp	r3, #2
 800a348:	d12c      	bne.n	800a3a4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	68b9      	ldr	r1, [r7, #8]
 800a358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a35a:	f000 faa8 	bl	800a8ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a35e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a366:	d112      	bne.n	800a38e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d016      	beq.n	800a39e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	3324      	adds	r3, #36	; 0x24
 800a374:	4618      	mov	r0, r3
 800a376:	f001 f8e5 	bl	800b544 <xTaskRemoveFromEventList>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00e      	beq.n	800a39e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00b      	beq.n	800a39e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	e007      	b.n	800a39e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a38e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a392:	3301      	adds	r3, #1
 800a394:	b2db      	uxtb	r3, r3
 800a396:	b25a      	sxtb	r2, r3
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a3a2:	e001      	b.n	800a3a8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3aa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3738      	adds	r7, #56	; 0x38
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b08c      	sub	sp, #48	; 0x30
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d109      	bne.n	800a3ea <xQueueReceive+0x2e>
	__asm volatile
 800a3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	623b      	str	r3, [r7, #32]
 800a3e8:	e7fe      	b.n	800a3e8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d103      	bne.n	800a3f8 <xQueueReceive+0x3c>
 800a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <xQueueReceive+0x40>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e000      	b.n	800a3fe <xQueueReceive+0x42>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d109      	bne.n	800a416 <xQueueReceive+0x5a>
 800a402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	61fb      	str	r3, [r7, #28]
 800a414:	e7fe      	b.n	800a414 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a416:	f001 fa5b 	bl	800b8d0 <xTaskGetSchedulerState>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d102      	bne.n	800a426 <xQueueReceive+0x6a>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d101      	bne.n	800a42a <xQueueReceive+0x6e>
 800a426:	2301      	movs	r3, #1
 800a428:	e000      	b.n	800a42c <xQueueReceive+0x70>
 800a42a:	2300      	movs	r3, #0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d109      	bne.n	800a444 <xQueueReceive+0x88>
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	61bb      	str	r3, [r7, #24]
 800a442:	e7fe      	b.n	800a442 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a444:	f002 f88a 	bl	800c55c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a450:	2b00      	cmp	r3, #0
 800a452:	d01f      	beq.n	800a494 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a454:	68b9      	ldr	r1, [r7, #8]
 800a456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a458:	f000 fa93 	bl	800a982 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45e:	1e5a      	subs	r2, r3, #1
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00f      	beq.n	800a48c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	3310      	adds	r3, #16
 800a470:	4618      	mov	r0, r3
 800a472:	f001 f867 	bl	800b544 <xTaskRemoveFromEventList>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d007      	beq.n	800a48c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a47c:	4b3c      	ldr	r3, [pc, #240]	; (800a570 <xQueueReceive+0x1b4>)
 800a47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a48c:	f002 f894 	bl	800c5b8 <vPortExitCritical>
				return pdPASS;
 800a490:	2301      	movs	r3, #1
 800a492:	e069      	b.n	800a568 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d103      	bne.n	800a4a2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a49a:	f002 f88d 	bl	800c5b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	e062      	b.n	800a568 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d106      	bne.n	800a4b6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4a8:	f107 0310 	add.w	r3, r7, #16
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f001 f8ab 	bl	800b608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4b6:	f002 f87f 	bl	800c5b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4ba:	f000 fe15 	bl	800b0e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4be:	f002 f84d 	bl	800c55c <vPortEnterCritical>
 800a4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4c8:	b25b      	sxtb	r3, r3
 800a4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ce:	d103      	bne.n	800a4d8 <xQueueReceive+0x11c>
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4de:	b25b      	sxtb	r3, r3
 800a4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e4:	d103      	bne.n	800a4ee <xQueueReceive+0x132>
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4ee:	f002 f863 	bl	800c5b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4f2:	1d3a      	adds	r2, r7, #4
 800a4f4:	f107 0310 	add.w	r3, r7, #16
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f001 f89a 	bl	800b634 <xTaskCheckForTimeOut>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d123      	bne.n	800a54e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a508:	f000 fab3 	bl	800aa72 <prvIsQueueEmpty>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d017      	beq.n	800a542 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a514:	3324      	adds	r3, #36	; 0x24
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	4611      	mov	r1, r2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 ffc4 	bl	800b4a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a522:	f000 fa54 	bl	800a9ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a526:	f000 fded 	bl	800b104 <xTaskResumeAll>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d189      	bne.n	800a444 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a530:	4b0f      	ldr	r3, [pc, #60]	; (800a570 <xQueueReceive+0x1b4>)
 800a532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a536:	601a      	str	r2, [r3, #0]
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	e780      	b.n	800a444 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a544:	f000 fa43 	bl	800a9ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a548:	f000 fddc 	bl	800b104 <xTaskResumeAll>
 800a54c:	e77a      	b.n	800a444 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a54e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a550:	f000 fa3d 	bl	800a9ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a554:	f000 fdd6 	bl	800b104 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a55a:	f000 fa8a 	bl	800aa72 <prvIsQueueEmpty>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	f43f af6f 	beq.w	800a444 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a566:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3730      	adds	r7, #48	; 0x30
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	e000ed04 	.word	0xe000ed04

0800a574 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b08e      	sub	sp, #56	; 0x38
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a57e:	2300      	movs	r3, #0
 800a580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a586:	2300      	movs	r3, #0
 800a588:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d109      	bne.n	800a5a4 <xQueueSemaphoreTake+0x30>
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	623b      	str	r3, [r7, #32]
 800a5a2:	e7fe      	b.n	800a5a2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d009      	beq.n	800a5c0 <xQueueSemaphoreTake+0x4c>
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	61fb      	str	r3, [r7, #28]
 800a5be:	e7fe      	b.n	800a5be <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5c0:	f001 f986 	bl	800b8d0 <xTaskGetSchedulerState>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d102      	bne.n	800a5d0 <xQueueSemaphoreTake+0x5c>
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <xQueueSemaphoreTake+0x60>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e000      	b.n	800a5d6 <xQueueSemaphoreTake+0x62>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d109      	bne.n	800a5ee <xQueueSemaphoreTake+0x7a>
 800a5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	61bb      	str	r3, [r7, #24]
 800a5ec:	e7fe      	b.n	800a5ec <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5ee:	f001 ffb5 	bl	800c55c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d024      	beq.n	800a648 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a600:	1e5a      	subs	r2, r3, #1
 800a602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a604:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d104      	bne.n	800a618 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a60e:	f001 fad1 	bl	800bbb4 <pvTaskIncrementMutexHeldCount>
 800a612:	4602      	mov	r2, r0
 800a614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a616:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00f      	beq.n	800a640 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a622:	3310      	adds	r3, #16
 800a624:	4618      	mov	r0, r3
 800a626:	f000 ff8d 	bl	800b544 <xTaskRemoveFromEventList>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d007      	beq.n	800a640 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a630:	4b53      	ldr	r3, [pc, #332]	; (800a780 <xQueueSemaphoreTake+0x20c>)
 800a632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a636:	601a      	str	r2, [r3, #0]
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a640:	f001 ffba 	bl	800c5b8 <vPortExitCritical>
				return pdPASS;
 800a644:	2301      	movs	r3, #1
 800a646:	e096      	b.n	800a776 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d110      	bne.n	800a670 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a650:	2b00      	cmp	r3, #0
 800a652:	d009      	beq.n	800a668 <xQueueSemaphoreTake+0xf4>
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	617b      	str	r3, [r7, #20]
 800a666:	e7fe      	b.n	800a666 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a668:	f001 ffa6 	bl	800c5b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a66c:	2300      	movs	r3, #0
 800a66e:	e082      	b.n	800a776 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a672:	2b00      	cmp	r3, #0
 800a674:	d106      	bne.n	800a684 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a676:	f107 030c 	add.w	r3, r7, #12
 800a67a:	4618      	mov	r0, r3
 800a67c:	f000 ffc4 	bl	800b608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a680:	2301      	movs	r3, #1
 800a682:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a684:	f001 ff98 	bl	800c5b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a688:	f000 fd2e 	bl	800b0e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a68c:	f001 ff66 	bl	800c55c <vPortEnterCritical>
 800a690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a696:	b25b      	sxtb	r3, r3
 800a698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a69c:	d103      	bne.n	800a6a6 <xQueueSemaphoreTake+0x132>
 800a69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6ac:	b25b      	sxtb	r3, r3
 800a6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b2:	d103      	bne.n	800a6bc <xQueueSemaphoreTake+0x148>
 800a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6bc:	f001 ff7c 	bl	800c5b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6c0:	463a      	mov	r2, r7
 800a6c2:	f107 030c 	add.w	r3, r7, #12
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 ffb3 	bl	800b634 <xTaskCheckForTimeOut>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d132      	bne.n	800a73a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6d6:	f000 f9cc 	bl	800aa72 <prvIsQueueEmpty>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d026      	beq.n	800a72e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d109      	bne.n	800a6fc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800a6e8:	f001 ff38 	bl	800c55c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f001 f90b 	bl	800b90c <xTaskPriorityInherit>
 800a6f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a6f8:	f001 ff5e 	bl	800c5b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fe:	3324      	adds	r3, #36	; 0x24
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	4611      	mov	r1, r2
 800a704:	4618      	mov	r0, r3
 800a706:	f000 fecf 	bl	800b4a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a70a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a70c:	f000 f95f 	bl	800a9ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a710:	f000 fcf8 	bl	800b104 <xTaskResumeAll>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	f47f af69 	bne.w	800a5ee <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800a71c:	4b18      	ldr	r3, [pc, #96]	; (800a780 <xQueueSemaphoreTake+0x20c>)
 800a71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	e75f      	b.n	800a5ee <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a72e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a730:	f000 f94d 	bl	800a9ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a734:	f000 fce6 	bl	800b104 <xTaskResumeAll>
 800a738:	e759      	b.n	800a5ee <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a73a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a73c:	f000 f947 	bl	800a9ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a740:	f000 fce0 	bl	800b104 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a746:	f000 f994 	bl	800aa72 <prvIsQueueEmpty>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f43f af4e 	beq.w	800a5ee <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00d      	beq.n	800a774 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800a758:	f001 ff00 	bl	800c55c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a75c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a75e:	f000 f88e 	bl	800a87e <prvGetDisinheritPriorityAfterTimeout>
 800a762:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a76a:	4618      	mov	r0, r3
 800a76c:	f001 f9a2 	bl	800bab4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a770:	f001 ff22 	bl	800c5b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a774:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a776:	4618      	mov	r0, r3
 800a778:	3738      	adds	r7, #56	; 0x38
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	e000ed04 	.word	0xe000ed04

0800a784 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b08e      	sub	sp, #56	; 0x38
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a796:	2b00      	cmp	r3, #0
 800a798:	d109      	bne.n	800a7ae <xQueueReceiveFromISR+0x2a>
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	f383 8811 	msr	BASEPRI, r3
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	623b      	str	r3, [r7, #32]
 800a7ac:	e7fe      	b.n	800a7ac <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d103      	bne.n	800a7bc <xQueueReceiveFromISR+0x38>
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <xQueueReceiveFromISR+0x3c>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e000      	b.n	800a7c2 <xQueueReceiveFromISR+0x3e>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d109      	bne.n	800a7da <xQueueReceiveFromISR+0x56>
 800a7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ca:	f383 8811 	msr	BASEPRI, r3
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	61fb      	str	r3, [r7, #28]
 800a7d8:	e7fe      	b.n	800a7d8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7da:	f001 ff9b 	bl	800c714 <vPortValidateInterruptPriority>
	__asm volatile
 800a7de:	f3ef 8211 	mrs	r2, BASEPRI
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	61ba      	str	r2, [r7, #24]
 800a7f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a7f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	2b00      	cmp	r3, #0
 800a804:	d02f      	beq.n	800a866 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a80c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a810:	68b9      	ldr	r1, [r7, #8]
 800a812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a814:	f000 f8b5 	bl	800a982 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81a:	1e5a      	subs	r2, r3, #1
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a820:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a828:	d112      	bne.n	800a850 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d016      	beq.n	800a860 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	3310      	adds	r3, #16
 800a836:	4618      	mov	r0, r3
 800a838:	f000 fe84 	bl	800b544 <xTaskRemoveFromEventList>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00e      	beq.n	800a860 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00b      	beq.n	800a860 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	e007      	b.n	800a860 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a854:	3301      	adds	r3, #1
 800a856:	b2db      	uxtb	r3, r3
 800a858:	b25a      	sxtb	r2, r3
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a860:	2301      	movs	r3, #1
 800a862:	637b      	str	r3, [r7, #52]	; 0x34
 800a864:	e001      	b.n	800a86a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a866:	2300      	movs	r3, #0
 800a868:	637b      	str	r3, [r7, #52]	; 0x34
 800a86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a876:	4618      	mov	r0, r3
 800a878:	3738      	adds	r7, #56	; 0x38
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a87e:	b480      	push	{r7}
 800a880:	b085      	sub	sp, #20
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d006      	beq.n	800a89c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a898:	60fb      	str	r3, [r7, #12]
 800a89a:	e001      	b.n	800a8a0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a89c:	2300      	movs	r3, #0
 800a89e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
	}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b086      	sub	sp, #24
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	60f8      	str	r0, [r7, #12]
 800a8b6:	60b9      	str	r1, [r7, #8]
 800a8b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10d      	bne.n	800a8e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d14d      	bne.n	800a970 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f001 f87f 	bl	800b9dc <xTaskPriorityDisinherit>
 800a8de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	609a      	str	r2, [r3, #8]
 800a8e6:	e043      	b.n	800a970 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d119      	bne.n	800a922 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6858      	ldr	r0, [r3, #4]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	f002 feb5 	bl	800d668 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	685a      	ldr	r2, [r3, #4]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a906:	441a      	add	r2, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	429a      	cmp	r2, r3
 800a916:	d32b      	bcc.n	800a970 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	605a      	str	r2, [r3, #4]
 800a920:	e026      	b.n	800a970 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	68d8      	ldr	r0, [r3, #12]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92a:	461a      	mov	r2, r3
 800a92c:	68b9      	ldr	r1, [r7, #8]
 800a92e:	f002 fe9b 	bl	800d668 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a93a:	425b      	negs	r3, r3
 800a93c:	441a      	add	r2, r3
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	68da      	ldr	r2, [r3, #12]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d207      	bcs.n	800a95e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	689a      	ldr	r2, [r3, #8]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a956:	425b      	negs	r3, r3
 800a958:	441a      	add	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b02      	cmp	r3, #2
 800a962:	d105      	bne.n	800a970 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d002      	beq.n	800a970 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	1c5a      	adds	r2, r3, #1
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a978:	697b      	ldr	r3, [r7, #20]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a990:	2b00      	cmp	r3, #0
 800a992:	d018      	beq.n	800a9c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68da      	ldr	r2, [r3, #12]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99c:	441a      	add	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68da      	ldr	r2, [r3, #12]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d303      	bcc.n	800a9b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	68d9      	ldr	r1, [r3, #12]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9be:	461a      	mov	r2, r3
 800a9c0:	6838      	ldr	r0, [r7, #0]
 800a9c2:	f002 fe51 	bl	800d668 <memcpy>
	}
}
 800a9c6:	bf00      	nop
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b084      	sub	sp, #16
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a9d6:	f001 fdc1 	bl	800c55c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9e2:	e011      	b.n	800aa08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d012      	beq.n	800aa12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	3324      	adds	r3, #36	; 0x24
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 fda7 	bl	800b544 <xTaskRemoveFromEventList>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d001      	beq.n	800aa00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9fc:	f000 fe7a 	bl	800b6f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
 800aa02:	3b01      	subs	r3, #1
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	dce9      	bgt.n	800a9e4 <prvUnlockQueue+0x16>
 800aa10:	e000      	b.n	800aa14 <prvUnlockQueue+0x46>
					break;
 800aa12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	22ff      	movs	r2, #255	; 0xff
 800aa18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aa1c:	f001 fdcc 	bl	800c5b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa20:	f001 fd9c 	bl	800c55c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa2c:	e011      	b.n	800aa52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d012      	beq.n	800aa5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	3310      	adds	r3, #16
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 fd82 	bl	800b544 <xTaskRemoveFromEventList>
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d001      	beq.n	800aa4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa46:	f000 fe55 	bl	800b6f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	dce9      	bgt.n	800aa2e <prvUnlockQueue+0x60>
 800aa5a:	e000      	b.n	800aa5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	22ff      	movs	r2, #255	; 0xff
 800aa62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa66:	f001 fda7 	bl	800c5b8 <vPortExitCritical>
}
 800aa6a:	bf00      	nop
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa7a:	f001 fd6f 	bl	800c55c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d102      	bne.n	800aa8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa86:	2301      	movs	r3, #1
 800aa88:	60fb      	str	r3, [r7, #12]
 800aa8a:	e001      	b.n	800aa90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa90:	f001 fd92 	bl	800c5b8 <vPortExitCritical>

	return xReturn;
 800aa94:	68fb      	ldr	r3, [r7, #12]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aaa6:	f001 fd59 	bl	800c55c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d102      	bne.n	800aabc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aab6:	2301      	movs	r3, #1
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	e001      	b.n	800aac0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aabc:	2300      	movs	r3, #0
 800aabe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aac0:	f001 fd7a 	bl	800c5b8 <vPortExitCritical>

	return xReturn;
 800aac4:	68fb      	ldr	r3, [r7, #12]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
	...

0800aad0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aada:	2300      	movs	r3, #0
 800aadc:	60fb      	str	r3, [r7, #12]
 800aade:	e014      	b.n	800ab0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aae0:	4a0e      	ldr	r2, [pc, #56]	; (800ab1c <vQueueAddToRegistry+0x4c>)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10b      	bne.n	800ab04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aaec:	490b      	ldr	r1, [pc, #44]	; (800ab1c <vQueueAddToRegistry+0x4c>)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aaf6:	4a09      	ldr	r2, [pc, #36]	; (800ab1c <vQueueAddToRegistry+0x4c>)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	00db      	lsls	r3, r3, #3
 800aafc:	4413      	add	r3, r2
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab02:	e005      	b.n	800ab10 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	3301      	adds	r3, #1
 800ab08:	60fb      	str	r3, [r7, #12]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2b07      	cmp	r3, #7
 800ab0e:	d9e7      	bls.n	800aae0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab10:	bf00      	nop
 800ab12:	3714      	adds	r7, #20
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	2000c150 	.word	0x2000c150

0800ab20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab30:	f001 fd14 	bl	800c55c <vPortEnterCritical>
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab3a:	b25b      	sxtb	r3, r3
 800ab3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab40:	d103      	bne.n	800ab4a <vQueueWaitForMessageRestricted+0x2a>
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab50:	b25b      	sxtb	r3, r3
 800ab52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab56:	d103      	bne.n	800ab60 <vQueueWaitForMessageRestricted+0x40>
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab60:	f001 fd2a 	bl	800c5b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d106      	bne.n	800ab7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	3324      	adds	r3, #36	; 0x24
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	68b9      	ldr	r1, [r7, #8]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 fcbb 	bl	800b4f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab7a:	6978      	ldr	r0, [r7, #20]
 800ab7c:	f7ff ff27 	bl	800a9ce <prvUnlockQueue>
	}
 800ab80:	bf00      	nop
 800ab82:	3718      	adds	r7, #24
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b08e      	sub	sp, #56	; 0x38
 800ab8c:	af04      	add	r7, sp, #16
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d109      	bne.n	800abb0 <xTaskCreateStatic+0x28>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	623b      	str	r3, [r7, #32]
 800abae:	e7fe      	b.n	800abae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800abb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d109      	bne.n	800abca <xTaskCreateStatic+0x42>
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	61fb      	str	r3, [r7, #28]
 800abc8:	e7fe      	b.n	800abc8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abca:	235c      	movs	r3, #92	; 0x5c
 800abcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	2b5c      	cmp	r3, #92	; 0x5c
 800abd2:	d009      	beq.n	800abe8 <xTaskCreateStatic+0x60>
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	61bb      	str	r3, [r7, #24]
 800abe6:	e7fe      	b.n	800abe6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800abe8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800abea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abec:	2b00      	cmp	r3, #0
 800abee:	d01e      	beq.n	800ac2e <xTaskCreateStatic+0xa6>
 800abf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d01b      	beq.n	800ac2e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abfe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac08:	2300      	movs	r3, #0
 800ac0a:	9303      	str	r3, [sp, #12]
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	9302      	str	r3, [sp, #8]
 800ac10:	f107 0314 	add.w	r3, r7, #20
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	68b9      	ldr	r1, [r7, #8]
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f000 f850 	bl	800acc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac28:	f000 f8dc 	bl	800ade4 <prvAddNewTaskToReadyList>
 800ac2c:	e001      	b.n	800ac32 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac32:	697b      	ldr	r3, [r7, #20]
	}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3728      	adds	r7, #40	; 0x28
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b08c      	sub	sp, #48	; 0x30
 800ac40:	af04      	add	r7, sp, #16
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	603b      	str	r3, [r7, #0]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac4c:	88fb      	ldrh	r3, [r7, #6]
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4618      	mov	r0, r3
 800ac52:	f001 fd9d 	bl	800c790 <pvPortMalloc>
 800ac56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00e      	beq.n	800ac7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac5e:	205c      	movs	r0, #92	; 0x5c
 800ac60:	f001 fd96 	bl	800c790 <pvPortMalloc>
 800ac64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d003      	beq.n	800ac74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	631a      	str	r2, [r3, #48]	; 0x30
 800ac72:	e005      	b.n	800ac80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac74:	6978      	ldr	r0, [r7, #20]
 800ac76:	f001 fe4d 	bl	800c914 <vPortFree>
 800ac7a:	e001      	b.n	800ac80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d017      	beq.n	800acb6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac8e:	88fa      	ldrh	r2, [r7, #6]
 800ac90:	2300      	movs	r3, #0
 800ac92:	9303      	str	r3, [sp, #12]
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	9302      	str	r3, [sp, #8]
 800ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9a:	9301      	str	r3, [sp, #4]
 800ac9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	68b9      	ldr	r1, [r7, #8]
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f000 f80e 	bl	800acc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acaa:	69f8      	ldr	r0, [r7, #28]
 800acac:	f000 f89a 	bl	800ade4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800acb0:	2301      	movs	r3, #1
 800acb2:	61bb      	str	r3, [r7, #24]
 800acb4:	e002      	b.n	800acbc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800acb6:	f04f 33ff 	mov.w	r3, #4294967295
 800acba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800acbc:	69bb      	ldr	r3, [r7, #24]
	}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3720      	adds	r7, #32
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b088      	sub	sp, #32
 800acca:	af00      	add	r7, sp, #0
 800accc:	60f8      	str	r0, [r7, #12]
 800acce:	60b9      	str	r1, [r7, #8]
 800acd0:	607a      	str	r2, [r7, #4]
 800acd2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	461a      	mov	r2, r3
 800acde:	21a5      	movs	r1, #165	; 0xa5
 800ace0:	f002 fccd 	bl	800d67e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ace4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800acee:	3b01      	subs	r3, #1
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	f023 0307 	bic.w	r3, r3, #7
 800acfc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	f003 0307 	and.w	r3, r3, #7
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d009      	beq.n	800ad1c <prvInitialiseNewTask+0x56>
 800ad08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	617b      	str	r3, [r7, #20]
 800ad1a:	e7fe      	b.n	800ad1a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d01f      	beq.n	800ad62 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad22:	2300      	movs	r3, #0
 800ad24:	61fb      	str	r3, [r7, #28]
 800ad26:	e012      	b.n	800ad4e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	7819      	ldrb	r1, [r3, #0]
 800ad30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	4413      	add	r3, r2
 800ad36:	3334      	adds	r3, #52	; 0x34
 800ad38:	460a      	mov	r2, r1
 800ad3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	4413      	add	r3, r2
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d006      	beq.n	800ad56 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	61fb      	str	r3, [r7, #28]
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	2b0f      	cmp	r3, #15
 800ad52:	d9e9      	bls.n	800ad28 <prvInitialiseNewTask+0x62>
 800ad54:	e000      	b.n	800ad58 <prvInitialiseNewTask+0x92>
			{
				break;
 800ad56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad60:	e003      	b.n	800ad6a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6c:	2b37      	cmp	r3, #55	; 0x37
 800ad6e:	d901      	bls.n	800ad74 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad70:	2337      	movs	r3, #55	; 0x37
 800ad72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad82:	2200      	movs	r2, #0
 800ad84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad88:	3304      	adds	r3, #4
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fe ff02 	bl	8009b94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	3318      	adds	r3, #24
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fe fefd 	bl	8009b94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800adaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb2:	2200      	movs	r2, #0
 800adb4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	68f9      	ldr	r1, [r7, #12]
 800adc2:	69b8      	ldr	r0, [r7, #24]
 800adc4:	f001 faa4 	bl	800c310 <pxPortInitialiseStack>
 800adc8:	4602      	mov	r2, r0
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800adce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800add4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800add8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adda:	bf00      	nop
 800addc:	3720      	adds	r7, #32
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
	...

0800ade4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800adec:	f001 fbb6 	bl	800c55c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800adf0:	4b2d      	ldr	r3, [pc, #180]	; (800aea8 <prvAddNewTaskToReadyList+0xc4>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	3301      	adds	r3, #1
 800adf6:	4a2c      	ldr	r2, [pc, #176]	; (800aea8 <prvAddNewTaskToReadyList+0xc4>)
 800adf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800adfa:	4b2c      	ldr	r3, [pc, #176]	; (800aeac <prvAddNewTaskToReadyList+0xc8>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d109      	bne.n	800ae16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae02:	4a2a      	ldr	r2, [pc, #168]	; (800aeac <prvAddNewTaskToReadyList+0xc8>)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae08:	4b27      	ldr	r3, [pc, #156]	; (800aea8 <prvAddNewTaskToReadyList+0xc4>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d110      	bne.n	800ae32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae10:	f000 fc94 	bl	800b73c <prvInitialiseTaskLists>
 800ae14:	e00d      	b.n	800ae32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae16:	4b26      	ldr	r3, [pc, #152]	; (800aeb0 <prvAddNewTaskToReadyList+0xcc>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d109      	bne.n	800ae32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae1e:	4b23      	ldr	r3, [pc, #140]	; (800aeac <prvAddNewTaskToReadyList+0xc8>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d802      	bhi.n	800ae32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae2c:	4a1f      	ldr	r2, [pc, #124]	; (800aeac <prvAddNewTaskToReadyList+0xc8>)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae32:	4b20      	ldr	r3, [pc, #128]	; (800aeb4 <prvAddNewTaskToReadyList+0xd0>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	3301      	adds	r3, #1
 800ae38:	4a1e      	ldr	r2, [pc, #120]	; (800aeb4 <prvAddNewTaskToReadyList+0xd0>)
 800ae3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae3c:	4b1d      	ldr	r3, [pc, #116]	; (800aeb4 <prvAddNewTaskToReadyList+0xd0>)
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae48:	4b1b      	ldr	r3, [pc, #108]	; (800aeb8 <prvAddNewTaskToReadyList+0xd4>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d903      	bls.n	800ae58 <prvAddNewTaskToReadyList+0x74>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae54:	4a18      	ldr	r2, [pc, #96]	; (800aeb8 <prvAddNewTaskToReadyList+0xd4>)
 800ae56:	6013      	str	r3, [r2, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4a15      	ldr	r2, [pc, #84]	; (800aebc <prvAddNewTaskToReadyList+0xd8>)
 800ae66:	441a      	add	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	3304      	adds	r3, #4
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4610      	mov	r0, r2
 800ae70:	f7fe fe9d 	bl	8009bae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae74:	f001 fba0 	bl	800c5b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae78:	4b0d      	ldr	r3, [pc, #52]	; (800aeb0 <prvAddNewTaskToReadyList+0xcc>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00e      	beq.n	800ae9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae80:	4b0a      	ldr	r3, [pc, #40]	; (800aeac <prvAddNewTaskToReadyList+0xc8>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d207      	bcs.n	800ae9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae8e:	4b0c      	ldr	r3, [pc, #48]	; (800aec0 <prvAddNewTaskToReadyList+0xdc>)
 800ae90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae9e:	bf00      	nop
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20000e08 	.word	0x20000e08
 800aeac:	20000934 	.word	0x20000934
 800aeb0:	20000e14 	.word	0x20000e14
 800aeb4:	20000e24 	.word	0x20000e24
 800aeb8:	20000e10 	.word	0x20000e10
 800aebc:	20000938 	.word	0x20000938
 800aec0:	e000ed04 	.word	0xe000ed04

0800aec4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b08a      	sub	sp, #40	; 0x28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800aece:	2300      	movs	r3, #0
 800aed0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d109      	bne.n	800aeec <vTaskDelayUntil+0x28>
 800aed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	617b      	str	r3, [r7, #20]
 800aeea:	e7fe      	b.n	800aeea <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d109      	bne.n	800af06 <vTaskDelayUntil+0x42>
 800aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	613b      	str	r3, [r7, #16]
 800af04:	e7fe      	b.n	800af04 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800af06:	4b29      	ldr	r3, [pc, #164]	; (800afac <vTaskDelayUntil+0xe8>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d009      	beq.n	800af22 <vTaskDelayUntil+0x5e>
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	60fb      	str	r3, [r7, #12]
 800af20:	e7fe      	b.n	800af20 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800af22:	f000 f8e1 	bl	800b0e8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800af26:	4b22      	ldr	r3, [pc, #136]	; (800afb0 <vTaskDelayUntil+0xec>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	4413      	add	r3, r2
 800af34:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	6a3a      	ldr	r2, [r7, #32]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d20b      	bcs.n	800af58 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	69fa      	ldr	r2, [r7, #28]
 800af46:	429a      	cmp	r2, r3
 800af48:	d211      	bcs.n	800af6e <vTaskDelayUntil+0xaa>
 800af4a:	69fa      	ldr	r2, [r7, #28]
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d90d      	bls.n	800af6e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800af52:	2301      	movs	r3, #1
 800af54:	627b      	str	r3, [r7, #36]	; 0x24
 800af56:	e00a      	b.n	800af6e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	69fa      	ldr	r2, [r7, #28]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d303      	bcc.n	800af6a <vTaskDelayUntil+0xa6>
 800af62:	69fa      	ldr	r2, [r7, #28]
 800af64:	6a3b      	ldr	r3, [r7, #32]
 800af66:	429a      	cmp	r2, r3
 800af68:	d901      	bls.n	800af6e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800af6a:	2301      	movs	r3, #1
 800af6c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	69fa      	ldr	r2, [r7, #28]
 800af72:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	2b00      	cmp	r3, #0
 800af78:	d006      	beq.n	800af88 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800af7a:	69fa      	ldr	r2, [r7, #28]
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	1ad3      	subs	r3, r2, r3
 800af80:	2100      	movs	r1, #0
 800af82:	4618      	mov	r0, r3
 800af84:	f000 fe2a 	bl	800bbdc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800af88:	f000 f8bc 	bl	800b104 <xTaskResumeAll>
 800af8c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d107      	bne.n	800afa4 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800af94:	4b07      	ldr	r3, [pc, #28]	; (800afb4 <vTaskDelayUntil+0xf0>)
 800af96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af9a:	601a      	str	r2, [r3, #0]
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afa4:	bf00      	nop
 800afa6:	3728      	adds	r7, #40	; 0x28
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	20000e30 	.word	0x20000e30
 800afb0:	20000e0c 	.word	0x20000e0c
 800afb4:	e000ed04 	.word	0xe000ed04

0800afb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800afc0:	2300      	movs	r3, #0
 800afc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d016      	beq.n	800aff8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800afca:	4b13      	ldr	r3, [pc, #76]	; (800b018 <vTaskDelay+0x60>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d009      	beq.n	800afe6 <vTaskDelay+0x2e>
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	60bb      	str	r3, [r7, #8]
 800afe4:	e7fe      	b.n	800afe4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800afe6:	f000 f87f 	bl	800b0e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afea:	2100      	movs	r1, #0
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 fdf5 	bl	800bbdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aff2:	f000 f887 	bl	800b104 <xTaskResumeAll>
 800aff6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d107      	bne.n	800b00e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800affe:	4b07      	ldr	r3, [pc, #28]	; (800b01c <vTaskDelay+0x64>)
 800b000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b004:	601a      	str	r2, [r3, #0]
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b00e:	bf00      	nop
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	20000e30 	.word	0x20000e30
 800b01c:	e000ed04 	.word	0xe000ed04

0800b020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b08a      	sub	sp, #40	; 0x28
 800b024:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b026:	2300      	movs	r3, #0
 800b028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b02a:	2300      	movs	r3, #0
 800b02c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b02e:	463a      	mov	r2, r7
 800b030:	1d39      	adds	r1, r7, #4
 800b032:	f107 0308 	add.w	r3, r7, #8
 800b036:	4618      	mov	r0, r3
 800b038:	f7fe fd58 	bl	8009aec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	9202      	str	r2, [sp, #8]
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	2300      	movs	r3, #0
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	2300      	movs	r3, #0
 800b04c:	460a      	mov	r2, r1
 800b04e:	4920      	ldr	r1, [pc, #128]	; (800b0d0 <vTaskStartScheduler+0xb0>)
 800b050:	4820      	ldr	r0, [pc, #128]	; (800b0d4 <vTaskStartScheduler+0xb4>)
 800b052:	f7ff fd99 	bl	800ab88 <xTaskCreateStatic>
 800b056:	4602      	mov	r2, r0
 800b058:	4b1f      	ldr	r3, [pc, #124]	; (800b0d8 <vTaskStartScheduler+0xb8>)
 800b05a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b05c:	4b1e      	ldr	r3, [pc, #120]	; (800b0d8 <vTaskStartScheduler+0xb8>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b064:	2301      	movs	r3, #1
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e001      	b.n	800b06e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d102      	bne.n	800b07a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b074:	f000 fe06 	bl	800bc84 <xTimerCreateTimerTask>
 800b078:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d115      	bne.n	800b0ac <vTaskStartScheduler+0x8c>
 800b080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b092:	4b12      	ldr	r3, [pc, #72]	; (800b0dc <vTaskStartScheduler+0xbc>)
 800b094:	f04f 32ff 	mov.w	r2, #4294967295
 800b098:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b09a:	4b11      	ldr	r3, [pc, #68]	; (800b0e0 <vTaskStartScheduler+0xc0>)
 800b09c:	2201      	movs	r2, #1
 800b09e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0a0:	4b10      	ldr	r3, [pc, #64]	; (800b0e4 <vTaskStartScheduler+0xc4>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0a6:	f001 f9bb 	bl	800c420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b0aa:	e00d      	b.n	800b0c8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b2:	d109      	bne.n	800b0c8 <vTaskStartScheduler+0xa8>
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	60fb      	str	r3, [r7, #12]
 800b0c6:	e7fe      	b.n	800b0c6 <vTaskStartScheduler+0xa6>
}
 800b0c8:	bf00      	nop
 800b0ca:	3718      	adds	r7, #24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	0800d748 	.word	0x0800d748
 800b0d4:	0800b70d 	.word	0x0800b70d
 800b0d8:	20000e2c 	.word	0x20000e2c
 800b0dc:	20000e28 	.word	0x20000e28
 800b0e0:	20000e14 	.word	0x20000e14
 800b0e4:	20000e0c 	.word	0x20000e0c

0800b0e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b0ec:	4b04      	ldr	r3, [pc, #16]	; (800b100 <vTaskSuspendAll+0x18>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	4a03      	ldr	r2, [pc, #12]	; (800b100 <vTaskSuspendAll+0x18>)
 800b0f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b0f6:	bf00      	nop
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	20000e30 	.word	0x20000e30

0800b104 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b10a:	2300      	movs	r3, #0
 800b10c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b10e:	2300      	movs	r3, #0
 800b110:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b112:	4b41      	ldr	r3, [pc, #260]	; (800b218 <xTaskResumeAll+0x114>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d109      	bne.n	800b12e <xTaskResumeAll+0x2a>
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	603b      	str	r3, [r7, #0]
 800b12c:	e7fe      	b.n	800b12c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b12e:	f001 fa15 	bl	800c55c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b132:	4b39      	ldr	r3, [pc, #228]	; (800b218 <xTaskResumeAll+0x114>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3b01      	subs	r3, #1
 800b138:	4a37      	ldr	r2, [pc, #220]	; (800b218 <xTaskResumeAll+0x114>)
 800b13a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b13c:	4b36      	ldr	r3, [pc, #216]	; (800b218 <xTaskResumeAll+0x114>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d162      	bne.n	800b20a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b144:	4b35      	ldr	r3, [pc, #212]	; (800b21c <xTaskResumeAll+0x118>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d05e      	beq.n	800b20a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b14c:	e02f      	b.n	800b1ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b14e:	4b34      	ldr	r3, [pc, #208]	; (800b220 <xTaskResumeAll+0x11c>)
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3318      	adds	r3, #24
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fe fd84 	bl	8009c68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3304      	adds	r3, #4
 800b164:	4618      	mov	r0, r3
 800b166:	f7fe fd7f 	bl	8009c68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b16e:	4b2d      	ldr	r3, [pc, #180]	; (800b224 <xTaskResumeAll+0x120>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	429a      	cmp	r2, r3
 800b174:	d903      	bls.n	800b17e <xTaskResumeAll+0x7a>
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17a:	4a2a      	ldr	r2, [pc, #168]	; (800b224 <xTaskResumeAll+0x120>)
 800b17c:	6013      	str	r3, [r2, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b182:	4613      	mov	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4a27      	ldr	r2, [pc, #156]	; (800b228 <xTaskResumeAll+0x124>)
 800b18c:	441a      	add	r2, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3304      	adds	r3, #4
 800b192:	4619      	mov	r1, r3
 800b194:	4610      	mov	r0, r2
 800b196:	f7fe fd0a 	bl	8009bae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b19e:	4b23      	ldr	r3, [pc, #140]	; (800b22c <xTaskResumeAll+0x128>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d302      	bcc.n	800b1ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b1a8:	4b21      	ldr	r3, [pc, #132]	; (800b230 <xTaskResumeAll+0x12c>)
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1ae:	4b1c      	ldr	r3, [pc, #112]	; (800b220 <xTaskResumeAll+0x11c>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1cb      	bne.n	800b14e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b1bc:	f000 fb58 	bl	800b870 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b1c0:	4b1c      	ldr	r3, [pc, #112]	; (800b234 <xTaskResumeAll+0x130>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d010      	beq.n	800b1ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b1cc:	f000 f858 	bl	800b280 <xTaskIncrementTick>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d002      	beq.n	800b1dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b1d6:	4b16      	ldr	r3, [pc, #88]	; (800b230 <xTaskResumeAll+0x12c>)
 800b1d8:	2201      	movs	r2, #1
 800b1da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1f1      	bne.n	800b1cc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b1e8:	4b12      	ldr	r3, [pc, #72]	; (800b234 <xTaskResumeAll+0x130>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1ee:	4b10      	ldr	r3, [pc, #64]	; (800b230 <xTaskResumeAll+0x12c>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d009      	beq.n	800b20a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1fa:	4b0f      	ldr	r3, [pc, #60]	; (800b238 <xTaskResumeAll+0x134>)
 800b1fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b20a:	f001 f9d5 	bl	800c5b8 <vPortExitCritical>

	return xAlreadyYielded;
 800b20e:	68bb      	ldr	r3, [r7, #8]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	20000e30 	.word	0x20000e30
 800b21c:	20000e08 	.word	0x20000e08
 800b220:	20000dc8 	.word	0x20000dc8
 800b224:	20000e10 	.word	0x20000e10
 800b228:	20000938 	.word	0x20000938
 800b22c:	20000934 	.word	0x20000934
 800b230:	20000e1c 	.word	0x20000e1c
 800b234:	20000e18 	.word	0x20000e18
 800b238:	e000ed04 	.word	0xe000ed04

0800b23c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b242:	4b05      	ldr	r3, [pc, #20]	; (800b258 <xTaskGetTickCount+0x1c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b248:	687b      	ldr	r3, [r7, #4]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	370c      	adds	r7, #12
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	20000e0c 	.word	0x20000e0c

0800b25c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b262:	f001 fa57 	bl	800c714 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b266:	2300      	movs	r3, #0
 800b268:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b26a:	4b04      	ldr	r3, [pc, #16]	; (800b27c <xTaskGetTickCountFromISR+0x20>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b270:	683b      	ldr	r3, [r7, #0]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	20000e0c 	.word	0x20000e0c

0800b280 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b286:	2300      	movs	r3, #0
 800b288:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b28a:	4b4e      	ldr	r3, [pc, #312]	; (800b3c4 <xTaskIncrementTick+0x144>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f040 8088 	bne.w	800b3a4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b294:	4b4c      	ldr	r3, [pc, #304]	; (800b3c8 <xTaskIncrementTick+0x148>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3301      	adds	r3, #1
 800b29a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b29c:	4a4a      	ldr	r2, [pc, #296]	; (800b3c8 <xTaskIncrementTick+0x148>)
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d11f      	bne.n	800b2e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2a8:	4b48      	ldr	r3, [pc, #288]	; (800b3cc <xTaskIncrementTick+0x14c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d009      	beq.n	800b2c6 <xTaskIncrementTick+0x46>
 800b2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b6:	f383 8811 	msr	BASEPRI, r3
 800b2ba:	f3bf 8f6f 	isb	sy
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	603b      	str	r3, [r7, #0]
 800b2c4:	e7fe      	b.n	800b2c4 <xTaskIncrementTick+0x44>
 800b2c6:	4b41      	ldr	r3, [pc, #260]	; (800b3cc <xTaskIncrementTick+0x14c>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	4b40      	ldr	r3, [pc, #256]	; (800b3d0 <xTaskIncrementTick+0x150>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a3e      	ldr	r2, [pc, #248]	; (800b3cc <xTaskIncrementTick+0x14c>)
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	4a3e      	ldr	r2, [pc, #248]	; (800b3d0 <xTaskIncrementTick+0x150>)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6013      	str	r3, [r2, #0]
 800b2da:	4b3e      	ldr	r3, [pc, #248]	; (800b3d4 <xTaskIncrementTick+0x154>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	4a3c      	ldr	r2, [pc, #240]	; (800b3d4 <xTaskIncrementTick+0x154>)
 800b2e2:	6013      	str	r3, [r2, #0]
 800b2e4:	f000 fac4 	bl	800b870 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b2e8:	4b3b      	ldr	r3, [pc, #236]	; (800b3d8 <xTaskIncrementTick+0x158>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d349      	bcc.n	800b386 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2f2:	4b36      	ldr	r3, [pc, #216]	; (800b3cc <xTaskIncrementTick+0x14c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d104      	bne.n	800b306 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2fc:	4b36      	ldr	r3, [pc, #216]	; (800b3d8 <xTaskIncrementTick+0x158>)
 800b2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b302:	601a      	str	r2, [r3, #0]
					break;
 800b304:	e03f      	b.n	800b386 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b306:	4b31      	ldr	r3, [pc, #196]	; (800b3cc <xTaskIncrementTick+0x14c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b316:	693a      	ldr	r2, [r7, #16]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d203      	bcs.n	800b326 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b31e:	4a2e      	ldr	r2, [pc, #184]	; (800b3d8 <xTaskIncrementTick+0x158>)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b324:	e02f      	b.n	800b386 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	3304      	adds	r3, #4
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fe fc9c 	bl	8009c68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b334:	2b00      	cmp	r3, #0
 800b336:	d004      	beq.n	800b342 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	3318      	adds	r3, #24
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7fe fc93 	bl	8009c68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b346:	4b25      	ldr	r3, [pc, #148]	; (800b3dc <xTaskIncrementTick+0x15c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d903      	bls.n	800b356 <xTaskIncrementTick+0xd6>
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b352:	4a22      	ldr	r2, [pc, #136]	; (800b3dc <xTaskIncrementTick+0x15c>)
 800b354:	6013      	str	r3, [r2, #0]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b35a:	4613      	mov	r3, r2
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	4413      	add	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4a1f      	ldr	r2, [pc, #124]	; (800b3e0 <xTaskIncrementTick+0x160>)
 800b364:	441a      	add	r2, r3
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	3304      	adds	r3, #4
 800b36a:	4619      	mov	r1, r3
 800b36c:	4610      	mov	r0, r2
 800b36e:	f7fe fc1e 	bl	8009bae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b376:	4b1b      	ldr	r3, [pc, #108]	; (800b3e4 <xTaskIncrementTick+0x164>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d3b8      	bcc.n	800b2f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b380:	2301      	movs	r3, #1
 800b382:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b384:	e7b5      	b.n	800b2f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b386:	4b17      	ldr	r3, [pc, #92]	; (800b3e4 <xTaskIncrementTick+0x164>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38c:	4914      	ldr	r1, [pc, #80]	; (800b3e0 <xTaskIncrementTick+0x160>)
 800b38e:	4613      	mov	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	440b      	add	r3, r1
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d907      	bls.n	800b3ae <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	617b      	str	r3, [r7, #20]
 800b3a2:	e004      	b.n	800b3ae <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b3a4:	4b10      	ldr	r3, [pc, #64]	; (800b3e8 <xTaskIncrementTick+0x168>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	4a0f      	ldr	r2, [pc, #60]	; (800b3e8 <xTaskIncrementTick+0x168>)
 800b3ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b3ae:	4b0f      	ldr	r3, [pc, #60]	; (800b3ec <xTaskIncrementTick+0x16c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b3ba:	697b      	ldr	r3, [r7, #20]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3718      	adds	r7, #24
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20000e30 	.word	0x20000e30
 800b3c8:	20000e0c 	.word	0x20000e0c
 800b3cc:	20000dc0 	.word	0x20000dc0
 800b3d0:	20000dc4 	.word	0x20000dc4
 800b3d4:	20000e20 	.word	0x20000e20
 800b3d8:	20000e28 	.word	0x20000e28
 800b3dc:	20000e10 	.word	0x20000e10
 800b3e0:	20000938 	.word	0x20000938
 800b3e4:	20000934 	.word	0x20000934
 800b3e8:	20000e18 	.word	0x20000e18
 800b3ec:	20000e1c 	.word	0x20000e1c

0800b3f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b3f6:	4b27      	ldr	r3, [pc, #156]	; (800b494 <vTaskSwitchContext+0xa4>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d003      	beq.n	800b406 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b3fe:	4b26      	ldr	r3, [pc, #152]	; (800b498 <vTaskSwitchContext+0xa8>)
 800b400:	2201      	movs	r2, #1
 800b402:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b404:	e040      	b.n	800b488 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b406:	4b24      	ldr	r3, [pc, #144]	; (800b498 <vTaskSwitchContext+0xa8>)
 800b408:	2200      	movs	r2, #0
 800b40a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b40c:	4b23      	ldr	r3, [pc, #140]	; (800b49c <vTaskSwitchContext+0xac>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	60fb      	str	r3, [r7, #12]
 800b412:	e00f      	b.n	800b434 <vTaskSwitchContext+0x44>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d109      	bne.n	800b42e <vTaskSwitchContext+0x3e>
 800b41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	607b      	str	r3, [r7, #4]
 800b42c:	e7fe      	b.n	800b42c <vTaskSwitchContext+0x3c>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	3b01      	subs	r3, #1
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	491a      	ldr	r1, [pc, #104]	; (800b4a0 <vTaskSwitchContext+0xb0>)
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4613      	mov	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	440b      	add	r3, r1
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d0e5      	beq.n	800b414 <vTaskSwitchContext+0x24>
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	4613      	mov	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	4a13      	ldr	r2, [pc, #76]	; (800b4a0 <vTaskSwitchContext+0xb0>)
 800b454:	4413      	add	r3, r2
 800b456:	60bb      	str	r3, [r7, #8]
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	605a      	str	r2, [r3, #4]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	685a      	ldr	r2, [r3, #4]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	3308      	adds	r3, #8
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d104      	bne.n	800b478 <vTaskSwitchContext+0x88>
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	605a      	str	r2, [r3, #4]
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	4a09      	ldr	r2, [pc, #36]	; (800b4a4 <vTaskSwitchContext+0xb4>)
 800b480:	6013      	str	r3, [r2, #0]
 800b482:	4a06      	ldr	r2, [pc, #24]	; (800b49c <vTaskSwitchContext+0xac>)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6013      	str	r3, [r2, #0]
}
 800b488:	bf00      	nop
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	20000e30 	.word	0x20000e30
 800b498:	20000e1c 	.word	0x20000e1c
 800b49c:	20000e10 	.word	0x20000e10
 800b4a0:	20000938 	.word	0x20000938
 800b4a4:	20000934 	.word	0x20000934

0800b4a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d109      	bne.n	800b4cc <vTaskPlaceOnEventList+0x24>
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	60fb      	str	r3, [r7, #12]
 800b4ca:	e7fe      	b.n	800b4ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4cc:	4b07      	ldr	r3, [pc, #28]	; (800b4ec <vTaskPlaceOnEventList+0x44>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3318      	adds	r3, #24
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7fe fb8e 	bl	8009bf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b4da:	2101      	movs	r1, #1
 800b4dc:	6838      	ldr	r0, [r7, #0]
 800b4de:	f000 fb7d 	bl	800bbdc <prvAddCurrentTaskToDelayedList>
}
 800b4e2:	bf00      	nop
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20000934 	.word	0x20000934

0800b4f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d109      	bne.n	800b516 <vTaskPlaceOnEventListRestricted+0x26>
 800b502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	e7fe      	b.n	800b514 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b516:	4b0a      	ldr	r3, [pc, #40]	; (800b540 <vTaskPlaceOnEventListRestricted+0x50>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3318      	adds	r3, #24
 800b51c:	4619      	mov	r1, r3
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	f7fe fb45 	bl	8009bae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800b52a:	f04f 33ff 	mov.w	r3, #4294967295
 800b52e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b530:	6879      	ldr	r1, [r7, #4]
 800b532:	68b8      	ldr	r0, [r7, #8]
 800b534:	f000 fb52 	bl	800bbdc <prvAddCurrentTaskToDelayedList>
	}
 800b538:	bf00      	nop
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	20000934 	.word	0x20000934

0800b544 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d109      	bne.n	800b56e <xTaskRemoveFromEventList+0x2a>
 800b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	60fb      	str	r3, [r7, #12]
 800b56c:	e7fe      	b.n	800b56c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	3318      	adds	r3, #24
 800b572:	4618      	mov	r0, r3
 800b574:	f7fe fb78 	bl	8009c68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b578:	4b1d      	ldr	r3, [pc, #116]	; (800b5f0 <xTaskRemoveFromEventList+0xac>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d11d      	bne.n	800b5bc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	3304      	adds	r3, #4
 800b584:	4618      	mov	r0, r3
 800b586:	f7fe fb6f 	bl	8009c68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b58e:	4b19      	ldr	r3, [pc, #100]	; (800b5f4 <xTaskRemoveFromEventList+0xb0>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	429a      	cmp	r2, r3
 800b594:	d903      	bls.n	800b59e <xTaskRemoveFromEventList+0x5a>
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59a:	4a16      	ldr	r2, [pc, #88]	; (800b5f4 <xTaskRemoveFromEventList+0xb0>)
 800b59c:	6013      	str	r3, [r2, #0]
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4a13      	ldr	r2, [pc, #76]	; (800b5f8 <xTaskRemoveFromEventList+0xb4>)
 800b5ac:	441a      	add	r2, r3
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	f7fe fafa 	bl	8009bae <vListInsertEnd>
 800b5ba:	e005      	b.n	800b5c8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	3318      	adds	r3, #24
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	480e      	ldr	r0, [pc, #56]	; (800b5fc <xTaskRemoveFromEventList+0xb8>)
 800b5c4:	f7fe faf3 	bl	8009bae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5cc:	4b0c      	ldr	r3, [pc, #48]	; (800b600 <xTaskRemoveFromEventList+0xbc>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d905      	bls.n	800b5e2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b5da:	4b0a      	ldr	r3, [pc, #40]	; (800b604 <xTaskRemoveFromEventList+0xc0>)
 800b5dc:	2201      	movs	r2, #1
 800b5de:	601a      	str	r2, [r3, #0]
 800b5e0:	e001      	b.n	800b5e6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b5e6:	697b      	ldr	r3, [r7, #20]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	20000e30 	.word	0x20000e30
 800b5f4:	20000e10 	.word	0x20000e10
 800b5f8:	20000938 	.word	0x20000938
 800b5fc:	20000dc8 	.word	0x20000dc8
 800b600:	20000934 	.word	0x20000934
 800b604:	20000e1c 	.word	0x20000e1c

0800b608 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b610:	4b06      	ldr	r3, [pc, #24]	; (800b62c <vTaskInternalSetTimeOutState+0x24>)
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b618:	4b05      	ldr	r3, [pc, #20]	; (800b630 <vTaskInternalSetTimeOutState+0x28>)
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	605a      	str	r2, [r3, #4]
}
 800b620:	bf00      	nop
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	20000e20 	.word	0x20000e20
 800b630:	20000e0c 	.word	0x20000e0c

0800b634 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b088      	sub	sp, #32
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d109      	bne.n	800b658 <xTaskCheckForTimeOut+0x24>
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	613b      	str	r3, [r7, #16]
 800b656:	e7fe      	b.n	800b656 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d109      	bne.n	800b672 <xTaskCheckForTimeOut+0x3e>
 800b65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	60fb      	str	r3, [r7, #12]
 800b670:	e7fe      	b.n	800b670 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b672:	f000 ff73 	bl	800c55c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b676:	4b1d      	ldr	r3, [pc, #116]	; (800b6ec <xTaskCheckForTimeOut+0xb8>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	69ba      	ldr	r2, [r7, #24]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68e:	d102      	bne.n	800b696 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b690:	2300      	movs	r3, #0
 800b692:	61fb      	str	r3, [r7, #28]
 800b694:	e023      	b.n	800b6de <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	4b15      	ldr	r3, [pc, #84]	; (800b6f0 <xTaskCheckForTimeOut+0xbc>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d007      	beq.n	800b6b2 <xTaskCheckForTimeOut+0x7e>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	69ba      	ldr	r2, [r7, #24]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d302      	bcc.n	800b6b2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	61fb      	str	r3, [r7, #28]
 800b6b0:	e015      	b.n	800b6de <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	697a      	ldr	r2, [r7, #20]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d20b      	bcs.n	800b6d4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	1ad2      	subs	r2, r2, r3
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff ff9d 	bl	800b608 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	61fb      	str	r3, [r7, #28]
 800b6d2:	e004      	b.n	800b6de <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b6de:	f000 ff6b 	bl	800c5b8 <vPortExitCritical>

	return xReturn;
 800b6e2:	69fb      	ldr	r3, [r7, #28]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3720      	adds	r7, #32
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	20000e0c 	.word	0x20000e0c
 800b6f0:	20000e20 	.word	0x20000e20

0800b6f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b6f8:	4b03      	ldr	r3, [pc, #12]	; (800b708 <vTaskMissedYield+0x14>)
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	601a      	str	r2, [r3, #0]
}
 800b6fe:	bf00      	nop
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	20000e1c 	.word	0x20000e1c

0800b70c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b714:	f000 f852 	bl	800b7bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b718:	4b06      	ldr	r3, [pc, #24]	; (800b734 <prvIdleTask+0x28>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d9f9      	bls.n	800b714 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b720:	4b05      	ldr	r3, [pc, #20]	; (800b738 <prvIdleTask+0x2c>)
 800b722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b726:	601a      	str	r2, [r3, #0]
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b730:	e7f0      	b.n	800b714 <prvIdleTask+0x8>
 800b732:	bf00      	nop
 800b734:	20000938 	.word	0x20000938
 800b738:	e000ed04 	.word	0xe000ed04

0800b73c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b742:	2300      	movs	r3, #0
 800b744:	607b      	str	r3, [r7, #4]
 800b746:	e00c      	b.n	800b762 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	4613      	mov	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4413      	add	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4a12      	ldr	r2, [pc, #72]	; (800b79c <prvInitialiseTaskLists+0x60>)
 800b754:	4413      	add	r3, r2
 800b756:	4618      	mov	r0, r3
 800b758:	f7fe f9fc 	bl	8009b54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3301      	adds	r3, #1
 800b760:	607b      	str	r3, [r7, #4]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b37      	cmp	r3, #55	; 0x37
 800b766:	d9ef      	bls.n	800b748 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b768:	480d      	ldr	r0, [pc, #52]	; (800b7a0 <prvInitialiseTaskLists+0x64>)
 800b76a:	f7fe f9f3 	bl	8009b54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b76e:	480d      	ldr	r0, [pc, #52]	; (800b7a4 <prvInitialiseTaskLists+0x68>)
 800b770:	f7fe f9f0 	bl	8009b54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b774:	480c      	ldr	r0, [pc, #48]	; (800b7a8 <prvInitialiseTaskLists+0x6c>)
 800b776:	f7fe f9ed 	bl	8009b54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b77a:	480c      	ldr	r0, [pc, #48]	; (800b7ac <prvInitialiseTaskLists+0x70>)
 800b77c:	f7fe f9ea 	bl	8009b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b780:	480b      	ldr	r0, [pc, #44]	; (800b7b0 <prvInitialiseTaskLists+0x74>)
 800b782:	f7fe f9e7 	bl	8009b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b786:	4b0b      	ldr	r3, [pc, #44]	; (800b7b4 <prvInitialiseTaskLists+0x78>)
 800b788:	4a05      	ldr	r2, [pc, #20]	; (800b7a0 <prvInitialiseTaskLists+0x64>)
 800b78a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b78c:	4b0a      	ldr	r3, [pc, #40]	; (800b7b8 <prvInitialiseTaskLists+0x7c>)
 800b78e:	4a05      	ldr	r2, [pc, #20]	; (800b7a4 <prvInitialiseTaskLists+0x68>)
 800b790:	601a      	str	r2, [r3, #0]
}
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	20000938 	.word	0x20000938
 800b7a0:	20000d98 	.word	0x20000d98
 800b7a4:	20000dac 	.word	0x20000dac
 800b7a8:	20000dc8 	.word	0x20000dc8
 800b7ac:	20000ddc 	.word	0x20000ddc
 800b7b0:	20000df4 	.word	0x20000df4
 800b7b4:	20000dc0 	.word	0x20000dc0
 800b7b8:	20000dc4 	.word	0x20000dc4

0800b7bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7c2:	e019      	b.n	800b7f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b7c4:	f000 feca 	bl	800c55c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7c8:	4b0f      	ldr	r3, [pc, #60]	; (800b808 <prvCheckTasksWaitingTermination+0x4c>)
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7fe fa47 	bl	8009c68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b7da:	4b0c      	ldr	r3, [pc, #48]	; (800b80c <prvCheckTasksWaitingTermination+0x50>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	4a0a      	ldr	r2, [pc, #40]	; (800b80c <prvCheckTasksWaitingTermination+0x50>)
 800b7e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b7e4:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <prvCheckTasksWaitingTermination+0x54>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	4a09      	ldr	r2, [pc, #36]	; (800b810 <prvCheckTasksWaitingTermination+0x54>)
 800b7ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b7ee:	f000 fee3 	bl	800c5b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 f80e 	bl	800b814 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7f8:	4b05      	ldr	r3, [pc, #20]	; (800b810 <prvCheckTasksWaitingTermination+0x54>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1e1      	bne.n	800b7c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b800:	bf00      	nop
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	20000ddc 	.word	0x20000ddc
 800b80c:	20000e08 	.word	0x20000e08
 800b810:	20000df0 	.word	0x20000df0

0800b814 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b822:	2b00      	cmp	r3, #0
 800b824:	d108      	bne.n	800b838 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b82a:	4618      	mov	r0, r3
 800b82c:	f001 f872 	bl	800c914 <vPortFree>
				vPortFree( pxTCB );
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f001 f86f 	bl	800c914 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b836:	e017      	b.n	800b868 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d103      	bne.n	800b84a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f001 f866 	bl	800c914 <vPortFree>
	}
 800b848:	e00e      	b.n	800b868 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b850:	2b02      	cmp	r3, #2
 800b852:	d009      	beq.n	800b868 <prvDeleteTCB+0x54>
 800b854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	60fb      	str	r3, [r7, #12]
 800b866:	e7fe      	b.n	800b866 <prvDeleteTCB+0x52>
	}
 800b868:	bf00      	nop
 800b86a:	3710      	adds	r7, #16
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b876:	4b0c      	ldr	r3, [pc, #48]	; (800b8a8 <prvResetNextTaskUnblockTime+0x38>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d104      	bne.n	800b88a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b880:	4b0a      	ldr	r3, [pc, #40]	; (800b8ac <prvResetNextTaskUnblockTime+0x3c>)
 800b882:	f04f 32ff 	mov.w	r2, #4294967295
 800b886:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b888:	e008      	b.n	800b89c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b88a:	4b07      	ldr	r3, [pc, #28]	; (800b8a8 <prvResetNextTaskUnblockTime+0x38>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	4a04      	ldr	r2, [pc, #16]	; (800b8ac <prvResetNextTaskUnblockTime+0x3c>)
 800b89a:	6013      	str	r3, [r2, #0]
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	20000dc0 	.word	0x20000dc0
 800b8ac:	20000e28 	.word	0x20000e28

0800b8b0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b8b6:	4b05      	ldr	r3, [pc, #20]	; (800b8cc <xTaskGetCurrentTaskHandle+0x1c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b8bc:	687b      	ldr	r3, [r7, #4]
	}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	370c      	adds	r7, #12
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	20000934 	.word	0x20000934

0800b8d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8d6:	4b0b      	ldr	r3, [pc, #44]	; (800b904 <xTaskGetSchedulerState+0x34>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d102      	bne.n	800b8e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	607b      	str	r3, [r7, #4]
 800b8e2:	e008      	b.n	800b8f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8e4:	4b08      	ldr	r3, [pc, #32]	; (800b908 <xTaskGetSchedulerState+0x38>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d102      	bne.n	800b8f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8ec:	2302      	movs	r3, #2
 800b8ee:	607b      	str	r3, [r7, #4]
 800b8f0:	e001      	b.n	800b8f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8f6:	687b      	ldr	r3, [r7, #4]
	}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	20000e14 	.word	0x20000e14
 800b908:	20000e30 	.word	0x20000e30

0800b90c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b918:	2300      	movs	r3, #0
 800b91a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d051      	beq.n	800b9c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b926:	4b2a      	ldr	r3, [pc, #168]	; (800b9d0 <xTaskPriorityInherit+0xc4>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d241      	bcs.n	800b9b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	2b00      	cmp	r3, #0
 800b936:	db06      	blt.n	800b946 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b938:	4b25      	ldr	r3, [pc, #148]	; (800b9d0 <xTaskPriorityInherit+0xc4>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	6959      	ldr	r1, [r3, #20]
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94e:	4613      	mov	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4413      	add	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4a1f      	ldr	r2, [pc, #124]	; (800b9d4 <xTaskPriorityInherit+0xc8>)
 800b958:	4413      	add	r3, r2
 800b95a:	4299      	cmp	r1, r3
 800b95c:	d122      	bne.n	800b9a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	3304      	adds	r3, #4
 800b962:	4618      	mov	r0, r3
 800b964:	f7fe f980 	bl	8009c68 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b968:	4b19      	ldr	r3, [pc, #100]	; (800b9d0 <xTaskPriorityInherit+0xc4>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b976:	4b18      	ldr	r3, [pc, #96]	; (800b9d8 <xTaskPriorityInherit+0xcc>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d903      	bls.n	800b986 <xTaskPriorityInherit+0x7a>
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b982:	4a15      	ldr	r2, [pc, #84]	; (800b9d8 <xTaskPriorityInherit+0xcc>)
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98a:	4613      	mov	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4a10      	ldr	r2, [pc, #64]	; (800b9d4 <xTaskPriorityInherit+0xc8>)
 800b994:	441a      	add	r2, r3
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	3304      	adds	r3, #4
 800b99a:	4619      	mov	r1, r3
 800b99c:	4610      	mov	r0, r2
 800b99e:	f7fe f906 	bl	8009bae <vListInsertEnd>
 800b9a2:	e004      	b.n	800b9ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9a4:	4b0a      	ldr	r3, [pc, #40]	; (800b9d0 <xTaskPriorityInherit+0xc4>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	60fb      	str	r3, [r7, #12]
 800b9b2:	e008      	b.n	800b9c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9b8:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <xTaskPriorityInherit+0xc4>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d201      	bcs.n	800b9c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
	}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20000934 	.word	0x20000934
 800b9d4:	20000938 	.word	0x20000938
 800b9d8:	20000e10 	.word	0x20000e10

0800b9dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d054      	beq.n	800ba9c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9f2:	4b2d      	ldr	r3, [pc, #180]	; (800baa8 <xTaskPriorityDisinherit+0xcc>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d009      	beq.n	800ba10 <xTaskPriorityDisinherit+0x34>
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	60fb      	str	r3, [r7, #12]
 800ba0e:	e7fe      	b.n	800ba0e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d109      	bne.n	800ba2c <xTaskPriorityDisinherit+0x50>
 800ba18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	60bb      	str	r3, [r7, #8]
 800ba2a:	e7fe      	b.n	800ba2a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba30:	1e5a      	subs	r2, r3, #1
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d02c      	beq.n	800ba9c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d128      	bne.n	800ba9c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe f90a 	bl	8009c68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6c:	4b0f      	ldr	r3, [pc, #60]	; (800baac <xTaskPriorityDisinherit+0xd0>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d903      	bls.n	800ba7c <xTaskPriorityDisinherit+0xa0>
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	4a0c      	ldr	r2, [pc, #48]	; (800baac <xTaskPriorityDisinherit+0xd0>)
 800ba7a:	6013      	str	r3, [r2, #0]
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba80:	4613      	mov	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4a09      	ldr	r2, [pc, #36]	; (800bab0 <xTaskPriorityDisinherit+0xd4>)
 800ba8a:	441a      	add	r2, r3
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	3304      	adds	r3, #4
 800ba90:	4619      	mov	r1, r3
 800ba92:	4610      	mov	r0, r2
 800ba94:	f7fe f88b 	bl	8009bae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba9c:	697b      	ldr	r3, [r7, #20]
	}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3718      	adds	r7, #24
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20000934 	.word	0x20000934
 800baac:	20000e10 	.word	0x20000e10
 800bab0:	20000938 	.word	0x20000938

0800bab4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b088      	sub	sp, #32
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bac2:	2301      	movs	r3, #1
 800bac4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d068      	beq.n	800bb9e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d109      	bne.n	800bae8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800bad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	60fb      	str	r3, [r7, #12]
 800bae6:	e7fe      	b.n	800bae6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baec:	683a      	ldr	r2, [r7, #0]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d902      	bls.n	800baf8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	61fb      	str	r3, [r7, #28]
 800baf6:	e002      	b.n	800bafe <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bafc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb02:	69fa      	ldr	r2, [r7, #28]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d04a      	beq.n	800bb9e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d145      	bne.n	800bb9e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb12:	4b25      	ldr	r3, [pc, #148]	; (800bba8 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	69ba      	ldr	r2, [r7, #24]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d109      	bne.n	800bb30 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	60bb      	str	r3, [r7, #8]
 800bb2e:	e7fe      	b.n	800bb2e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb34:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	69fa      	ldr	r2, [r7, #28]
 800bb3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	699b      	ldr	r3, [r3, #24]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	db04      	blt.n	800bb4e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	6959      	ldr	r1, [r3, #20]
 800bb52:	693a      	ldr	r2, [r7, #16]
 800bb54:	4613      	mov	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4413      	add	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	4a13      	ldr	r2, [pc, #76]	; (800bbac <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bb5e:	4413      	add	r3, r2
 800bb60:	4299      	cmp	r1, r3
 800bb62:	d11c      	bne.n	800bb9e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	3304      	adds	r3, #4
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fe f87d 	bl	8009c68 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb72:	4b0f      	ldr	r3, [pc, #60]	; (800bbb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d903      	bls.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7e:	4a0c      	ldr	r2, [pc, #48]	; (800bbb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bb80:	6013      	str	r3, [r2, #0]
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb86:	4613      	mov	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4413      	add	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4a07      	ldr	r2, [pc, #28]	; (800bbac <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bb90:	441a      	add	r2, r3
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	3304      	adds	r3, #4
 800bb96:	4619      	mov	r1, r3
 800bb98:	4610      	mov	r0, r2
 800bb9a:	f7fe f808 	bl	8009bae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb9e:	bf00      	nop
 800bba0:	3720      	adds	r7, #32
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	20000934 	.word	0x20000934
 800bbac:	20000938 	.word	0x20000938
 800bbb0:	20000e10 	.word	0x20000e10

0800bbb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bbb4:	b480      	push	{r7}
 800bbb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bbb8:	4b07      	ldr	r3, [pc, #28]	; (800bbd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d004      	beq.n	800bbca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bbc0:	4b05      	ldr	r3, [pc, #20]	; (800bbd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbc6:	3201      	adds	r2, #1
 800bbc8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bbca:	4b03      	ldr	r3, [pc, #12]	; (800bbd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
	}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr
 800bbd8:	20000934 	.word	0x20000934

0800bbdc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbe6:	4b21      	ldr	r3, [pc, #132]	; (800bc6c <prvAddCurrentTaskToDelayedList+0x90>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbec:	4b20      	ldr	r3, [pc, #128]	; (800bc70 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fe f838 	bl	8009c68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfe:	d10a      	bne.n	800bc16 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d007      	beq.n	800bc16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc06:	4b1a      	ldr	r3, [pc, #104]	; (800bc70 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3304      	adds	r3, #4
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	4819      	ldr	r0, [pc, #100]	; (800bc74 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc10:	f7fd ffcd 	bl	8009bae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc14:	e026      	b.n	800bc64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc1e:	4b14      	ldr	r3, [pc, #80]	; (800bc70 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc26:	68ba      	ldr	r2, [r7, #8]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d209      	bcs.n	800bc42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc2e:	4b12      	ldr	r3, [pc, #72]	; (800bc78 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	4b0f      	ldr	r3, [pc, #60]	; (800bc70 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	3304      	adds	r3, #4
 800bc38:	4619      	mov	r1, r3
 800bc3a:	4610      	mov	r0, r2
 800bc3c:	f7fd ffdb 	bl	8009bf6 <vListInsert>
}
 800bc40:	e010      	b.n	800bc64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc42:	4b0e      	ldr	r3, [pc, #56]	; (800bc7c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	4b0a      	ldr	r3, [pc, #40]	; (800bc70 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	4610      	mov	r0, r2
 800bc50:	f7fd ffd1 	bl	8009bf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc54:	4b0a      	ldr	r3, [pc, #40]	; (800bc80 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68ba      	ldr	r2, [r7, #8]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d202      	bcs.n	800bc64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc5e:	4a08      	ldr	r2, [pc, #32]	; (800bc80 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	6013      	str	r3, [r2, #0]
}
 800bc64:	bf00      	nop
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	20000e0c 	.word	0x20000e0c
 800bc70:	20000934 	.word	0x20000934
 800bc74:	20000df4 	.word	0x20000df4
 800bc78:	20000dc4 	.word	0x20000dc4
 800bc7c:	20000dc0 	.word	0x20000dc0
 800bc80:	20000e28 	.word	0x20000e28

0800bc84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b08a      	sub	sp, #40	; 0x28
 800bc88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc8e:	f000 faff 	bl	800c290 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc92:	4b1c      	ldr	r3, [pc, #112]	; (800bd04 <xTimerCreateTimerTask+0x80>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d021      	beq.n	800bcde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bca2:	1d3a      	adds	r2, r7, #4
 800bca4:	f107 0108 	add.w	r1, r7, #8
 800bca8:	f107 030c 	add.w	r3, r7, #12
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7fd ff37 	bl	8009b20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bcb2:	6879      	ldr	r1, [r7, #4]
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	9202      	str	r2, [sp, #8]
 800bcba:	9301      	str	r3, [sp, #4]
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	9300      	str	r3, [sp, #0]
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	460a      	mov	r2, r1
 800bcc4:	4910      	ldr	r1, [pc, #64]	; (800bd08 <xTimerCreateTimerTask+0x84>)
 800bcc6:	4811      	ldr	r0, [pc, #68]	; (800bd0c <xTimerCreateTimerTask+0x88>)
 800bcc8:	f7fe ff5e 	bl	800ab88 <xTaskCreateStatic>
 800bccc:	4602      	mov	r2, r0
 800bcce:	4b10      	ldr	r3, [pc, #64]	; (800bd10 <xTimerCreateTimerTask+0x8c>)
 800bcd0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bcd2:	4b0f      	ldr	r3, [pc, #60]	; (800bd10 <xTimerCreateTimerTask+0x8c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d109      	bne.n	800bcf8 <xTimerCreateTimerTask+0x74>
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	613b      	str	r3, [r7, #16]
 800bcf6:	e7fe      	b.n	800bcf6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800bcf8:	697b      	ldr	r3, [r7, #20]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20000e64 	.word	0x20000e64
 800bd08:	0800d750 	.word	0x0800d750
 800bd0c:	0800be45 	.word	0x0800be45
 800bd10:	20000e68 	.word	0x20000e68

0800bd14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b08a      	sub	sp, #40	; 0x28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd22:	2300      	movs	r3, #0
 800bd24:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d109      	bne.n	800bd40 <xTimerGenericCommand+0x2c>
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	623b      	str	r3, [r7, #32]
 800bd3e:	e7fe      	b.n	800bd3e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd40:	4b19      	ldr	r3, [pc, #100]	; (800bda8 <xTimerGenericCommand+0x94>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d02a      	beq.n	800bd9e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	2b05      	cmp	r3, #5
 800bd58:	dc18      	bgt.n	800bd8c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd5a:	f7ff fdb9 	bl	800b8d0 <xTaskGetSchedulerState>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d109      	bne.n	800bd78 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd64:	4b10      	ldr	r3, [pc, #64]	; (800bda8 <xTimerGenericCommand+0x94>)
 800bd66:	6818      	ldr	r0, [r3, #0]
 800bd68:	f107 0110 	add.w	r1, r7, #16
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd70:	f7fe f996 	bl	800a0a0 <xQueueGenericSend>
 800bd74:	6278      	str	r0, [r7, #36]	; 0x24
 800bd76:	e012      	b.n	800bd9e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd78:	4b0b      	ldr	r3, [pc, #44]	; (800bda8 <xTimerGenericCommand+0x94>)
 800bd7a:	6818      	ldr	r0, [r3, #0]
 800bd7c:	f107 0110 	add.w	r1, r7, #16
 800bd80:	2300      	movs	r3, #0
 800bd82:	2200      	movs	r2, #0
 800bd84:	f7fe f98c 	bl	800a0a0 <xQueueGenericSend>
 800bd88:	6278      	str	r0, [r7, #36]	; 0x24
 800bd8a:	e008      	b.n	800bd9e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd8c:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <xTimerGenericCommand+0x94>)
 800bd8e:	6818      	ldr	r0, [r3, #0]
 800bd90:	f107 0110 	add.w	r1, r7, #16
 800bd94:	2300      	movs	r3, #0
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	f7fe fa7c 	bl	800a294 <xQueueGenericSendFromISR>
 800bd9c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3728      	adds	r7, #40	; 0x28
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	20000e64 	.word	0x20000e64

0800bdac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b088      	sub	sp, #32
 800bdb0:	af02      	add	r7, sp, #8
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdb6:	4b22      	ldr	r3, [pc, #136]	; (800be40 <prvProcessExpiredTimer+0x94>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	3304      	adds	r3, #4
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7fd ff4f 	bl	8009c68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdd0:	f003 0304 	and.w	r3, r3, #4
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d021      	beq.n	800be1c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	699a      	ldr	r2, [r3, #24]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	18d1      	adds	r1, r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	6978      	ldr	r0, [r7, #20]
 800bde6:	f000 f8d1 	bl	800bf8c <prvInsertTimerInActiveList>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d01e      	beq.n	800be2e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	6978      	ldr	r0, [r7, #20]
 800bdfc:	f7ff ff8a 	bl	800bd14 <xTimerGenericCommand>
 800be00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d112      	bne.n	800be2e <prvProcessExpiredTimer+0x82>
 800be08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	60fb      	str	r3, [r7, #12]
 800be1a:	e7fe      	b.n	800be1a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be22:	f023 0301 	bic.w	r3, r3, #1
 800be26:	b2da      	uxtb	r2, r3
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	6a1b      	ldr	r3, [r3, #32]
 800be32:	6978      	ldr	r0, [r7, #20]
 800be34:	4798      	blx	r3
}
 800be36:	bf00      	nop
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	20000e5c 	.word	0x20000e5c

0800be44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be4c:	f107 0308 	add.w	r3, r7, #8
 800be50:	4618      	mov	r0, r3
 800be52:	f000 f857 	bl	800bf04 <prvGetNextExpireTime>
 800be56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	4619      	mov	r1, r3
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f000 f803 	bl	800be68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be62:	f000 f8d5 	bl	800c010 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be66:	e7f1      	b.n	800be4c <prvTimerTask+0x8>

0800be68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be72:	f7ff f939 	bl	800b0e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be76:	f107 0308 	add.w	r3, r7, #8
 800be7a:	4618      	mov	r0, r3
 800be7c:	f000 f866 	bl	800bf4c <prvSampleTimeNow>
 800be80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d130      	bne.n	800beea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10a      	bne.n	800bea4 <prvProcessTimerOrBlockTask+0x3c>
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	429a      	cmp	r2, r3
 800be94:	d806      	bhi.n	800bea4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be96:	f7ff f935 	bl	800b104 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be9a:	68f9      	ldr	r1, [r7, #12]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7ff ff85 	bl	800bdac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bea2:	e024      	b.n	800beee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d008      	beq.n	800bebc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800beaa:	4b13      	ldr	r3, [pc, #76]	; (800bef8 <prvProcessTimerOrBlockTask+0x90>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d101      	bne.n	800beb8 <prvProcessTimerOrBlockTask+0x50>
 800beb4:	2301      	movs	r3, #1
 800beb6:	e000      	b.n	800beba <prvProcessTimerOrBlockTask+0x52>
 800beb8:	2300      	movs	r3, #0
 800beba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bebc:	4b0f      	ldr	r3, [pc, #60]	; (800befc <prvProcessTimerOrBlockTask+0x94>)
 800bebe:	6818      	ldr	r0, [r3, #0]
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	4619      	mov	r1, r3
 800beca:	f7fe fe29 	bl	800ab20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bece:	f7ff f919 	bl	800b104 <xTaskResumeAll>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d10a      	bne.n	800beee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bed8:	4b09      	ldr	r3, [pc, #36]	; (800bf00 <prvProcessTimerOrBlockTask+0x98>)
 800beda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bede:	601a      	str	r2, [r3, #0]
 800bee0:	f3bf 8f4f 	dsb	sy
 800bee4:	f3bf 8f6f 	isb	sy
}
 800bee8:	e001      	b.n	800beee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800beea:	f7ff f90b 	bl	800b104 <xTaskResumeAll>
}
 800beee:	bf00      	nop
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	20000e60 	.word	0x20000e60
 800befc:	20000e64 	.word	0x20000e64
 800bf00:	e000ed04 	.word	0xe000ed04

0800bf04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf0c:	4b0e      	ldr	r3, [pc, #56]	; (800bf48 <prvGetNextExpireTime+0x44>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d101      	bne.n	800bf1a <prvGetNextExpireTime+0x16>
 800bf16:	2201      	movs	r2, #1
 800bf18:	e000      	b.n	800bf1c <prvGetNextExpireTime+0x18>
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d105      	bne.n	800bf34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf28:	4b07      	ldr	r3, [pc, #28]	; (800bf48 <prvGetNextExpireTime+0x44>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	60fb      	str	r3, [r7, #12]
 800bf32:	e001      	b.n	800bf38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf34:	2300      	movs	r3, #0
 800bf36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf38:	68fb      	ldr	r3, [r7, #12]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	20000e5c 	.word	0x20000e5c

0800bf4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf54:	f7ff f972 	bl	800b23c <xTaskGetTickCount>
 800bf58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf5a:	4b0b      	ldr	r3, [pc, #44]	; (800bf88 <prvSampleTimeNow+0x3c>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d205      	bcs.n	800bf70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf64:	f000 f930 	bl	800c1c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	601a      	str	r2, [r3, #0]
 800bf6e:	e002      	b.n	800bf76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf76:	4a04      	ldr	r2, [pc, #16]	; (800bf88 <prvSampleTimeNow+0x3c>)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	20000e6c 	.word	0x20000e6c

0800bf8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b086      	sub	sp, #24
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	607a      	str	r2, [r7, #4]
 800bf98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d812      	bhi.n	800bfd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	1ad2      	subs	r2, r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d302      	bcc.n	800bfc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	617b      	str	r3, [r7, #20]
 800bfc4:	e01b      	b.n	800bffe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bfc6:	4b10      	ldr	r3, [pc, #64]	; (800c008 <prvInsertTimerInActiveList+0x7c>)
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	3304      	adds	r3, #4
 800bfce:	4619      	mov	r1, r3
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	f7fd fe10 	bl	8009bf6 <vListInsert>
 800bfd6:	e012      	b.n	800bffe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d206      	bcs.n	800bfee <prvInsertTimerInActiveList+0x62>
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d302      	bcc.n	800bfee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	617b      	str	r3, [r7, #20]
 800bfec:	e007      	b.n	800bffe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfee:	4b07      	ldr	r3, [pc, #28]	; (800c00c <prvInsertTimerInActiveList+0x80>)
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	3304      	adds	r3, #4
 800bff6:	4619      	mov	r1, r3
 800bff8:	4610      	mov	r0, r2
 800bffa:	f7fd fdfc 	bl	8009bf6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bffe:	697b      	ldr	r3, [r7, #20]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3718      	adds	r7, #24
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	20000e60 	.word	0x20000e60
 800c00c:	20000e5c 	.word	0x20000e5c

0800c010 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b08e      	sub	sp, #56	; 0x38
 800c014:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c016:	e0c6      	b.n	800c1a6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	da17      	bge.n	800c04e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c01e:	1d3b      	adds	r3, r7, #4
 800c020:	3304      	adds	r3, #4
 800c022:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c026:	2b00      	cmp	r3, #0
 800c028:	d109      	bne.n	800c03e <prvProcessReceivedCommands+0x2e>
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	f383 8811 	msr	BASEPRI, r3
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	61fb      	str	r3, [r7, #28]
 800c03c:	e7fe      	b.n	800c03c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c044:	6850      	ldr	r0, [r2, #4]
 800c046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c048:	6892      	ldr	r2, [r2, #8]
 800c04a:	4611      	mov	r1, r2
 800c04c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	f2c0 80a7 	blt.w	800c1a4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05c:	695b      	ldr	r3, [r3, #20]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d004      	beq.n	800c06c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c064:	3304      	adds	r3, #4
 800c066:	4618      	mov	r0, r3
 800c068:	f7fd fdfe 	bl	8009c68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c06c:	463b      	mov	r3, r7
 800c06e:	4618      	mov	r0, r3
 800c070:	f7ff ff6c 	bl	800bf4c <prvSampleTimeNow>
 800c074:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b09      	cmp	r3, #9
 800c07a:	f200 8094 	bhi.w	800c1a6 <prvProcessReceivedCommands+0x196>
 800c07e:	a201      	add	r2, pc, #4	; (adr r2, 800c084 <prvProcessReceivedCommands+0x74>)
 800c080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c084:	0800c0ad 	.word	0x0800c0ad
 800c088:	0800c0ad 	.word	0x0800c0ad
 800c08c:	0800c0ad 	.word	0x0800c0ad
 800c090:	0800c11f 	.word	0x0800c11f
 800c094:	0800c133 	.word	0x0800c133
 800c098:	0800c17b 	.word	0x0800c17b
 800c09c:	0800c0ad 	.word	0x0800c0ad
 800c0a0:	0800c0ad 	.word	0x0800c0ad
 800c0a4:	0800c11f 	.word	0x0800c11f
 800c0a8:	0800c133 	.word	0x0800c133
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0b2:	f043 0301 	orr.w	r3, r3, #1
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c0be:	68ba      	ldr	r2, [r7, #8]
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c2:	699b      	ldr	r3, [r3, #24]
 800c0c4:	18d1      	adds	r1, r2, r3
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0cc:	f7ff ff5e 	bl	800bf8c <prvInsertTimerInActiveList>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d067      	beq.n	800c1a6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d8:	6a1b      	ldr	r3, [r3, #32]
 800c0da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0e4:	f003 0304 	and.w	r3, r3, #4
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d05c      	beq.n	800c1a6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f0:	699b      	ldr	r3, [r3, #24]
 800c0f2:	441a      	add	r2, r3
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0fe:	f7ff fe09 	bl	800bd14 <xTimerGenericCommand>
 800c102:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c104:	6a3b      	ldr	r3, [r7, #32]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d14d      	bne.n	800c1a6 <prvProcessReceivedCommands+0x196>
 800c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	61bb      	str	r3, [r7, #24]
 800c11c:	e7fe      	b.n	800c11c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c124:	f023 0301 	bic.w	r3, r3, #1
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c130:	e039      	b.n	800c1a6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c138:	f043 0301 	orr.w	r3, r3, #1
 800c13c:	b2da      	uxtb	r2, r3
 800c13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c140:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c144:	68ba      	ldr	r2, [r7, #8]
 800c146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c148:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d109      	bne.n	800c166 <prvProcessReceivedCommands+0x156>
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	617b      	str	r3, [r7, #20]
 800c164:	e7fe      	b.n	800c164 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c168:	699a      	ldr	r2, [r3, #24]
 800c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16c:	18d1      	adds	r1, r2, r3
 800c16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c174:	f7ff ff0a 	bl	800bf8c <prvInsertTimerInActiveList>
					break;
 800c178:	e015      	b.n	800c1a6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c180:	f003 0302 	and.w	r3, r3, #2
 800c184:	2b00      	cmp	r3, #0
 800c186:	d103      	bne.n	800c190 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800c188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c18a:	f000 fbc3 	bl	800c914 <vPortFree>
 800c18e:	e00a      	b.n	800c1a6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c196:	f023 0301 	bic.w	r3, r3, #1
 800c19a:	b2da      	uxtb	r2, r3
 800c19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c1a2:	e000      	b.n	800c1a6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c1a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1a6:	4b07      	ldr	r3, [pc, #28]	; (800c1c4 <prvProcessReceivedCommands+0x1b4>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	1d39      	adds	r1, r7, #4
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fe f904 	bl	800a3bc <xQueueReceive>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f47f af2e 	bne.w	800c018 <prvProcessReceivedCommands+0x8>
	}
}
 800c1bc:	bf00      	nop
 800c1be:	3730      	adds	r7, #48	; 0x30
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	20000e64 	.word	0x20000e64

0800c1c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b088      	sub	sp, #32
 800c1cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1ce:	e047      	b.n	800c260 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1d0:	4b2d      	ldr	r3, [pc, #180]	; (800c288 <prvSwitchTimerLists+0xc0>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1da:	4b2b      	ldr	r3, [pc, #172]	; (800c288 <prvSwitchTimerLists+0xc0>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fd fd3d 	bl	8009c68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6a1b      	ldr	r3, [r3, #32]
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1fc:	f003 0304 	and.w	r3, r3, #4
 800c200:	2b00      	cmp	r3, #0
 800c202:	d02d      	beq.n	800c260 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	699b      	ldr	r3, [r3, #24]
 800c208:	693a      	ldr	r2, [r7, #16]
 800c20a:	4413      	add	r3, r2
 800c20c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	429a      	cmp	r2, r3
 800c214:	d90e      	bls.n	800c234 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	68ba      	ldr	r2, [r7, #8]
 800c21a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c222:	4b19      	ldr	r3, [pc, #100]	; (800c288 <prvSwitchTimerLists+0xc0>)
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	3304      	adds	r3, #4
 800c22a:	4619      	mov	r1, r3
 800c22c:	4610      	mov	r0, r2
 800c22e:	f7fd fce2 	bl	8009bf6 <vListInsert>
 800c232:	e015      	b.n	800c260 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c234:	2300      	movs	r3, #0
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	2300      	movs	r3, #0
 800c23a:	693a      	ldr	r2, [r7, #16]
 800c23c:	2100      	movs	r1, #0
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f7ff fd68 	bl	800bd14 <xTimerGenericCommand>
 800c244:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d109      	bne.n	800c260 <prvSwitchTimerLists+0x98>
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	603b      	str	r3, [r7, #0]
 800c25e:	e7fe      	b.n	800c25e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c260:	4b09      	ldr	r3, [pc, #36]	; (800c288 <prvSwitchTimerLists+0xc0>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1b2      	bne.n	800c1d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c26a:	4b07      	ldr	r3, [pc, #28]	; (800c288 <prvSwitchTimerLists+0xc0>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c270:	4b06      	ldr	r3, [pc, #24]	; (800c28c <prvSwitchTimerLists+0xc4>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a04      	ldr	r2, [pc, #16]	; (800c288 <prvSwitchTimerLists+0xc0>)
 800c276:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c278:	4a04      	ldr	r2, [pc, #16]	; (800c28c <prvSwitchTimerLists+0xc4>)
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	6013      	str	r3, [r2, #0]
}
 800c27e:	bf00      	nop
 800c280:	3718      	adds	r7, #24
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	20000e5c 	.word	0x20000e5c
 800c28c:	20000e60 	.word	0x20000e60

0800c290 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c296:	f000 f961 	bl	800c55c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c29a:	4b15      	ldr	r3, [pc, #84]	; (800c2f0 <prvCheckForValidListAndQueue+0x60>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d120      	bne.n	800c2e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c2a2:	4814      	ldr	r0, [pc, #80]	; (800c2f4 <prvCheckForValidListAndQueue+0x64>)
 800c2a4:	f7fd fc56 	bl	8009b54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c2a8:	4813      	ldr	r0, [pc, #76]	; (800c2f8 <prvCheckForValidListAndQueue+0x68>)
 800c2aa:	f7fd fc53 	bl	8009b54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c2ae:	4b13      	ldr	r3, [pc, #76]	; (800c2fc <prvCheckForValidListAndQueue+0x6c>)
 800c2b0:	4a10      	ldr	r2, [pc, #64]	; (800c2f4 <prvCheckForValidListAndQueue+0x64>)
 800c2b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2b4:	4b12      	ldr	r3, [pc, #72]	; (800c300 <prvCheckForValidListAndQueue+0x70>)
 800c2b6:	4a10      	ldr	r2, [pc, #64]	; (800c2f8 <prvCheckForValidListAndQueue+0x68>)
 800c2b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	4b11      	ldr	r3, [pc, #68]	; (800c304 <prvCheckForValidListAndQueue+0x74>)
 800c2c0:	4a11      	ldr	r2, [pc, #68]	; (800c308 <prvCheckForValidListAndQueue+0x78>)
 800c2c2:	2110      	movs	r1, #16
 800c2c4:	200a      	movs	r0, #10
 800c2c6:	f7fd fd61 	bl	8009d8c <xQueueGenericCreateStatic>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	4b08      	ldr	r3, [pc, #32]	; (800c2f0 <prvCheckForValidListAndQueue+0x60>)
 800c2ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c2d0:	4b07      	ldr	r3, [pc, #28]	; (800c2f0 <prvCheckForValidListAndQueue+0x60>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d005      	beq.n	800c2e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c2d8:	4b05      	ldr	r3, [pc, #20]	; (800c2f0 <prvCheckForValidListAndQueue+0x60>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	490b      	ldr	r1, [pc, #44]	; (800c30c <prvCheckForValidListAndQueue+0x7c>)
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fe fbf6 	bl	800aad0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2e4:	f000 f968 	bl	800c5b8 <vPortExitCritical>
}
 800c2e8:	bf00      	nop
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	20000e64 	.word	0x20000e64
 800c2f4:	20000e34 	.word	0x20000e34
 800c2f8:	20000e48 	.word	0x20000e48
 800c2fc:	20000e5c 	.word	0x20000e5c
 800c300:	20000e60 	.word	0x20000e60
 800c304:	20000f10 	.word	0x20000f10
 800c308:	20000e70 	.word	0x20000e70
 800c30c:	0800d758 	.word	0x0800d758

0800c310 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	3b04      	subs	r3, #4
 800c320:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3b04      	subs	r3, #4
 800c32e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	f023 0201 	bic.w	r2, r3, #1
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3b04      	subs	r3, #4
 800c33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c340:	4a0c      	ldr	r2, [pc, #48]	; (800c374 <pxPortInitialiseStack+0x64>)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3b14      	subs	r3, #20
 800c34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3b04      	subs	r3, #4
 800c356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f06f 0202 	mvn.w	r2, #2
 800c35e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3b20      	subs	r3, #32
 800c364:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c366:	68fb      	ldr	r3, [r7, #12]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	0800c379 	.word	0x0800c379

0800c378 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c382:	4b11      	ldr	r3, [pc, #68]	; (800c3c8 <prvTaskExitError+0x50>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c38a:	d009      	beq.n	800c3a0 <prvTaskExitError+0x28>
 800c38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c390:	f383 8811 	msr	BASEPRI, r3
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	60fb      	str	r3, [r7, #12]
 800c39e:	e7fe      	b.n	800c39e <prvTaskExitError+0x26>
 800c3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3b2:	bf00      	nop
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d0fc      	beq.n	800c3b4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3ba:	bf00      	nop
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	200001c4 	.word	0x200001c4
 800c3cc:	00000000 	.word	0x00000000

0800c3d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3d0:	4b07      	ldr	r3, [pc, #28]	; (800c3f0 <pxCurrentTCBConst2>)
 800c3d2:	6819      	ldr	r1, [r3, #0]
 800c3d4:	6808      	ldr	r0, [r1, #0]
 800c3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3da:	f380 8809 	msr	PSP, r0
 800c3de:	f3bf 8f6f 	isb	sy
 800c3e2:	f04f 0000 	mov.w	r0, #0
 800c3e6:	f380 8811 	msr	BASEPRI, r0
 800c3ea:	4770      	bx	lr
 800c3ec:	f3af 8000 	nop.w

0800c3f0 <pxCurrentTCBConst2>:
 800c3f0:	20000934 	.word	0x20000934
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3f4:	bf00      	nop
 800c3f6:	bf00      	nop

0800c3f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3f8:	4808      	ldr	r0, [pc, #32]	; (800c41c <prvPortStartFirstTask+0x24>)
 800c3fa:	6800      	ldr	r0, [r0, #0]
 800c3fc:	6800      	ldr	r0, [r0, #0]
 800c3fe:	f380 8808 	msr	MSP, r0
 800c402:	f04f 0000 	mov.w	r0, #0
 800c406:	f380 8814 	msr	CONTROL, r0
 800c40a:	b662      	cpsie	i
 800c40c:	b661      	cpsie	f
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	df00      	svc	0
 800c418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c41a:	bf00      	nop
 800c41c:	e000ed08 	.word	0xe000ed08

0800c420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c426:	4b44      	ldr	r3, [pc, #272]	; (800c538 <xPortStartScheduler+0x118>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a44      	ldr	r2, [pc, #272]	; (800c53c <xPortStartScheduler+0x11c>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d109      	bne.n	800c444 <xPortStartScheduler+0x24>
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	613b      	str	r3, [r7, #16]
 800c442:	e7fe      	b.n	800c442 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c444:	4b3c      	ldr	r3, [pc, #240]	; (800c538 <xPortStartScheduler+0x118>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a3d      	ldr	r2, [pc, #244]	; (800c540 <xPortStartScheduler+0x120>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d109      	bne.n	800c462 <xPortStartScheduler+0x42>
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	60fb      	str	r3, [r7, #12]
 800c460:	e7fe      	b.n	800c460 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c462:	4b38      	ldr	r3, [pc, #224]	; (800c544 <xPortStartScheduler+0x124>)
 800c464:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	22ff      	movs	r2, #255	; 0xff
 800c472:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c47c:	78fb      	ldrb	r3, [r7, #3]
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c484:	b2da      	uxtb	r2, r3
 800c486:	4b30      	ldr	r3, [pc, #192]	; (800c548 <xPortStartScheduler+0x128>)
 800c488:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c48a:	4b30      	ldr	r3, [pc, #192]	; (800c54c <xPortStartScheduler+0x12c>)
 800c48c:	2207      	movs	r2, #7
 800c48e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c490:	e009      	b.n	800c4a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c492:	4b2e      	ldr	r3, [pc, #184]	; (800c54c <xPortStartScheduler+0x12c>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3b01      	subs	r3, #1
 800c498:	4a2c      	ldr	r2, [pc, #176]	; (800c54c <xPortStartScheduler+0x12c>)
 800c49a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c49c:	78fb      	ldrb	r3, [r7, #3]
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	005b      	lsls	r3, r3, #1
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4a6:	78fb      	ldrb	r3, [r7, #3]
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4ae:	2b80      	cmp	r3, #128	; 0x80
 800c4b0:	d0ef      	beq.n	800c492 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4b2:	4b26      	ldr	r3, [pc, #152]	; (800c54c <xPortStartScheduler+0x12c>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f1c3 0307 	rsb	r3, r3, #7
 800c4ba:	2b04      	cmp	r3, #4
 800c4bc:	d009      	beq.n	800c4d2 <xPortStartScheduler+0xb2>
 800c4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	60bb      	str	r3, [r7, #8]
 800c4d0:	e7fe      	b.n	800c4d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4d2:	4b1e      	ldr	r3, [pc, #120]	; (800c54c <xPortStartScheduler+0x12c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	021b      	lsls	r3, r3, #8
 800c4d8:	4a1c      	ldr	r2, [pc, #112]	; (800c54c <xPortStartScheduler+0x12c>)
 800c4da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4dc:	4b1b      	ldr	r3, [pc, #108]	; (800c54c <xPortStartScheduler+0x12c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c4e4:	4a19      	ldr	r2, [pc, #100]	; (800c54c <xPortStartScheduler+0x12c>)
 800c4e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4f0:	4b17      	ldr	r3, [pc, #92]	; (800c550 <xPortStartScheduler+0x130>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a16      	ldr	r2, [pc, #88]	; (800c550 <xPortStartScheduler+0x130>)
 800c4f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c4fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4fc:	4b14      	ldr	r3, [pc, #80]	; (800c550 <xPortStartScheduler+0x130>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a13      	ldr	r2, [pc, #76]	; (800c550 <xPortStartScheduler+0x130>)
 800c502:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c506:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c508:	f000 f8d6 	bl	800c6b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c50c:	4b11      	ldr	r3, [pc, #68]	; (800c554 <xPortStartScheduler+0x134>)
 800c50e:	2200      	movs	r2, #0
 800c510:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c512:	f000 f8f5 	bl	800c700 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c516:	4b10      	ldr	r3, [pc, #64]	; (800c558 <xPortStartScheduler+0x138>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a0f      	ldr	r2, [pc, #60]	; (800c558 <xPortStartScheduler+0x138>)
 800c51c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c520:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c522:	f7ff ff69 	bl	800c3f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c526:	f7fe ff63 	bl	800b3f0 <vTaskSwitchContext>
	prvTaskExitError();
 800c52a:	f7ff ff25 	bl	800c378 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c52e:	2300      	movs	r3, #0
}
 800c530:	4618      	mov	r0, r3
 800c532:	3718      	adds	r7, #24
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	e000ed00 	.word	0xe000ed00
 800c53c:	410fc271 	.word	0x410fc271
 800c540:	410fc270 	.word	0x410fc270
 800c544:	e000e400 	.word	0xe000e400
 800c548:	20000f60 	.word	0x20000f60
 800c54c:	20000f64 	.word	0x20000f64
 800c550:	e000ed20 	.word	0xe000ed20
 800c554:	200001c4 	.word	0x200001c4
 800c558:	e000ef34 	.word	0xe000ef34

0800c55c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c574:	4b0e      	ldr	r3, [pc, #56]	; (800c5b0 <vPortEnterCritical+0x54>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	3301      	adds	r3, #1
 800c57a:	4a0d      	ldr	r2, [pc, #52]	; (800c5b0 <vPortEnterCritical+0x54>)
 800c57c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c57e:	4b0c      	ldr	r3, [pc, #48]	; (800c5b0 <vPortEnterCritical+0x54>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b01      	cmp	r3, #1
 800c584:	d10e      	bne.n	800c5a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c586:	4b0b      	ldr	r3, [pc, #44]	; (800c5b4 <vPortEnterCritical+0x58>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d009      	beq.n	800c5a4 <vPortEnterCritical+0x48>
 800c590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	603b      	str	r3, [r7, #0]
 800c5a2:	e7fe      	b.n	800c5a2 <vPortEnterCritical+0x46>
	}
}
 800c5a4:	bf00      	nop
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	200001c4 	.word	0x200001c4
 800c5b4:	e000ed04 	.word	0xe000ed04

0800c5b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5be:	4b11      	ldr	r3, [pc, #68]	; (800c604 <vPortExitCritical+0x4c>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d109      	bne.n	800c5da <vPortExitCritical+0x22>
 800c5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	607b      	str	r3, [r7, #4]
 800c5d8:	e7fe      	b.n	800c5d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c5da:	4b0a      	ldr	r3, [pc, #40]	; (800c604 <vPortExitCritical+0x4c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	4a08      	ldr	r2, [pc, #32]	; (800c604 <vPortExitCritical+0x4c>)
 800c5e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5e4:	4b07      	ldr	r3, [pc, #28]	; (800c604 <vPortExitCritical+0x4c>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d104      	bne.n	800c5f6 <vPortExitCritical+0x3e>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c5f6:	bf00      	nop
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	200001c4 	.word	0x200001c4
	...

0800c610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c610:	f3ef 8009 	mrs	r0, PSP
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	4b15      	ldr	r3, [pc, #84]	; (800c670 <pxCurrentTCBConst>)
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	f01e 0f10 	tst.w	lr, #16
 800c620:	bf08      	it	eq
 800c622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62a:	6010      	str	r0, [r2, #0]
 800c62c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c630:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c634:	f380 8811 	msr	BASEPRI, r0
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f7fe fed6 	bl	800b3f0 <vTaskSwitchContext>
 800c644:	f04f 0000 	mov.w	r0, #0
 800c648:	f380 8811 	msr	BASEPRI, r0
 800c64c:	bc09      	pop	{r0, r3}
 800c64e:	6819      	ldr	r1, [r3, #0]
 800c650:	6808      	ldr	r0, [r1, #0]
 800c652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c656:	f01e 0f10 	tst.w	lr, #16
 800c65a:	bf08      	it	eq
 800c65c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c660:	f380 8809 	msr	PSP, r0
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	f3af 8000 	nop.w

0800c670 <pxCurrentTCBConst>:
 800c670:	20000934 	.word	0x20000934
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c674:	bf00      	nop
 800c676:	bf00      	nop

0800c678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c690:	f7fe fdf6 	bl	800b280 <xTaskIncrementTick>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d003      	beq.n	800c6a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c69a:	4b06      	ldr	r3, [pc, #24]	; (800c6b4 <SysTick_Handler+0x3c>)
 800c69c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a0:	601a      	str	r2, [r3, #0]
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	e000ed04 	.word	0xe000ed04

0800c6b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6bc:	4b0b      	ldr	r3, [pc, #44]	; (800c6ec <vPortSetupTimerInterrupt+0x34>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6c2:	4b0b      	ldr	r3, [pc, #44]	; (800c6f0 <vPortSetupTimerInterrupt+0x38>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6c8:	4b0a      	ldr	r3, [pc, #40]	; (800c6f4 <vPortSetupTimerInterrupt+0x3c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4a0a      	ldr	r2, [pc, #40]	; (800c6f8 <vPortSetupTimerInterrupt+0x40>)
 800c6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c6d2:	099b      	lsrs	r3, r3, #6
 800c6d4:	4a09      	ldr	r2, [pc, #36]	; (800c6fc <vPortSetupTimerInterrupt+0x44>)
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6da:	4b04      	ldr	r3, [pc, #16]	; (800c6ec <vPortSetupTimerInterrupt+0x34>)
 800c6dc:	2207      	movs	r2, #7
 800c6de:	601a      	str	r2, [r3, #0]
}
 800c6e0:	bf00      	nop
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	e000e010 	.word	0xe000e010
 800c6f0:	e000e018 	.word	0xe000e018
 800c6f4:	20000040 	.word	0x20000040
 800c6f8:	10624dd3 	.word	0x10624dd3
 800c6fc:	e000e014 	.word	0xe000e014

0800c700 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c700:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c710 <vPortEnableVFP+0x10>
 800c704:	6801      	ldr	r1, [r0, #0]
 800c706:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c70a:	6001      	str	r1, [r0, #0]
 800c70c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c70e:	bf00      	nop
 800c710:	e000ed88 	.word	0xe000ed88

0800c714 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c71a:	f3ef 8305 	mrs	r3, IPSR
 800c71e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2b0f      	cmp	r3, #15
 800c724:	d913      	bls.n	800c74e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c726:	4a16      	ldr	r2, [pc, #88]	; (800c780 <vPortValidateInterruptPriority+0x6c>)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	4413      	add	r3, r2
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c730:	4b14      	ldr	r3, [pc, #80]	; (800c784 <vPortValidateInterruptPriority+0x70>)
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	7afa      	ldrb	r2, [r7, #11]
 800c736:	429a      	cmp	r2, r3
 800c738:	d209      	bcs.n	800c74e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73e:	f383 8811 	msr	BASEPRI, r3
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	607b      	str	r3, [r7, #4]
 800c74c:	e7fe      	b.n	800c74c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c74e:	4b0e      	ldr	r3, [pc, #56]	; (800c788 <vPortValidateInterruptPriority+0x74>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c756:	4b0d      	ldr	r3, [pc, #52]	; (800c78c <vPortValidateInterruptPriority+0x78>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d909      	bls.n	800c772 <vPortValidateInterruptPriority+0x5e>
 800c75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	603b      	str	r3, [r7, #0]
 800c770:	e7fe      	b.n	800c770 <vPortValidateInterruptPriority+0x5c>
	}
 800c772:	bf00      	nop
 800c774:	3714      	adds	r7, #20
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop
 800c780:	e000e3f0 	.word	0xe000e3f0
 800c784:	20000f60 	.word	0x20000f60
 800c788:	e000ed0c 	.word	0xe000ed0c
 800c78c:	20000f64 	.word	0x20000f64

0800c790 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b08a      	sub	sp, #40	; 0x28
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c798:	2300      	movs	r3, #0
 800c79a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c79c:	f7fe fca4 	bl	800b0e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7a0:	4b57      	ldr	r3, [pc, #348]	; (800c900 <pvPortMalloc+0x170>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d101      	bne.n	800c7ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7a8:	f000 f90c 	bl	800c9c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7ac:	4b55      	ldr	r3, [pc, #340]	; (800c904 <pvPortMalloc+0x174>)
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4013      	ands	r3, r2
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f040 808c 	bne.w	800c8d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d01c      	beq.n	800c7fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c7c0:	2208      	movs	r2, #8
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f003 0307 	and.w	r3, r3, #7
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d013      	beq.n	800c7fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f023 0307 	bic.w	r3, r3, #7
 800c7d8:	3308      	adds	r3, #8
 800c7da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f003 0307 	and.w	r3, r3, #7
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d009      	beq.n	800c7fa <pvPortMalloc+0x6a>
 800c7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ea:	f383 8811 	msr	BASEPRI, r3
 800c7ee:	f3bf 8f6f 	isb	sy
 800c7f2:	f3bf 8f4f 	dsb	sy
 800c7f6:	617b      	str	r3, [r7, #20]
 800c7f8:	e7fe      	b.n	800c7f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d068      	beq.n	800c8d2 <pvPortMalloc+0x142>
 800c800:	4b41      	ldr	r3, [pc, #260]	; (800c908 <pvPortMalloc+0x178>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	429a      	cmp	r2, r3
 800c808:	d863      	bhi.n	800c8d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c80a:	4b40      	ldr	r3, [pc, #256]	; (800c90c <pvPortMalloc+0x17c>)
 800c80c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c80e:	4b3f      	ldr	r3, [pc, #252]	; (800c90c <pvPortMalloc+0x17c>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c814:	e004      	b.n	800c820 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	429a      	cmp	r2, r3
 800c828:	d903      	bls.n	800c832 <pvPortMalloc+0xa2>
 800c82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1f1      	bne.n	800c816 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c832:	4b33      	ldr	r3, [pc, #204]	; (800c900 <pvPortMalloc+0x170>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c838:	429a      	cmp	r2, r3
 800c83a:	d04a      	beq.n	800c8d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c83c:	6a3b      	ldr	r3, [r7, #32]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2208      	movs	r2, #8
 800c842:	4413      	add	r3, r2
 800c844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	6a3b      	ldr	r3, [r7, #32]
 800c84c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	1ad2      	subs	r2, r2, r3
 800c856:	2308      	movs	r3, #8
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d91e      	bls.n	800c89c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c85e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4413      	add	r3, r2
 800c864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	f003 0307 	and.w	r3, r3, #7
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d009      	beq.n	800c884 <pvPortMalloc+0xf4>
 800c870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	613b      	str	r3, [r7, #16]
 800c882:	e7fe      	b.n	800c882 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c886:	685a      	ldr	r2, [r3, #4]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	1ad2      	subs	r2, r2, r3
 800c88c:	69bb      	ldr	r3, [r7, #24]
 800c88e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c896:	69b8      	ldr	r0, [r7, #24]
 800c898:	f000 f8f6 	bl	800ca88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c89c:	4b1a      	ldr	r3, [pc, #104]	; (800c908 <pvPortMalloc+0x178>)
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	4a18      	ldr	r2, [pc, #96]	; (800c908 <pvPortMalloc+0x178>)
 800c8a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8aa:	4b17      	ldr	r3, [pc, #92]	; (800c908 <pvPortMalloc+0x178>)
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	4b18      	ldr	r3, [pc, #96]	; (800c910 <pvPortMalloc+0x180>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d203      	bcs.n	800c8be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8b6:	4b14      	ldr	r3, [pc, #80]	; (800c908 <pvPortMalloc+0x178>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a15      	ldr	r2, [pc, #84]	; (800c910 <pvPortMalloc+0x180>)
 800c8bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c0:	685a      	ldr	r2, [r3, #4]
 800c8c2:	4b10      	ldr	r3, [pc, #64]	; (800c904 <pvPortMalloc+0x174>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	431a      	orrs	r2, r3
 800c8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8d2:	f7fe fc17 	bl	800b104 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	f003 0307 	and.w	r3, r3, #7
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d009      	beq.n	800c8f4 <pvPortMalloc+0x164>
 800c8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	60fb      	str	r3, [r7, #12]
 800c8f2:	e7fe      	b.n	800c8f2 <pvPortMalloc+0x162>
	return pvReturn;
 800c8f4:	69fb      	ldr	r3, [r7, #28]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3728      	adds	r7, #40	; 0x28
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	20001b28 	.word	0x20001b28
 800c904:	20001b34 	.word	0x20001b34
 800c908:	20001b2c 	.word	0x20001b2c
 800c90c:	20001b20 	.word	0x20001b20
 800c910:	20001b30 	.word	0x20001b30

0800c914 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d046      	beq.n	800c9b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c926:	2308      	movs	r3, #8
 800c928:	425b      	negs	r3, r3
 800c92a:	697a      	ldr	r2, [r7, #20]
 800c92c:	4413      	add	r3, r2
 800c92e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	685a      	ldr	r2, [r3, #4]
 800c938:	4b20      	ldr	r3, [pc, #128]	; (800c9bc <vPortFree+0xa8>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4013      	ands	r3, r2
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d109      	bne.n	800c956 <vPortFree+0x42>
 800c942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c946:	f383 8811 	msr	BASEPRI, r3
 800c94a:	f3bf 8f6f 	isb	sy
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	60fb      	str	r3, [r7, #12]
 800c954:	e7fe      	b.n	800c954 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d009      	beq.n	800c972 <vPortFree+0x5e>
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	60bb      	str	r3, [r7, #8]
 800c970:	e7fe      	b.n	800c970 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	4b11      	ldr	r3, [pc, #68]	; (800c9bc <vPortFree+0xa8>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4013      	ands	r3, r2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d019      	beq.n	800c9b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d115      	bne.n	800c9b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	4b0b      	ldr	r3, [pc, #44]	; (800c9bc <vPortFree+0xa8>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	43db      	mvns	r3, r3
 800c992:	401a      	ands	r2, r3
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c998:	f7fe fba6 	bl	800b0e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	685a      	ldr	r2, [r3, #4]
 800c9a0:	4b07      	ldr	r3, [pc, #28]	; (800c9c0 <vPortFree+0xac>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	4a06      	ldr	r2, [pc, #24]	; (800c9c0 <vPortFree+0xac>)
 800c9a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9aa:	6938      	ldr	r0, [r7, #16]
 800c9ac:	f000 f86c 	bl	800ca88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c9b0:	f7fe fba8 	bl	800b104 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9b4:	bf00      	nop
 800c9b6:	3718      	adds	r7, #24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	20001b34 	.word	0x20001b34
 800c9c0:	20001b2c 	.word	0x20001b2c

0800c9c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b085      	sub	sp, #20
 800c9c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c9ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9d0:	4b27      	ldr	r3, [pc, #156]	; (800ca70 <prvHeapInit+0xac>)
 800c9d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f003 0307 	and.w	r3, r3, #7
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00c      	beq.n	800c9f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	3307      	adds	r3, #7
 800c9e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f023 0307 	bic.w	r3, r3, #7
 800c9ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9ec:	68ba      	ldr	r2, [r7, #8]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	4a1f      	ldr	r2, [pc, #124]	; (800ca70 <prvHeapInit+0xac>)
 800c9f4:	4413      	add	r3, r2
 800c9f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9fc:	4a1d      	ldr	r2, [pc, #116]	; (800ca74 <prvHeapInit+0xb0>)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca02:	4b1c      	ldr	r3, [pc, #112]	; (800ca74 <prvHeapInit+0xb0>)
 800ca04:	2200      	movs	r2, #0
 800ca06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca10:	2208      	movs	r2, #8
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	1a9b      	subs	r3, r3, r2
 800ca16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f023 0307 	bic.w	r3, r3, #7
 800ca1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	4a15      	ldr	r2, [pc, #84]	; (800ca78 <prvHeapInit+0xb4>)
 800ca24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca26:	4b14      	ldr	r3, [pc, #80]	; (800ca78 <prvHeapInit+0xb4>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca2e:	4b12      	ldr	r3, [pc, #72]	; (800ca78 <prvHeapInit+0xb4>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2200      	movs	r2, #0
 800ca34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	68fa      	ldr	r2, [r7, #12]
 800ca3e:	1ad2      	subs	r2, r2, r3
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca44:	4b0c      	ldr	r3, [pc, #48]	; (800ca78 <prvHeapInit+0xb4>)
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	4a0a      	ldr	r2, [pc, #40]	; (800ca7c <prvHeapInit+0xb8>)
 800ca52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	4a09      	ldr	r2, [pc, #36]	; (800ca80 <prvHeapInit+0xbc>)
 800ca5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca5c:	4b09      	ldr	r3, [pc, #36]	; (800ca84 <prvHeapInit+0xc0>)
 800ca5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca62:	601a      	str	r2, [r3, #0]
}
 800ca64:	bf00      	nop
 800ca66:	3714      	adds	r7, #20
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr
 800ca70:	20000f68 	.word	0x20000f68
 800ca74:	20001b20 	.word	0x20001b20
 800ca78:	20001b28 	.word	0x20001b28
 800ca7c:	20001b30 	.word	0x20001b30
 800ca80:	20001b2c 	.word	0x20001b2c
 800ca84:	20001b34 	.word	0x20001b34

0800ca88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca90:	4b28      	ldr	r3, [pc, #160]	; (800cb34 <prvInsertBlockIntoFreeList+0xac>)
 800ca92:	60fb      	str	r3, [r7, #12]
 800ca94:	e002      	b.n	800ca9c <prvInsertBlockIntoFreeList+0x14>
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d8f7      	bhi.n	800ca96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	68ba      	ldr	r2, [r7, #8]
 800cab0:	4413      	add	r3, r2
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d108      	bne.n	800caca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	685a      	ldr	r2, [r3, #4]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	441a      	add	r2, r3
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	441a      	add	r2, r3
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d118      	bne.n	800cb10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	4b15      	ldr	r3, [pc, #84]	; (800cb38 <prvInsertBlockIntoFreeList+0xb0>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d00d      	beq.n	800cb06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	685a      	ldr	r2, [r3, #4]
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	441a      	add	r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	601a      	str	r2, [r3, #0]
 800cb04:	e008      	b.n	800cb18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb06:	4b0c      	ldr	r3, [pc, #48]	; (800cb38 <prvInsertBlockIntoFreeList+0xb0>)
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	601a      	str	r2, [r3, #0]
 800cb0e:	e003      	b.n	800cb18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d002      	beq.n	800cb26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb26:	bf00      	nop
 800cb28:	3714      	adds	r7, #20
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	20001b20 	.word	0x20001b20
 800cb38:	20001b28 	.word	0x20001b28

0800cb3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb40:	2200      	movs	r2, #0
 800cb42:	4912      	ldr	r1, [pc, #72]	; (800cb8c <MX_USB_DEVICE_Init+0x50>)
 800cb44:	4812      	ldr	r0, [pc, #72]	; (800cb90 <MX_USB_DEVICE_Init+0x54>)
 800cb46:	f7fb faa8 	bl	800809a <USBD_Init>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d001      	beq.n	800cb54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb50:	f7f4 fda0 	bl	8001694 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb54:	490f      	ldr	r1, [pc, #60]	; (800cb94 <MX_USB_DEVICE_Init+0x58>)
 800cb56:	480e      	ldr	r0, [pc, #56]	; (800cb90 <MX_USB_DEVICE_Init+0x54>)
 800cb58:	f7fb faca 	bl	80080f0 <USBD_RegisterClass>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb62:	f7f4 fd97 	bl	8001694 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cb66:	490c      	ldr	r1, [pc, #48]	; (800cb98 <MX_USB_DEVICE_Init+0x5c>)
 800cb68:	4809      	ldr	r0, [pc, #36]	; (800cb90 <MX_USB_DEVICE_Init+0x54>)
 800cb6a:	f7fb fa27 	bl	8007fbc <USBD_CDC_RegisterInterface>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d001      	beq.n	800cb78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cb74:	f7f4 fd8e 	bl	8001694 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cb78:	4805      	ldr	r0, [pc, #20]	; (800cb90 <MX_USB_DEVICE_Init+0x54>)
 800cb7a:	f7fb fad3 	bl	8008124 <USBD_Start>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d001      	beq.n	800cb88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cb84:	f7f4 fd86 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cb88:	bf00      	nop
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	200001d8 	.word	0x200001d8
 800cb90:	2000c190 	.word	0x2000c190
 800cb94:	200000c0 	.word	0x200000c0
 800cb98:	200001c8 	.word	0x200001c8

0800cb9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cba0:	2200      	movs	r2, #0
 800cba2:	4905      	ldr	r1, [pc, #20]	; (800cbb8 <CDC_Init_FS+0x1c>)
 800cba4:	4805      	ldr	r0, [pc, #20]	; (800cbbc <CDC_Init_FS+0x20>)
 800cba6:	f7fb fa20 	bl	8007fea <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbaa:	4905      	ldr	r1, [pc, #20]	; (800cbc0 <CDC_Init_FS+0x24>)
 800cbac:	4803      	ldr	r0, [pc, #12]	; (800cbbc <CDC_Init_FS+0x20>)
 800cbae:	f7fb fa36 	bl	800801e <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800cbb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	2000c83c 	.word	0x2000c83c
 800cbbc:	2000c190 	.word	0x2000c190
 800cbc0:	2000c454 	.word	0x2000c454

0800cbc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800cbc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	6039      	str	r1, [r7, #0]
 800cbde:	71fb      	strb	r3, [r7, #7]
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch(cmd)
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	2b23      	cmp	r3, #35	; 0x23
 800cbe8:	d84a      	bhi.n	800cc80 <CDC_Control_FS+0xac>
 800cbea:	a201      	add	r2, pc, #4	; (adr r2, 800cbf0 <CDC_Control_FS+0x1c>)
 800cbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf0:	0800cc81 	.word	0x0800cc81
 800cbf4:	0800cc81 	.word	0x0800cc81
 800cbf8:	0800cc81 	.word	0x0800cc81
 800cbfc:	0800cc81 	.word	0x0800cc81
 800cc00:	0800cc81 	.word	0x0800cc81
 800cc04:	0800cc81 	.word	0x0800cc81
 800cc08:	0800cc81 	.word	0x0800cc81
 800cc0c:	0800cc81 	.word	0x0800cc81
 800cc10:	0800cc81 	.word	0x0800cc81
 800cc14:	0800cc81 	.word	0x0800cc81
 800cc18:	0800cc81 	.word	0x0800cc81
 800cc1c:	0800cc81 	.word	0x0800cc81
 800cc20:	0800cc81 	.word	0x0800cc81
 800cc24:	0800cc81 	.word	0x0800cc81
 800cc28:	0800cc81 	.word	0x0800cc81
 800cc2c:	0800cc81 	.word	0x0800cc81
 800cc30:	0800cc81 	.word	0x0800cc81
 800cc34:	0800cc81 	.word	0x0800cc81
 800cc38:	0800cc81 	.word	0x0800cc81
 800cc3c:	0800cc81 	.word	0x0800cc81
 800cc40:	0800cc81 	.word	0x0800cc81
 800cc44:	0800cc81 	.word	0x0800cc81
 800cc48:	0800cc81 	.word	0x0800cc81
 800cc4c:	0800cc81 	.word	0x0800cc81
 800cc50:	0800cc81 	.word	0x0800cc81
 800cc54:	0800cc81 	.word	0x0800cc81
 800cc58:	0800cc81 	.word	0x0800cc81
 800cc5c:	0800cc81 	.word	0x0800cc81
 800cc60:	0800cc81 	.word	0x0800cc81
 800cc64:	0800cc81 	.word	0x0800cc81
 800cc68:	0800cc81 	.word	0x0800cc81
 800cc6c:	0800cc81 	.word	0x0800cc81
 800cc70:	0800cc81 	.word	0x0800cc81
 800cc74:	0800cc81 	.word	0x0800cc81
 800cc78:	0800cc81 	.word	0x0800cc81
 800cc7c:	0800cc81 	.word	0x0800cc81
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800cc80:	bf00      	nop
	}

	return (USBD_OK);
 800cc82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	370c      	adds	r7, #12
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(counter == 0){
 800cc9a:	4b13      	ldr	r3, [pc, #76]	; (800cce8 <CDC_Receive_FS+0x58>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d106      	bne.n	800ccb2 <CDC_Receive_FS+0x22>

		//		if(osMutexAcquire(usb_data_mutex, 10) == osOK){
		memcpy(&usb_data_buffer[0], Buf, *Len);
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	461a      	mov	r2, r3
 800ccaa:	6879      	ldr	r1, [r7, #4]
 800ccac:	480f      	ldr	r0, [pc, #60]	; (800ccec <CDC_Receive_FS+0x5c>)
 800ccae:	f000 fcdb 	bl	800d668 <memcpy>

		/* Send Data to Queue */


	}
	++counter;
 800ccb2:	4b0d      	ldr	r3, [pc, #52]	; (800cce8 <CDC_Receive_FS+0x58>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	3301      	adds	r3, #1
 800ccba:	b2da      	uxtb	r2, r3
 800ccbc:	4b0a      	ldr	r3, [pc, #40]	; (800cce8 <CDC_Receive_FS+0x58>)
 800ccbe:	701a      	strb	r2, [r3, #0]
	if (counter == 4){
 800ccc0:	4b09      	ldr	r3, [pc, #36]	; (800cce8 <CDC_Receive_FS+0x58>)
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	2b04      	cmp	r3, #4
 800ccc8:	d102      	bne.n	800ccd0 <CDC_Receive_FS+0x40>
		counter = 0;
 800ccca:	4b07      	ldr	r3, [pc, #28]	; (800cce8 <CDC_Receive_FS+0x58>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	701a      	strb	r2, [r3, #0]
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ccd0:	6879      	ldr	r1, [r7, #4]
 800ccd2:	4807      	ldr	r0, [pc, #28]	; (800ccf0 <CDC_Receive_FS+0x60>)
 800ccd4:	f7fb f9a3 	bl	800801e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ccd8:	4805      	ldr	r0, [pc, #20]	; (800ccf0 <CDC_Receive_FS+0x60>)
 800ccda:	f7fb f9b4 	bl	8008046 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 800ccde:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	20001b38 	.word	0x20001b38
 800ccec:	20000000 	.word	0x20000000
 800ccf0:	2000c190 	.word	0x2000c190

0800ccf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	6039      	str	r1, [r7, #0]
 800ccfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	2212      	movs	r2, #18
 800cd04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd06:	4b03      	ldr	r3, [pc, #12]	; (800cd14 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr
 800cd14:	200001f8 	.word	0x200001f8

0800cd18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	6039      	str	r1, [r7, #0]
 800cd22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	2204      	movs	r2, #4
 800cd28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cd2a:	4b03      	ldr	r3, [pc, #12]	; (800cd38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr
 800cd38:	20000218 	.word	0x20000218

0800cd3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	6039      	str	r1, [r7, #0]
 800cd46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d105      	bne.n	800cd5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	4907      	ldr	r1, [pc, #28]	; (800cd70 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd52:	4808      	ldr	r0, [pc, #32]	; (800cd74 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd54:	f7fc f980 	bl	8009058 <USBD_GetString>
 800cd58:	e004      	b.n	800cd64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	4904      	ldr	r1, [pc, #16]	; (800cd70 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd5e:	4805      	ldr	r0, [pc, #20]	; (800cd74 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd60:	f7fc f97a 	bl	8009058 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd64:	4b02      	ldr	r3, [pc, #8]	; (800cd70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	2000cc24 	.word	0x2000cc24
 800cd74:	0800d760 	.word	0x0800d760

0800cd78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	4603      	mov	r3, r0
 800cd80:	6039      	str	r1, [r7, #0]
 800cd82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd84:	683a      	ldr	r2, [r7, #0]
 800cd86:	4904      	ldr	r1, [pc, #16]	; (800cd98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cd88:	4804      	ldr	r0, [pc, #16]	; (800cd9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cd8a:	f7fc f965 	bl	8009058 <USBD_GetString>
  return USBD_StrDesc;
 800cd8e:	4b02      	ldr	r3, [pc, #8]	; (800cd98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	2000cc24 	.word	0x2000cc24
 800cd9c:	0800d778 	.word	0x0800d778

0800cda0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	6039      	str	r1, [r7, #0]
 800cdaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	221a      	movs	r2, #26
 800cdb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cdb2:	f000 f855 	bl	800ce60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cdb6:	4b02      	ldr	r3, [pc, #8]	; (800cdc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	2000021c 	.word	0x2000021c

0800cdc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	4603      	mov	r3, r0
 800cdcc:	6039      	str	r1, [r7, #0]
 800cdce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cdd0:	79fb      	ldrb	r3, [r7, #7]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d105      	bne.n	800cde2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	4907      	ldr	r1, [pc, #28]	; (800cdf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cdda:	4808      	ldr	r0, [pc, #32]	; (800cdfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cddc:	f7fc f93c 	bl	8009058 <USBD_GetString>
 800cde0:	e004      	b.n	800cdec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	4904      	ldr	r1, [pc, #16]	; (800cdf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cde6:	4805      	ldr	r0, [pc, #20]	; (800cdfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cde8:	f7fc f936 	bl	8009058 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdec:	4b02      	ldr	r3, [pc, #8]	; (800cdf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	2000cc24 	.word	0x2000cc24
 800cdfc:	0800d78c 	.word	0x0800d78c

0800ce00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	4603      	mov	r3, r0
 800ce08:	6039      	str	r1, [r7, #0]
 800ce0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce0c:	79fb      	ldrb	r3, [r7, #7]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d105      	bne.n	800ce1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce12:	683a      	ldr	r2, [r7, #0]
 800ce14:	4907      	ldr	r1, [pc, #28]	; (800ce34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce16:	4808      	ldr	r0, [pc, #32]	; (800ce38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce18:	f7fc f91e 	bl	8009058 <USBD_GetString>
 800ce1c:	e004      	b.n	800ce28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce1e:	683a      	ldr	r2, [r7, #0]
 800ce20:	4904      	ldr	r1, [pc, #16]	; (800ce34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce22:	4805      	ldr	r0, [pc, #20]	; (800ce38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce24:	f7fc f918 	bl	8009058 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce28:	4b02      	ldr	r3, [pc, #8]	; (800ce34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	2000cc24 	.word	0x2000cc24
 800ce38:	0800d798 	.word	0x0800d798

0800ce3c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	4603      	mov	r3, r0
 800ce44:	6039      	str	r1, [r7, #0]
 800ce46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	220c      	movs	r2, #12
 800ce4c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ce4e:	4b03      	ldr	r3, [pc, #12]	; (800ce5c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	2000020c 	.word	0x2000020c

0800ce60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ce66:	4b0f      	ldr	r3, [pc, #60]	; (800cea4 <Get_SerialNum+0x44>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce6c:	4b0e      	ldr	r3, [pc, #56]	; (800cea8 <Get_SerialNum+0x48>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce72:	4b0e      	ldr	r3, [pc, #56]	; (800ceac <Get_SerialNum+0x4c>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d009      	beq.n	800ce9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce86:	2208      	movs	r2, #8
 800ce88:	4909      	ldr	r1, [pc, #36]	; (800ceb0 <Get_SerialNum+0x50>)
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f000 f814 	bl	800ceb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce90:	2204      	movs	r2, #4
 800ce92:	4908      	ldr	r1, [pc, #32]	; (800ceb4 <Get_SerialNum+0x54>)
 800ce94:	68b8      	ldr	r0, [r7, #8]
 800ce96:	f000 f80f 	bl	800ceb8 <IntToUnicode>
  }
}
 800ce9a:	bf00      	nop
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	1fff7590 	.word	0x1fff7590
 800cea8:	1fff7594 	.word	0x1fff7594
 800ceac:	1fff7598 	.word	0x1fff7598
 800ceb0:	2000021e 	.word	0x2000021e
 800ceb4:	2000022e 	.word	0x2000022e

0800ceb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b087      	sub	sp, #28
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	4613      	mov	r3, r2
 800cec4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ceca:	2300      	movs	r3, #0
 800cecc:	75fb      	strb	r3, [r7, #23]
 800cece:	e027      	b.n	800cf20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	0f1b      	lsrs	r3, r3, #28
 800ced4:	2b09      	cmp	r3, #9
 800ced6:	d80b      	bhi.n	800cef0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	0f1b      	lsrs	r3, r3, #28
 800cedc:	b2da      	uxtb	r2, r3
 800cede:	7dfb      	ldrb	r3, [r7, #23]
 800cee0:	005b      	lsls	r3, r3, #1
 800cee2:	4619      	mov	r1, r3
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	440b      	add	r3, r1
 800cee8:	3230      	adds	r2, #48	; 0x30
 800ceea:	b2d2      	uxtb	r2, r2
 800ceec:	701a      	strb	r2, [r3, #0]
 800ceee:	e00a      	b.n	800cf06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	0f1b      	lsrs	r3, r3, #28
 800cef4:	b2da      	uxtb	r2, r3
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
 800cef8:	005b      	lsls	r3, r3, #1
 800cefa:	4619      	mov	r1, r3
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	440b      	add	r3, r1
 800cf00:	3237      	adds	r2, #55	; 0x37
 800cf02:	b2d2      	uxtb	r2, r2
 800cf04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	011b      	lsls	r3, r3, #4
 800cf0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf0c:	7dfb      	ldrb	r3, [r7, #23]
 800cf0e:	005b      	lsls	r3, r3, #1
 800cf10:	3301      	adds	r3, #1
 800cf12:	68ba      	ldr	r2, [r7, #8]
 800cf14:	4413      	add	r3, r2
 800cf16:	2200      	movs	r2, #0
 800cf18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf1a:	7dfb      	ldrb	r3, [r7, #23]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	75fb      	strb	r3, [r7, #23]
 800cf20:	7dfa      	ldrb	r2, [r7, #23]
 800cf22:	79fb      	ldrb	r3, [r7, #7]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d3d3      	bcc.n	800ced0 <IntToUnicode+0x18>
  }
}
 800cf28:	bf00      	nop
 800cf2a:	371c      	adds	r7, #28
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a0d      	ldr	r2, [pc, #52]	; (800cf78 <HAL_PCD_MspInit+0x44>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d113      	bne.n	800cf6e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cf46:	4b0d      	ldr	r3, [pc, #52]	; (800cf7c <HAL_PCD_MspInit+0x48>)
 800cf48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf4a:	4a0c      	ldr	r2, [pc, #48]	; (800cf7c <HAL_PCD_MspInit+0x48>)
 800cf4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf50:	6593      	str	r3, [r2, #88]	; 0x58
 800cf52:	4b0a      	ldr	r3, [pc, #40]	; (800cf7c <HAL_PCD_MspInit+0x48>)
 800cf54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf5a:	60fb      	str	r3, [r7, #12]
 800cf5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 5, 0);
 800cf5e:	2200      	movs	r2, #0
 800cf60:	2105      	movs	r1, #5
 800cf62:	2043      	movs	r0, #67	; 0x43
 800cf64:	f7f5 fa7e 	bl	8002464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800cf68:	2043      	movs	r0, #67	; 0x43
 800cf6a:	f7f5 fa97 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cf6e:	bf00      	nop
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	40006800 	.word	0x40006800
 800cf7c:	40021000 	.word	0x40021000

0800cf80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800cf94:	4619      	mov	r1, r3
 800cf96:	4610      	mov	r0, r2
 800cf98:	f7fb f90d 	bl	80081b6 <USBD_LL_SetupStage>
}
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	460b      	mov	r3, r1
 800cfae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800cfb6:	78fb      	ldrb	r3, [r7, #3]
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	015b      	lsls	r3, r3, #5
 800cfbc:	4413      	add	r3, r2
 800cfbe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	78fb      	ldrb	r3, [r7, #3]
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	f7fb f940 	bl	800824c <USBD_LL_DataOutStage>
}
 800cfcc:	bf00      	nop
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800cfe6:	78fb      	ldrb	r3, [r7, #3]
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	015b      	lsls	r3, r3, #5
 800cfec:	4413      	add	r3, r2
 800cfee:	333c      	adds	r3, #60	; 0x3c
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	78fb      	ldrb	r3, [r7, #3]
 800cff4:	4619      	mov	r1, r3
 800cff6:	f7fb f99a 	bl	800832e <USBD_LL_DataInStage>
}
 800cffa:	bf00      	nop
 800cffc:	3708      	adds	r7, #8
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b082      	sub	sp, #8
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d010:	4618      	mov	r0, r3
 800d012:	f7fb faad 	bl	8008570 <USBD_LL_SOF>
}
 800d016:	bf00      	nop
 800d018:	3708      	adds	r7, #8
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d01e:	b580      	push	{r7, lr}
 800d020:	b084      	sub	sp, #16
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d026:	2301      	movs	r3, #1
 800d028:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	2b02      	cmp	r3, #2
 800d030:	d001      	beq.n	800d036 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d032:	f7f4 fb2f 	bl	8001694 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d03c:	7bfa      	ldrb	r2, [r7, #15]
 800d03e:	4611      	mov	r1, r2
 800d040:	4618      	mov	r0, r3
 800d042:	f7fb fa5a 	bl	80084fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7fb fa13 	bl	8008478 <USBD_LL_Reset>
}
 800d052:	bf00      	nop
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
	...

0800d05c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fb fa55 	bl	800851a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	699b      	ldr	r3, [r3, #24]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d005      	beq.n	800d084 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d078:	4b04      	ldr	r3, [pc, #16]	; (800d08c <HAL_PCD_SuspendCallback+0x30>)
 800d07a:	691b      	ldr	r3, [r3, #16]
 800d07c:	4a03      	ldr	r2, [pc, #12]	; (800d08c <HAL_PCD_SuspendCallback+0x30>)
 800d07e:	f043 0306 	orr.w	r3, r3, #6
 800d082:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d084:	bf00      	nop
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	e000ed00 	.word	0xe000ed00

0800d090 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	699b      	ldr	r3, [r3, #24]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d007      	beq.n	800d0b0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0a0:	4b08      	ldr	r3, [pc, #32]	; (800d0c4 <HAL_PCD_ResumeCallback+0x34>)
 800d0a2:	691b      	ldr	r3, [r3, #16]
 800d0a4:	4a07      	ldr	r2, [pc, #28]	; (800d0c4 <HAL_PCD_ResumeCallback+0x34>)
 800d0a6:	f023 0306 	bic.w	r3, r3, #6
 800d0aa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d0ac:	f000 fab2 	bl	800d614 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7fb fa44 	bl	8008544 <USBD_LL_Resume>
}
 800d0bc:	bf00      	nop
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	e000ed00 	.word	0xe000ed00

0800d0c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d0d0:	f7f7 f85e 	bl	8004190 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d0d4:	4a2b      	ldr	r2, [pc, #172]	; (800d184 <USBD_LL_Init+0xbc>)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	4a29      	ldr	r2, [pc, #164]	; (800d184 <USBD_LL_Init+0xbc>)
 800d0e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d0e4:	4b27      	ldr	r3, [pc, #156]	; (800d184 <USBD_LL_Init+0xbc>)
 800d0e6:	4a28      	ldr	r2, [pc, #160]	; (800d188 <USBD_LL_Init+0xc0>)
 800d0e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d0ea:	4b26      	ldr	r3, [pc, #152]	; (800d184 <USBD_LL_Init+0xbc>)
 800d0ec:	2208      	movs	r2, #8
 800d0ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d0f0:	4b24      	ldr	r3, [pc, #144]	; (800d184 <USBD_LL_Init+0xbc>)
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d0f6:	4b23      	ldr	r3, [pc, #140]	; (800d184 <USBD_LL_Init+0xbc>)
 800d0f8:	2202      	movs	r2, #2
 800d0fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d0fc:	4b21      	ldr	r3, [pc, #132]	; (800d184 <USBD_LL_Init+0xbc>)
 800d0fe:	2200      	movs	r2, #0
 800d100:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d102:	4b20      	ldr	r3, [pc, #128]	; (800d184 <USBD_LL_Init+0xbc>)
 800d104:	2200      	movs	r2, #0
 800d106:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d108:	4b1e      	ldr	r3, [pc, #120]	; (800d184 <USBD_LL_Init+0xbc>)
 800d10a:	2200      	movs	r2, #0
 800d10c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d10e:	4b1d      	ldr	r3, [pc, #116]	; (800d184 <USBD_LL_Init+0xbc>)
 800d110:	2200      	movs	r2, #0
 800d112:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d114:	481b      	ldr	r0, [pc, #108]	; (800d184 <USBD_LL_Init+0xbc>)
 800d116:	f7f6 f894 	bl	8003242 <HAL_PCD_Init>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d001      	beq.n	800d124 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d120:	f7f4 fab8 	bl	8001694 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d12a:	2318      	movs	r3, #24
 800d12c:	2200      	movs	r2, #0
 800d12e:	2100      	movs	r1, #0
 800d130:	f7f6 ff62 	bl	8003ff8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d13a:	2358      	movs	r3, #88	; 0x58
 800d13c:	2200      	movs	r2, #0
 800d13e:	2180      	movs	r1, #128	; 0x80
 800d140:	f7f6 ff5a 	bl	8003ff8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d14a:	23c0      	movs	r3, #192	; 0xc0
 800d14c:	2200      	movs	r2, #0
 800d14e:	2181      	movs	r1, #129	; 0x81
 800d150:	f7f6 ff52 	bl	8003ff8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d15a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d15e:	2200      	movs	r2, #0
 800d160:	2101      	movs	r1, #1
 800d162:	f7f6 ff49 	bl	8003ff8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d16c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d170:	2200      	movs	r2, #0
 800d172:	2182      	movs	r1, #130	; 0x82
 800d174:	f7f6 ff40 	bl	8003ff8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	2000ce24 	.word	0x2000ce24
 800d188:	40006800 	.word	0x40006800

0800d18c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d194:	2300      	movs	r3, #0
 800d196:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d198:	2300      	movs	r3, #0
 800d19a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7f6 f935 	bl	8003412 <HAL_PCD_Start>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d1ac:	7bbb      	ldrb	r3, [r7, #14]
 800d1ae:	2b03      	cmp	r3, #3
 800d1b0:	d816      	bhi.n	800d1e0 <USBD_LL_Start+0x54>
 800d1b2:	a201      	add	r2, pc, #4	; (adr r2, 800d1b8 <USBD_LL_Start+0x2c>)
 800d1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b8:	0800d1c9 	.word	0x0800d1c9
 800d1bc:	0800d1cf 	.word	0x0800d1cf
 800d1c0:	0800d1d5 	.word	0x0800d1d5
 800d1c4:	0800d1db 	.word	0x0800d1db
    case HAL_OK :
      usb_status = USBD_OK;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d1cc:	e00b      	b.n	800d1e6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1ce:	2302      	movs	r3, #2
 800d1d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d1d2:	e008      	b.n	800d1e6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d1d8:	e005      	b.n	800d1e6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1da:	2302      	movs	r3, #2
 800d1dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d1de:	e002      	b.n	800d1e6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d1e0:	2302      	movs	r3, #2
 800d1e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1e4:	bf00      	nop
  }
  return usb_status;
 800d1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	4608      	mov	r0, r1
 800d1fa:	4611      	mov	r1, r2
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	4603      	mov	r3, r0
 800d200:	70fb      	strb	r3, [r7, #3]
 800d202:	460b      	mov	r3, r1
 800d204:	70bb      	strb	r3, [r7, #2]
 800d206:	4613      	mov	r3, r2
 800d208:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d20a:	2300      	movs	r3, #0
 800d20c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d20e:	2300      	movs	r3, #0
 800d210:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d218:	78bb      	ldrb	r3, [r7, #2]
 800d21a:	883a      	ldrh	r2, [r7, #0]
 800d21c:	78f9      	ldrb	r1, [r7, #3]
 800d21e:	f7f6 fa8d 	bl	800373c <HAL_PCD_EP_Open>
 800d222:	4603      	mov	r3, r0
 800d224:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d226:	7bbb      	ldrb	r3, [r7, #14]
 800d228:	2b03      	cmp	r3, #3
 800d22a:	d817      	bhi.n	800d25c <USBD_LL_OpenEP+0x6c>
 800d22c:	a201      	add	r2, pc, #4	; (adr r2, 800d234 <USBD_LL_OpenEP+0x44>)
 800d22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d232:	bf00      	nop
 800d234:	0800d245 	.word	0x0800d245
 800d238:	0800d24b 	.word	0x0800d24b
 800d23c:	0800d251 	.word	0x0800d251
 800d240:	0800d257 	.word	0x0800d257
    case HAL_OK :
      usb_status = USBD_OK;
 800d244:	2300      	movs	r3, #0
 800d246:	73fb      	strb	r3, [r7, #15]
    break;
 800d248:	e00b      	b.n	800d262 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d24a:	2302      	movs	r3, #2
 800d24c:	73fb      	strb	r3, [r7, #15]
    break;
 800d24e:	e008      	b.n	800d262 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d250:	2301      	movs	r3, #1
 800d252:	73fb      	strb	r3, [r7, #15]
    break;
 800d254:	e005      	b.n	800d262 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d256:	2302      	movs	r3, #2
 800d258:	73fb      	strb	r3, [r7, #15]
    break;
 800d25a:	e002      	b.n	800d262 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d25c:	2302      	movs	r3, #2
 800d25e:	73fb      	strb	r3, [r7, #15]
    break;
 800d260:	bf00      	nop
  }
  return usb_status;
 800d262:	7bfb      	ldrb	r3, [r7, #15]
}
 800d264:	4618      	mov	r0, r3
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	460b      	mov	r3, r1
 800d276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d278:	2300      	movs	r3, #0
 800d27a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d286:	78fa      	ldrb	r2, [r7, #3]
 800d288:	4611      	mov	r1, r2
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7f6 fab6 	bl	80037fc <HAL_PCD_EP_Close>
 800d290:	4603      	mov	r3, r0
 800d292:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800d294:	7bbb      	ldrb	r3, [r7, #14]
 800d296:	2b03      	cmp	r3, #3
 800d298:	d816      	bhi.n	800d2c8 <USBD_LL_CloseEP+0x5c>
 800d29a:	a201      	add	r2, pc, #4	; (adr r2, 800d2a0 <USBD_LL_CloseEP+0x34>)
 800d29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a0:	0800d2b1 	.word	0x0800d2b1
 800d2a4:	0800d2b7 	.word	0x0800d2b7
 800d2a8:	0800d2bd 	.word	0x0800d2bd
 800d2ac:	0800d2c3 	.word	0x0800d2c3
    case HAL_OK :
      usb_status = USBD_OK;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2b4:	e00b      	b.n	800d2ce <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2b6:	2302      	movs	r3, #2
 800d2b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ba:	e008      	b.n	800d2ce <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	73fb      	strb	r3, [r7, #15]
    break;
 800d2c0:	e005      	b.n	800d2ce <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2c2:	2302      	movs	r3, #2
 800d2c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d2c6:	e002      	b.n	800d2ce <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d2cc:	bf00      	nop
  }
  return usb_status;  
 800d2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3710      	adds	r7, #16
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2f2:	78fa      	ldrb	r2, [r7, #3]
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7f6 fb4a 	bl	8003990 <HAL_PCD_EP_SetStall>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d300:	7bbb      	ldrb	r3, [r7, #14]
 800d302:	2b03      	cmp	r3, #3
 800d304:	d816      	bhi.n	800d334 <USBD_LL_StallEP+0x5c>
 800d306:	a201      	add	r2, pc, #4	; (adr r2, 800d30c <USBD_LL_StallEP+0x34>)
 800d308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d30c:	0800d31d 	.word	0x0800d31d
 800d310:	0800d323 	.word	0x0800d323
 800d314:	0800d329 	.word	0x0800d329
 800d318:	0800d32f 	.word	0x0800d32f
    case HAL_OK :
      usb_status = USBD_OK;
 800d31c:	2300      	movs	r3, #0
 800d31e:	73fb      	strb	r3, [r7, #15]
    break;
 800d320:	e00b      	b.n	800d33a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d322:	2302      	movs	r3, #2
 800d324:	73fb      	strb	r3, [r7, #15]
    break;
 800d326:	e008      	b.n	800d33a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d328:	2301      	movs	r3, #1
 800d32a:	73fb      	strb	r3, [r7, #15]
    break;
 800d32c:	e005      	b.n	800d33a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d32e:	2302      	movs	r3, #2
 800d330:	73fb      	strb	r3, [r7, #15]
    break;
 800d332:	e002      	b.n	800d33a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d334:	2302      	movs	r3, #2
 800d336:	73fb      	strb	r3, [r7, #15]
    break;
 800d338:	bf00      	nop
  }
  return usb_status;  
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	460b      	mov	r3, r1
 800d34e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d350:	2300      	movs	r3, #0
 800d352:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d35e:	78fa      	ldrb	r2, [r7, #3]
 800d360:	4611      	mov	r1, r2
 800d362:	4618      	mov	r0, r3
 800d364:	f7f6 fb6e 	bl	8003a44 <HAL_PCD_EP_ClrStall>
 800d368:	4603      	mov	r3, r0
 800d36a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d36c:	7bbb      	ldrb	r3, [r7, #14]
 800d36e:	2b03      	cmp	r3, #3
 800d370:	d816      	bhi.n	800d3a0 <USBD_LL_ClearStallEP+0x5c>
 800d372:	a201      	add	r2, pc, #4	; (adr r2, 800d378 <USBD_LL_ClearStallEP+0x34>)
 800d374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d378:	0800d389 	.word	0x0800d389
 800d37c:	0800d38f 	.word	0x0800d38f
 800d380:	0800d395 	.word	0x0800d395
 800d384:	0800d39b 	.word	0x0800d39b
    case HAL_OK :
      usb_status = USBD_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	73fb      	strb	r3, [r7, #15]
    break;
 800d38c:	e00b      	b.n	800d3a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d38e:	2302      	movs	r3, #2
 800d390:	73fb      	strb	r3, [r7, #15]
    break;
 800d392:	e008      	b.n	800d3a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d394:	2301      	movs	r3, #1
 800d396:	73fb      	strb	r3, [r7, #15]
    break;
 800d398:	e005      	b.n	800d3a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d39a:	2302      	movs	r3, #2
 800d39c:	73fb      	strb	r3, [r7, #15]
    break;
 800d39e:	e002      	b.n	800d3a6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d3a0:	2302      	movs	r3, #2
 800d3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a4:	bf00      	nop
  }
  return usb_status; 
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3c2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d3c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	da08      	bge.n	800d3de <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d3cc:	78fb      	ldrb	r3, [r7, #3]
 800d3ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3d2:	68fa      	ldr	r2, [r7, #12]
 800d3d4:	015b      	lsls	r3, r3, #5
 800d3d6:	4413      	add	r3, r2
 800d3d8:	332a      	adds	r3, #42	; 0x2a
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	e008      	b.n	800d3f0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d3de:	78fb      	ldrb	r3, [r7, #3]
 800d3e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	015b      	lsls	r3, r3, #5
 800d3e8:	4413      	add	r3, r2
 800d3ea:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800d3ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3714      	adds	r7, #20
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	460b      	mov	r3, r1
 800d406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d416:	78fa      	ldrb	r2, [r7, #3]
 800d418:	4611      	mov	r1, r2
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7f6 f969 	bl	80036f2 <HAL_PCD_SetAddress>
 800d420:	4603      	mov	r3, r0
 800d422:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d424:	7bbb      	ldrb	r3, [r7, #14]
 800d426:	2b03      	cmp	r3, #3
 800d428:	d816      	bhi.n	800d458 <USBD_LL_SetUSBAddress+0x5c>
 800d42a:	a201      	add	r2, pc, #4	; (adr r2, 800d430 <USBD_LL_SetUSBAddress+0x34>)
 800d42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d430:	0800d441 	.word	0x0800d441
 800d434:	0800d447 	.word	0x0800d447
 800d438:	0800d44d 	.word	0x0800d44d
 800d43c:	0800d453 	.word	0x0800d453
    case HAL_OK :
      usb_status = USBD_OK;
 800d440:	2300      	movs	r3, #0
 800d442:	73fb      	strb	r3, [r7, #15]
    break;
 800d444:	e00b      	b.n	800d45e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d446:	2302      	movs	r3, #2
 800d448:	73fb      	strb	r3, [r7, #15]
    break;
 800d44a:	e008      	b.n	800d45e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d44c:	2301      	movs	r3, #1
 800d44e:	73fb      	strb	r3, [r7, #15]
    break;
 800d450:	e005      	b.n	800d45e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d452:	2302      	movs	r3, #2
 800d454:	73fb      	strb	r3, [r7, #15]
    break;
 800d456:	e002      	b.n	800d45e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d458:	2302      	movs	r3, #2
 800d45a:	73fb      	strb	r3, [r7, #15]
    break;
 800d45c:	bf00      	nop
  }
  return usb_status;  
 800d45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b086      	sub	sp, #24
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	607a      	str	r2, [r7, #4]
 800d472:	461a      	mov	r2, r3
 800d474:	460b      	mov	r3, r1
 800d476:	72fb      	strb	r3, [r7, #11]
 800d478:	4613      	mov	r3, r2
 800d47a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d47c:	2300      	movs	r3, #0
 800d47e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d480:	2300      	movs	r3, #0
 800d482:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d48a:	893b      	ldrh	r3, [r7, #8]
 800d48c:	7af9      	ldrb	r1, [r7, #11]
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	f7f6 fa45 	bl	800391e <HAL_PCD_EP_Transmit>
 800d494:	4603      	mov	r3, r0
 800d496:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800d498:	7dbb      	ldrb	r3, [r7, #22]
 800d49a:	2b03      	cmp	r3, #3
 800d49c:	d816      	bhi.n	800d4cc <USBD_LL_Transmit+0x64>
 800d49e:	a201      	add	r2, pc, #4	; (adr r2, 800d4a4 <USBD_LL_Transmit+0x3c>)
 800d4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a4:	0800d4b5 	.word	0x0800d4b5
 800d4a8:	0800d4bb 	.word	0x0800d4bb
 800d4ac:	0800d4c1 	.word	0x0800d4c1
 800d4b0:	0800d4c7 	.word	0x0800d4c7
    case HAL_OK :
      usb_status = USBD_OK;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	75fb      	strb	r3, [r7, #23]
    break;
 800d4b8:	e00b      	b.n	800d4d2 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4ba:	2302      	movs	r3, #2
 800d4bc:	75fb      	strb	r3, [r7, #23]
    break;
 800d4be:	e008      	b.n	800d4d2 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	75fb      	strb	r3, [r7, #23]
    break;
 800d4c4:	e005      	b.n	800d4d2 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4c6:	2302      	movs	r3, #2
 800d4c8:	75fb      	strb	r3, [r7, #23]
    break;
 800d4ca:	e002      	b.n	800d4d2 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800d4cc:	2302      	movs	r3, #2
 800d4ce:	75fb      	strb	r3, [r7, #23]
    break;
 800d4d0:	bf00      	nop
  }
  return usb_status;    
 800d4d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3718      	adds	r7, #24
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b086      	sub	sp, #24
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	607a      	str	r2, [r7, #4]
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	72fb      	strb	r3, [r7, #11]
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d4fe:	893b      	ldrh	r3, [r7, #8]
 800d500:	7af9      	ldrb	r1, [r7, #11]
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	f7f6 f9bc 	bl	8003880 <HAL_PCD_EP_Receive>
 800d508:	4603      	mov	r3, r0
 800d50a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800d50c:	7dbb      	ldrb	r3, [r7, #22]
 800d50e:	2b03      	cmp	r3, #3
 800d510:	d816      	bhi.n	800d540 <USBD_LL_PrepareReceive+0x64>
 800d512:	a201      	add	r2, pc, #4	; (adr r2, 800d518 <USBD_LL_PrepareReceive+0x3c>)
 800d514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d518:	0800d529 	.word	0x0800d529
 800d51c:	0800d52f 	.word	0x0800d52f
 800d520:	0800d535 	.word	0x0800d535
 800d524:	0800d53b 	.word	0x0800d53b
    case HAL_OK :
      usb_status = USBD_OK;
 800d528:	2300      	movs	r3, #0
 800d52a:	75fb      	strb	r3, [r7, #23]
    break;
 800d52c:	e00b      	b.n	800d546 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d52e:	2302      	movs	r3, #2
 800d530:	75fb      	strb	r3, [r7, #23]
    break;
 800d532:	e008      	b.n	800d546 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d534:	2301      	movs	r3, #1
 800d536:	75fb      	strb	r3, [r7, #23]
    break;
 800d538:	e005      	b.n	800d546 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d53a:	2302      	movs	r3, #2
 800d53c:	75fb      	strb	r3, [r7, #23]
    break;
 800d53e:	e002      	b.n	800d546 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800d540:	2302      	movs	r3, #2
 800d542:	75fb      	strb	r3, [r7, #23]
    break;
 800d544:	bf00      	nop
  }
  return usb_status; 
 800d546:	7dfb      	ldrb	r3, [r7, #23]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3718      	adds	r7, #24
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	460b      	mov	r3, r1
 800d55a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d562:	78fa      	ldrb	r2, [r7, #3]
 800d564:	4611      	mov	r1, r2
 800d566:	4618      	mov	r0, r3
 800d568:	f7f6 f9c4 	bl	80038f4 <HAL_PCD_EP_GetRxCount>
 800d56c:	4603      	mov	r3, r0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
	...

0800d578 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	460b      	mov	r3, r1
 800d582:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d584:	78fb      	ldrb	r3, [r7, #3]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d002      	beq.n	800d590 <HAL_PCDEx_LPM_Callback+0x18>
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d013      	beq.n	800d5b6 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800d58e:	e023      	b.n	800d5d8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	699b      	ldr	r3, [r3, #24]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d007      	beq.n	800d5a8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d598:	f000 f83c 	bl	800d614 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d59c:	4b10      	ldr	r3, [pc, #64]	; (800d5e0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	4a0f      	ldr	r2, [pc, #60]	; (800d5e0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d5a2:	f023 0306 	bic.w	r3, r3, #6
 800d5a6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fa ffc8 	bl	8008544 <USBD_LL_Resume>
    break;
 800d5b4:	e010      	b.n	800d5d8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7fa ffac 	bl	800851a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	699b      	ldr	r3, [r3, #24]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d005      	beq.n	800d5d6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5ca:	4b05      	ldr	r3, [pc, #20]	; (800d5e0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d5cc:	691b      	ldr	r3, [r3, #16]
 800d5ce:	4a04      	ldr	r2, [pc, #16]	; (800d5e0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d5d0:	f043 0306 	orr.w	r3, r3, #6
 800d5d4:	6113      	str	r3, [r2, #16]
    break;   
 800d5d6:	bf00      	nop
}
 800d5d8:	bf00      	nop
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	e000ed00 	.word	0xe000ed00

0800d5e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d5ec:	4b03      	ldr	r3, [pc, #12]	; (800d5fc <USBD_static_malloc+0x18>)
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr
 800d5fa:	bf00      	nop
 800d5fc:	20001b3c 	.word	0x20001b3c

0800d600 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]

}
 800d608:	bf00      	nop
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d618:	f7f3 fe7e 	bl	8001318 <SystemClock_Config>
}
 800d61c:	bf00      	nop
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <__libc_init_array>:
 800d620:	b570      	push	{r4, r5, r6, lr}
 800d622:	4e0d      	ldr	r6, [pc, #52]	; (800d658 <__libc_init_array+0x38>)
 800d624:	4c0d      	ldr	r4, [pc, #52]	; (800d65c <__libc_init_array+0x3c>)
 800d626:	1ba4      	subs	r4, r4, r6
 800d628:	10a4      	asrs	r4, r4, #2
 800d62a:	2500      	movs	r5, #0
 800d62c:	42a5      	cmp	r5, r4
 800d62e:	d109      	bne.n	800d644 <__libc_init_array+0x24>
 800d630:	4e0b      	ldr	r6, [pc, #44]	; (800d660 <__libc_init_array+0x40>)
 800d632:	4c0c      	ldr	r4, [pc, #48]	; (800d664 <__libc_init_array+0x44>)
 800d634:	f000 f82c 	bl	800d690 <_init>
 800d638:	1ba4      	subs	r4, r4, r6
 800d63a:	10a4      	asrs	r4, r4, #2
 800d63c:	2500      	movs	r5, #0
 800d63e:	42a5      	cmp	r5, r4
 800d640:	d105      	bne.n	800d64e <__libc_init_array+0x2e>
 800d642:	bd70      	pop	{r4, r5, r6, pc}
 800d644:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d648:	4798      	blx	r3
 800d64a:	3501      	adds	r5, #1
 800d64c:	e7ee      	b.n	800d62c <__libc_init_array+0xc>
 800d64e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d652:	4798      	blx	r3
 800d654:	3501      	adds	r5, #1
 800d656:	e7f2      	b.n	800d63e <__libc_init_array+0x1e>
 800d658:	0800d8a4 	.word	0x0800d8a4
 800d65c:	0800d8a4 	.word	0x0800d8a4
 800d660:	0800d8a4 	.word	0x0800d8a4
 800d664:	0800d8a8 	.word	0x0800d8a8

0800d668 <memcpy>:
 800d668:	b510      	push	{r4, lr}
 800d66a:	1e43      	subs	r3, r0, #1
 800d66c:	440a      	add	r2, r1
 800d66e:	4291      	cmp	r1, r2
 800d670:	d100      	bne.n	800d674 <memcpy+0xc>
 800d672:	bd10      	pop	{r4, pc}
 800d674:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d67c:	e7f7      	b.n	800d66e <memcpy+0x6>

0800d67e <memset>:
 800d67e:	4402      	add	r2, r0
 800d680:	4603      	mov	r3, r0
 800d682:	4293      	cmp	r3, r2
 800d684:	d100      	bne.n	800d688 <memset+0xa>
 800d686:	4770      	bx	lr
 800d688:	f803 1b01 	strb.w	r1, [r3], #1
 800d68c:	e7f9      	b.n	800d682 <memset+0x4>
	...

0800d690 <_init>:
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	bf00      	nop
 800d694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d696:	bc08      	pop	{r3}
 800d698:	469e      	mov	lr, r3
 800d69a:	4770      	bx	lr

0800d69c <_fini>:
 800d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69e:	bf00      	nop
 800d6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6a2:	bc08      	pop	{r3}
 800d6a4:	469e      	mov	lr, r3
 800d6a6:	4770      	bx	lr
