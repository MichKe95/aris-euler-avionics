
IMUDummy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08007938  08007938  00017938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a04  08007a04  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08007a04  08007a04  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a04  08007a04  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a04  08007a04  00017a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08007a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001198  200001f0  08007bfc  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001388  08007bfc  00021388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017dca  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032d2  00000000  00000000  00037fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f68  00000000  00000000  0003b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de0  00000000  00000000  0003c228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024d03  00000000  00000000  0003d008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fb64  00000000  00000000  00061d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce848  00000000  00000000  0007186f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001400b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004078  00000000  00000000  00140134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007920 	.word	0x08007920

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08007920 	.word	0x08007920

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fab8 	bl	80007fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f853 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f911 	bl	80004b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000292:	f000 f8d1 	bl	8000438 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000296:	f006 f977 	bl	8006588 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t configured = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(100);
 800029e:	2064      	movs	r0, #100	; 0x64
 80002a0:	f000 fb1c 	bl	80008dc <HAL_Delay>
		HAL_SPI_StateTypeDef spistate;
		HAL_StatusTypeDef Test = HAL_ERROR;
 80002a4:	2301      	movs	r3, #1
 80002a6:	71bb      	strb	r3, [r7, #6]
		spistate = HAL_SPI_GetState(&hspi1);
 80002a8:	481f      	ldr	r0, [pc, #124]	; (8000328 <main+0xa8>)
 80002aa:	f003 fbbf 	bl	8003a2c <HAL_SPI_GetState>
 80002ae:	4603      	mov	r3, r0
 80002b0:	717b      	strb	r3, [r7, #5]

		if(configured == 0){
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d11b      	bne.n	80002f0 <main+0x70>
			uint8_t register_sensor_powerMgmt1[2] = { 0 };
 80002b8:	2300      	movs	r3, #0
 80002ba:	803b      	strh	r3, [r7, #0]
			register_sensor_powerMgmt1[0] = (0 << 7
 80002bc:	236b      	movs	r3, #107	; 0x6b
 80002be:	703b      	strb	r3, [r7, #0]
					| IMU20600_COMMAND_POWER_MANAGMENT1);
			register_sensor_powerMgmt1[1] =
					(0 << 7 | SENS_sleep_EN << 6 | SENS_clk_src << 0);
 80002c0:	2300      	movs	r3, #0
 80002c2:	019b      	lsls	r3, r3, #6
 80002c4:	b25a      	sxtb	r2, r3
 80002c6:	2301      	movs	r3, #1
 80002c8:	b25b      	sxtb	r3, r3
 80002ca:	4313      	orrs	r3, r2
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
			register_sensor_powerMgmt1[1] =
 80002d0:	707b      	strb	r3, [r7, #1]
			//UsbPrint("Tx_conf1: %x; Tx_conf2: %x\n", register_sensor_powerMgmt1[0],  register_sensor_powerMgmt1[1]);
			while (Test != HAL_OK) {
 80002d2:	e008      	b.n	80002e6 <main+0x66>
				//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
				Test = HAL_SPI_Transmit(&hspi1, register_sensor_powerMgmt1,
 80002d4:	4639      	mov	r1, r7
 80002d6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002da:	2202      	movs	r2, #2
 80002dc:	4812      	ldr	r0, [pc, #72]	; (8000328 <main+0xa8>)
 80002de:	f002 ff21 	bl	8003124 <HAL_SPI_Transmit>
 80002e2:	4603      	mov	r3, r0
 80002e4:	71bb      	strb	r3, [r7, #6]
			while (Test != HAL_OK) {
 80002e6:	79bb      	ldrb	r3, [r7, #6]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1f3      	bne.n	80002d4 <main+0x54>
						IMU20600_COMMAND_LENGTH, IMU20600_SPI_TIMEOUT);
				//HAL_Delay(1);
				//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
			}
			configured = 1;
 80002ec:	2301      	movs	r3, #1
 80002ee:	71fb      	strb	r3, [r7, #7]
		}
		HAL_Delay(100);
 80002f0:	2064      	movs	r0, #100	; 0x64
 80002f2:	f000 faf3 	bl	80008dc <HAL_Delay>


		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
		uint8_t powermanagmentread = (1 << 7
 80002f6:	23eb      	movs	r3, #235	; 0xeb
 80002f8:	713b      	strb	r3, [r7, #4]
				| IMU20600_COMMAND_POWER_MANAGMENT1);
		uint8_t powermanagmentreadrx = powermanagmentread;
 80002fa:	793b      	ldrb	r3, [r7, #4]
 80002fc:	70fb      	strb	r3, [r7, #3]
		Test = HAL_SPI_TransmitReceive(&hspi1, &powermanagmentread, &powermanagmentreadrx, 1, 10000000);
 80002fe:	1cfa      	adds	r2, r7, #3
 8000300:	1d39      	adds	r1, r7, #4
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <main+0xac>)
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	2301      	movs	r3, #1
 8000308:	4807      	ldr	r0, [pc, #28]	; (8000328 <main+0xa8>)
 800030a:	f003 f871 	bl	80033f0 <HAL_SPI_TransmitReceive>
 800030e:	4603      	mov	r3, r0
 8000310:	71bb      	strb	r3, [r7, #6]
		//HAL_Delay(1);
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
		UsbPrint("Tx: %x; Rx: %x\n", powermanagmentread,  powermanagmentreadrx);
 8000312:	793b      	ldrb	r3, [r7, #4]
 8000314:	4619      	mov	r1, r3
 8000316:	78fb      	ldrb	r3, [r7, #3]
 8000318:	461a      	mov	r2, r3
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <main+0xb0>)
 800031c:	f000 f8e2 	bl	80004e4 <UsbPrint>

		Test = HAL_ERROR;
 8000320:	2301      	movs	r3, #1
 8000322:	71bb      	strb	r3, [r7, #6]
	{
 8000324:	e7bb      	b.n	800029e <main+0x1e>
 8000326:	bf00      	nop
 8000328:	2000043c 	.word	0x2000043c
 800032c:	00989680 	.word	0x00989680
 8000330:	08007938 	.word	0x08007938

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b0ae      	sub	sp, #184	; 0xb8
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800033e:	2244      	movs	r2, #68	; 0x44
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f006 fec4 	bl	80070d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	605a      	str	r2, [r3, #4]
 8000352:	609a      	str	r2, [r3, #8]
 8000354:	60da      	str	r2, [r3, #12]
 8000356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000358:	463b      	mov	r3, r7
 800035a:	2260      	movs	r2, #96	; 0x60
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f006 feb6 	bl	80070d0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000364:	2310      	movs	r3, #16
 8000366:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000368:	2301      	movs	r3, #1
 800036a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000374:	2360      	movs	r3, #96	; 0x60
 8000376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2302      	movs	r3, #2
 800037c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000380:	2301      	movs	r3, #1
 8000382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000386:	2301      	movs	r3, #1
 8000388:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 800038c:	2328      	movs	r3, #40	; 0x28
 800038e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000392:	2307      	movs	r3, #7
 8000394:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000398:	2302      	movs	r3, #2
 800039a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800039e:	2302      	movs	r3, #2
 80003a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003a8:	4618      	mov	r0, r3
 80003aa:	f001 fd43 	bl	8001e34 <HAL_RCC_OscConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003b4:	f000 f8de 	bl	8000574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	230f      	movs	r3, #15
 80003ba:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	2303      	movs	r3, #3
 80003be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80003d0:	2104      	movs	r1, #4
 80003d2:	4618      	mov	r0, r3
 80003d4:	f002 f91c 	bl	8002610 <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003de:	f000 f8c9 	bl	8000574 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80003e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80003ec:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80003ee:	2301      	movs	r3, #1
 80003f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80003f2:	2301      	movs	r3, #1
 80003f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80003f6:	2318      	movs	r3, #24
 80003f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80003fa:	2307      	movs	r3, #7
 80003fc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003fe:	2302      	movs	r3, #2
 8000400:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000402:	2302      	movs	r3, #2
 8000404:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000406:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800040a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040c:	463b      	mov	r3, r7
 800040e:	4618      	mov	r0, r3
 8000410:	f002 faca 	bl	80029a8 <HAL_RCCEx_PeriphCLKConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800041a:	f000 f8ab 	bl	8000574 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800041e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000422:	f001 fca1 	bl	8001d68 <HAL_PWREx_ControlVoltageScaling>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800042c:	f000 f8a2 	bl	8000574 <Error_Handler>
  }
}
 8000430:	bf00      	nop
 8000432:	37b8      	adds	r7, #184	; 0xb8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800043c:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <MX_SPI1_Init+0x74>)
 800043e:	4a1c      	ldr	r2, [pc, #112]	; (80004b0 <MX_SPI1_Init+0x78>)
 8000440:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <MX_SPI1_Init+0x74>)
 8000444:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000448:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800044a:	4b18      	ldr	r3, [pc, #96]	; (80004ac <MX_SPI1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000450:	4b16      	ldr	r3, [pc, #88]	; (80004ac <MX_SPI1_Init+0x74>)
 8000452:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000456:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <MX_SPI1_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800045e:	4b13      	ldr	r3, [pc, #76]	; (80004ac <MX_SPI1_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_SPI1_Init+0x74>)
 8000466:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800046a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_SPI1_Init+0x74>)
 800046e:	2238      	movs	r2, #56	; 0x38
 8000470:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_SPI1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_SPI1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_SPI1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_SPI1_Init+0x74>)
 8000486:	2207      	movs	r2, #7
 8000488:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_SPI1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_SPI1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <MX_SPI1_Init+0x74>)
 8000498:	f002 fdba 	bl	8003010 <HAL_SPI_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004a2:	f000 f867 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	2000043c 	.word	0x2000043c
 80004b0:	40013000 	.word	0x40013000

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_GPIO_Init+0x2c>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <MX_GPIO_Init+0x2c>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <MX_GPIO_Init+0x2c>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000

080004e4 <UsbPrint>:

/* USER CODE BEGIN 4 */
void UsbPrint(const char *format, ...) {
 80004e4:	b40f      	push	{r0, r1, r2, r3}
 80004e6:	b5b0      	push	{r4, r5, r7, lr}
 80004e8:	b084      	sub	sp, #16
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	466b      	mov	r3, sp
 80004ee:	461d      	mov	r5, r3
	int PRINT_BUFFER_LEN = 200;
 80004f0:	23c8      	movs	r3, #200	; 0xc8
 80004f2:	60fb      	str	r3, [r7, #12]
	char print_buffer[PRINT_BUFFER_LEN];
 80004f4:	68f8      	ldr	r0, [r7, #12]
 80004f6:	1e43      	subs	r3, r0, #1
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	4603      	mov	r3, r0
 80004fc:	4619      	mov	r1, r3
 80004fe:	f04f 0200 	mov.w	r2, #0
 8000502:	f04f 0300 	mov.w	r3, #0
 8000506:	f04f 0400 	mov.w	r4, #0
 800050a:	00d4      	lsls	r4, r2, #3
 800050c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000510:	00cb      	lsls	r3, r1, #3
 8000512:	4603      	mov	r3, r0
 8000514:	4619      	mov	r1, r3
 8000516:	f04f 0200 	mov.w	r2, #0
 800051a:	f04f 0300 	mov.w	r3, #0
 800051e:	f04f 0400 	mov.w	r4, #0
 8000522:	00d4      	lsls	r4, r2, #3
 8000524:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000528:	00cb      	lsls	r3, r1, #3
 800052a:	4603      	mov	r3, r0
 800052c:	3307      	adds	r3, #7
 800052e:	08db      	lsrs	r3, r3, #3
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	ebad 0d03 	sub.w	sp, sp, r3
 8000536:	466b      	mov	r3, sp
 8000538:	3300      	adds	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
	va_list argptr;
	va_start(argptr, format);
 800053c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000540:	603b      	str	r3, [r7, #0]
	vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	68f9      	ldr	r1, [r7, #12]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	6a3a      	ldr	r2, [r7, #32]
 800054a:	f006 fdf5 	bl	8007138 <vsniprintf>
	va_end(argptr);
	CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 800054e:	687c      	ldr	r4, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fe3c 	bl	80001d0 <strlen>
 8000558:	4603      	mov	r3, r0
 800055a:	b29b      	uxth	r3, r3
 800055c:	4619      	mov	r1, r3
 800055e:	4620      	mov	r0, r4
 8000560:	f006 f8d0 	bl	8006704 <CDC_Transmit_FS>
 8000564:	46ad      	mov	sp, r5
}
 8000566:	bf00      	nop
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000570:	b004      	add	sp, #16
 8000572:	4770      	bx	lr

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <HAL_MspInit+0x44>)
 800058c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <HAL_MspInit+0x44>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6613      	str	r3, [r2, #96]	; 0x60
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HAL_MspInit+0x44>)
 8000598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_MspInit+0x44>)
 80005a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <HAL_MspInit+0x44>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ac:	6593      	str	r3, [r2, #88]	; 0x58
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_MspInit+0x44>)
 80005b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <HAL_SPI_MspInit+0x8c>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d130      	bne.n	8000650 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <HAL_SPI_MspInit+0x90>)
 80005f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005f2:	4a1a      	ldr	r2, [pc, #104]	; (800065c <HAL_SPI_MspInit+0x90>)
 80005f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005f8:	6613      	str	r3, [r2, #96]	; 0x60
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <HAL_SPI_MspInit+0x90>)
 80005fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_SPI_MspInit+0x90>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	4a14      	ldr	r2, [pc, #80]	; (800065c <HAL_SPI_MspInit+0x90>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_SPI_MspInit+0x90>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800061e:	23d2      	movs	r3, #210	; 0xd2
 8000620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	2302      	movs	r3, #2
 8000624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062a:	2303      	movs	r3, #3
 800062c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800062e:	2305      	movs	r3, #5
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 fac2 	bl	8000bc4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	2023      	movs	r0, #35	; 0x23
 8000646:	f000 fa46 	bl	8000ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800064a:	2023      	movs	r0, #35	; 0x23
 800064c:	f000 fa5f 	bl	8000b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40013000 	.word	0x40013000
 800065c:	40021000 	.word	0x40021000

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler+0x4>

08000674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <MemManage_Handler+0x4>

0800067a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <BusFault_Handler+0x4>

08000680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <UsageFault_Handler+0x4>

08000686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b4:	f000 f8f4 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80006c0:	4802      	ldr	r0, [pc, #8]	; (80006cc <SPI1_IRQHandler+0x10>)
 80006c2:	f003 f8a9 	bl	8003818 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000043c 	.word	0x2000043c

080006d0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006d4:	4802      	ldr	r0, [pc, #8]	; (80006e0 <USB_IRQHandler+0x10>)
 80006d6:	f000 fcf9 	bl	80010cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20001110 	.word	0x20001110

080006e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <_sbrk+0x50>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <_sbrk+0x16>
		heap_end = &end;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <_sbrk+0x50>)
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <_sbrk+0x54>)
 80006f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <_sbrk+0x50>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <_sbrk+0x50>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	466a      	mov	r2, sp
 800070a:	4293      	cmp	r3, r2
 800070c:	d907      	bls.n	800071e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800070e:	f006 fcb5 	bl	800707c <__errno>
 8000712:	4602      	mov	r2, r0
 8000714:	230c      	movs	r3, #12
 8000716:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
 800071c:	e006      	b.n	800072c <_sbrk+0x48>
	}

	heap_end += incr;
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <_sbrk+0x50>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	4a03      	ldr	r2, [pc, #12]	; (8000734 <_sbrk+0x50>)
 8000728:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000020c 	.word	0x2000020c
 8000738:	20001388 	.word	0x20001388

0800073c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <SystemInit+0x64>)
 8000742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <SystemInit+0x64>)
 8000748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <SystemInit+0x68>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <SystemInit+0x68>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <SystemInit+0x68>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <SystemInit+0x68>)
 8000768:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800076c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000770:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <SystemInit+0x68>)
 8000774:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000778:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <SystemInit+0x68>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <SystemInit+0x68>)
 8000780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000784:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <SystemInit+0x68>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <SystemInit+0x64>)
 800078e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000792:	609a      	str	r2, [r3, #8]
#endif
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00
 80007a4:	40021000 	.word	0x40021000

080007a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007ae:	e003      	b.n	80007b8 <LoopCopyDataInit>

080007b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007b6:	3104      	adds	r1, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80007bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007c0:	d3f6      	bcc.n	80007b0 <CopyDataInit>
	ldr	r2, =_sbss
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007c4:	e002      	b.n	80007cc <LoopFillZerobss>

080007c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007c8:	f842 3b04 	str.w	r3, [r2], #4

080007cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <LoopForever+0x16>)
	cmp	r2, r3
 80007ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007d0:	d3f9      	bcc.n	80007c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d2:	f7ff ffb3 	bl	800073c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d6:	f006 fc57 	bl	8007088 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007da:	f7ff fd51 	bl	8000280 <main>

080007de <LoopForever>:

LoopForever:
    b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80007e4:	08007a0c 	.word	0x08007a0c
	ldr	r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007ec:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 80007f0:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 80007f4:	20001388 	.word	0x20001388

080007f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_IRQHandler>

080007fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000800:	2300      	movs	r3, #0
 8000802:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 f95b 	bl	8000ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f80e 	bl	800082c <HAL_InitTick>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d002      	beq.n	800081c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	e001      	b.n	8000820 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800081c:	f7ff feb2 	bl	8000584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000820:	79fb      	ldrb	r3, [r7, #7]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000834:	2300      	movs	r3, #0
 8000836:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <HAL_InitTick+0x68>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d022      	beq.n	8000886 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_InitTick+0x6c>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_InitTick+0x68>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800084c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000850:	fbb2 f3f3 	udiv	r3, r2, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f968 	bl	8000b2a <HAL_SYSTICK_Config>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10f      	bne.n	8000880 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b0f      	cmp	r3, #15
 8000864:	d809      	bhi.n	800087a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000866:	2200      	movs	r2, #0
 8000868:	6879      	ldr	r1, [r7, #4]
 800086a:	f04f 30ff 	mov.w	r0, #4294967295
 800086e:	f000 f932 	bl	8000ad6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <HAL_InitTick+0x70>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	e007      	b.n	800088a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	73fb      	strb	r3, [r7, #15]
 800087e:	e004      	b.n	800088a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	e001      	b.n	800088a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800088a:	7bfb      	ldrb	r3, [r7, #15]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000008 	.word	0x20000008
 8000898:	20000000 	.word	0x20000000
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x1c>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x20>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	4a03      	ldr	r2, [pc, #12]	; (80008bc <HAL_IncTick+0x1c>)
 80008b0:	6013      	str	r3, [r2, #0]
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	200004a0 	.word	0x200004a0
 80008c0:	20000008 	.word	0x20000008

080008c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <HAL_GetTick+0x14>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	200004a0 	.word	0x200004a0

080008dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e4:	f7ff ffee 	bl	80008c4 <HAL_GetTick>
 80008e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f4:	d004      	beq.n	8000900 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_Delay+0x40>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	4413      	add	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000900:	bf00      	nop
 8000902:	f7ff ffdf 	bl	80008c4 <HAL_GetTick>
 8000906:	4602      	mov	r2, r0
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	429a      	cmp	r2, r3
 8000910:	d8f7      	bhi.n	8000902 <HAL_Delay+0x26>
  {
  }
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008

08000920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__NVIC_GetPriorityGrouping+0x18>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	f003 0307 	and.w	r3, r3, #7
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	2b00      	cmp	r3, #0
 8000994:	db0b      	blt.n	80009ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f003 021f 	and.w	r2, r3, #31
 800099c:	4907      	ldr	r1, [pc, #28]	; (80009bc <__NVIC_EnableIRQ+0x38>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	095b      	lsrs	r3, r3, #5
 80009a4:	2001      	movs	r0, #1
 80009a6:	fa00 f202 	lsl.w	r2, r0, r2
 80009aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000e100 	.word	0xe000e100

080009c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db0a      	blt.n	80009ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	490c      	ldr	r1, [pc, #48]	; (8000a0c <__NVIC_SetPriority+0x4c>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	0112      	lsls	r2, r2, #4
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	440b      	add	r3, r1
 80009e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e8:	e00a      	b.n	8000a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4908      	ldr	r1, [pc, #32]	; (8000a10 <__NVIC_SetPriority+0x50>)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	3b04      	subs	r3, #4
 80009f8:	0112      	lsls	r2, r2, #4
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	440b      	add	r3, r1
 80009fe:	761a      	strb	r2, [r3, #24]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e100 	.word	0xe000e100
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b089      	sub	sp, #36	; 0x24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f1c3 0307 	rsb	r3, r3, #7
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	bf28      	it	cs
 8000a32:	2304      	movcs	r3, #4
 8000a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	d902      	bls.n	8000a44 <NVIC_EncodePriority+0x30>
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3b03      	subs	r3, #3
 8000a42:	e000      	b.n	8000a46 <NVIC_EncodePriority+0x32>
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43da      	mvns	r2, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	43d9      	mvns	r1, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	4313      	orrs	r3, r2
         );
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3724      	adds	r7, #36	; 0x24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a8c:	d301      	bcc.n	8000a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00f      	b.n	8000ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <SysTick_Config+0x40>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f7ff ff8e 	bl	80009c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <SysTick_Config+0x40>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <SysTick_Config+0x40>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	e000e010 	.word	0xe000e010

08000ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff29 	bl	8000920 <__NVIC_SetPriorityGrouping>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae8:	f7ff ff3e 	bl	8000968 <__NVIC_GetPriorityGrouping>
 8000aec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	6978      	ldr	r0, [r7, #20]
 8000af4:	f7ff ff8e 	bl	8000a14 <NVIC_EncodePriority>
 8000af8:	4602      	mov	r2, r0
 8000afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff5d 	bl	80009c0 <__NVIC_SetPriority>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff31 	bl	8000984 <__NVIC_EnableIRQ>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ffa2 	bl	8000a7c <SysTick_Config>
 8000b38:	4603      	mov	r3, r0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b084      	sub	sp, #16
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d005      	beq.n	8000b66 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e029      	b.n	8000bba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 020e 	bic.w	r2, r2, #14
 8000b74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f022 0201 	bic.w	r2, r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f003 021c 	and.w	r2, r3, #28
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	2101      	movs	r1, #1
 8000b94:	fa01 f202 	lsl.w	r2, r1, r2
 8000b98:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	4798      	blx	r3
    }
  }
  return status;
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd2:	e154      	b.n	8000e7e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	2101      	movs	r1, #1
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	4013      	ands	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 8146 	beq.w	8000e78 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x38>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b12      	cmp	r3, #18
 8000bfa:	d123      	bne.n	8000c44 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	08da      	lsrs	r2, r3, #3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3208      	adds	r2, #8
 8000c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	220f      	movs	r2, #15
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	691a      	ldr	r2, [r3, #16]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	08da      	lsrs	r2, r3, #3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3208      	adds	r2, #8
 8000c3e:	6939      	ldr	r1, [r7, #16]
 8000c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0203 	and.w	r2, r3, #3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d00b      	beq.n	8000c98 <HAL_GPIO_Init+0xd4>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d007      	beq.n	8000c98 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8c:	2b11      	cmp	r3, #17
 8000c8e:	d003      	beq.n	8000c98 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b12      	cmp	r3, #18
 8000c96:	d130      	bne.n	8000cfa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cce:	2201      	movs	r2, #1
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	091b      	lsrs	r3, r3, #4
 8000ce4:	f003 0201 	and.w	r2, r3, #1
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 80a0 	beq.w	8000e78 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d38:	4b58      	ldr	r3, [pc, #352]	; (8000e9c <HAL_GPIO_Init+0x2d8>)
 8000d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3c:	4a57      	ldr	r2, [pc, #348]	; (8000e9c <HAL_GPIO_Init+0x2d8>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6613      	str	r3, [r2, #96]	; 0x60
 8000d44:	4b55      	ldr	r3, [pc, #340]	; (8000e9c <HAL_GPIO_Init+0x2d8>)
 8000d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d50:	4a53      	ldr	r2, [pc, #332]	; (8000ea0 <HAL_GPIO_Init+0x2dc>)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	3302      	adds	r3, #2
 8000d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d7a:	d019      	beq.n	8000db0 <HAL_GPIO_Init+0x1ec>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <HAL_GPIO_Init+0x2e0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d013      	beq.n	8000dac <HAL_GPIO_Init+0x1e8>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <HAL_GPIO_Init+0x2e4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d00d      	beq.n	8000da8 <HAL_GPIO_Init+0x1e4>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a47      	ldr	r2, [pc, #284]	; (8000eac <HAL_GPIO_Init+0x2e8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d007      	beq.n	8000da4 <HAL_GPIO_Init+0x1e0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a46      	ldr	r2, [pc, #280]	; (8000eb0 <HAL_GPIO_Init+0x2ec>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d101      	bne.n	8000da0 <HAL_GPIO_Init+0x1dc>
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	e008      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000da0:	2307      	movs	r3, #7
 8000da2:	e006      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000da4:	2303      	movs	r3, #3
 8000da6:	e004      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e002      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000db0:	2300      	movs	r3, #0
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	f002 0203 	and.w	r2, r2, #3
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	4093      	lsls	r3, r2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dc2:	4937      	ldr	r1, [pc, #220]	; (8000ea0 <HAL_GPIO_Init+0x2dc>)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3302      	adds	r3, #2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dd0:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000df4:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e1e:	4a25      	ldr	r2, [pc, #148]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e48:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa22 f303 	lsr.w	r3, r2, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f47f aea3 	bne.w	8000bd4 <HAL_GPIO_Init+0x10>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	371c      	adds	r7, #28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	48000800 	.word	0x48000800
 8000eac:	48000c00 	.word	0x48000c00
 8000eb0:	48001000 	.word	0x48001000
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eba:	b08b      	sub	sp, #44	; 0x2c
 8000ebc:	af06      	add	r7, sp, #24
 8000ebe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e0da      	b.n	8001080 <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d106      	bne.n	8000ee4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f005 fd56 	bl	8006990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 ff04 	bl	8003cfe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	687e      	ldr	r6, [r7, #4]
 8000efe:	466d      	mov	r5, sp
 8000f00:	f106 0410 	add.w	r4, r6, #16
 8000f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	602b      	str	r3, [r5, #0]
 8000f0c:	1d33      	adds	r3, r6, #4
 8000f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f10:	6838      	ldr	r0, [r7, #0]
 8000f12:	f002 fecb 	bl	8003cac <USB_CoreInit>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2202      	movs	r2, #2
 8000f20:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0ab      	b.n	8001080 <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 ff02 	bl	8003d38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e035      	b.n	8000fa6 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	015b      	lsls	r3, r3, #5
 8000f40:	4413      	add	r3, r2
 8000f42:	3329      	adds	r3, #41	; 0x29
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	015b      	lsls	r3, r3, #5
 8000f4e:	4413      	add	r3, r2
 8000f50:	3328      	adds	r3, #40	; 0x28
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	b291      	uxth	r1, r2
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	015b      	lsls	r3, r3, #5
 8000f60:	4413      	add	r3, r2
 8000f62:	3336      	adds	r3, #54	; 0x36
 8000f64:	460a      	mov	r2, r1
 8000f66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	015b      	lsls	r3, r3, #5
 8000f6e:	4413      	add	r3, r2
 8000f70:	332b      	adds	r3, #43	; 0x2b
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	015b      	lsls	r3, r3, #5
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3338      	adds	r3, #56	; 0x38
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	015b      	lsls	r3, r3, #5
 8000f8a:	4413      	add	r3, r2
 8000f8c:	333c      	adds	r3, #60	; 0x3c
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	3302      	adds	r3, #2
 8000f98:	015b      	lsls	r3, r3, #5
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3c4      	bcc.n	8000f3a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e031      	b.n	800101a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	015b      	lsls	r3, r3, #5
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	015b      	lsls	r3, r3, #5
 8000fcc:	4413      	add	r3, r2
 8000fce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	015b      	lsls	r3, r3, #5
 8000fdc:	4413      	add	r3, r2
 8000fde:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	015b      	lsls	r3, r3, #5
 8000fec:	4413      	add	r3, r2
 8000fee:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	015b      	lsls	r3, r3, #5
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	330a      	adds	r3, #10
 800100c:	015b      	lsls	r3, r3, #5
 800100e:	4413      	add	r3, r2
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	3301      	adds	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	d3c8      	bcc.n	8000fb6 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	687e      	ldr	r6, [r7, #4]
 800102c:	466d      	mov	r5, sp
 800102e:	f106 0410 	add.w	r4, r6, #16
 8001032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	602b      	str	r3, [r5, #0]
 800103a:	1d33      	adds	r3, r6, #4
 800103c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	f002 fe87 	bl	8003d52 <USB_DevInit>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d005      	beq.n	8001056 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2202      	movs	r2, #2
 800104e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e014      	b.n	8001080 <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d102      	bne.n	8001074 <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 fe41 	bl	8001cf6 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f003 febc 	bl	8004df6 <USB_DevDisconnect>

  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001088 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001096:	2b01      	cmp	r3, #1
 8001098:	d101      	bne.n	800109e <HAL_PCD_Start+0x16>
 800109a:	2302      	movs	r3, #2
 800109c:	e012      	b.n	80010c4 <HAL_PCD_Start+0x3c>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fe8c 	bl	8004dc8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 fe0a 	bl	8003cce <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f003 fea1 	bl	8004e20 <USB_ReadInterrupts>
 80010de:	4603      	mov	r3, r0
 80010e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010e8:	d102      	bne.n	80010f0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 fb3e 	bl	800176c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fe93 	bl	8004e20 <USB_ReadInterrupts>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001104:	d112      	bne.n	800112c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800110e:	b29a      	uxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001118:	b292      	uxth	r2, r2
 800111a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f005 fcab 	bl	8006a7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001124:	2100      	movs	r1, #0
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f929 	bl	800137e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f003 fe75 	bl	8004e20 <USB_ReadInterrupts>
 8001136:	4603      	mov	r3, r0
 8001138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001140:	d10b      	bne.n	800115a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800114a:	b29a      	uxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001154:	b292      	uxth	r2, r2
 8001156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f003 fe5e 	bl	8004e20 <USB_ReadInterrupts>
 8001164:	4603      	mov	r3, r0
 8001166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800116a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800116e:	d10b      	bne.n	8001188 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001178:	b29a      	uxth	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001182:	b292      	uxth	r2, r2
 8001184:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f003 fe47 	bl	8004e20 <USB_ReadInterrupts>
 8001192:	4603      	mov	r3, r0
 8001194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800119c:	d133      	bne.n	8001206 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0204 	bic.w	r2, r2, #4
 80011b0:	b292      	uxth	r2, r2
 80011b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011be:	b29a      	uxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0208 	bic.w	r2, r2, #8
 80011c8:	b292      	uxth	r2, r2
 80011ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d107      	bne.n	80011e8 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011e0:	2100      	movs	r1, #0
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f005 fef6 	bl	8006fd4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f005 fc7f 	bl	8006aec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001200:	b292      	uxth	r2, r2
 8001202:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f003 fe08 	bl	8004e20 <USB_ReadInterrupts>
 8001210:	4603      	mov	r3, r0
 8001212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800121a:	d131      	bne.n	8001280 <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001224:	b29a      	uxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0208 	orr.w	r2, r2, #8
 800122e:	b292      	uxth	r2, r2
 8001230:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800123c:	b29a      	uxth	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001246:	b292      	uxth	r2, r2
 8001248:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0204 	orr.w	r2, r2, #4
 800125e:	b292      	uxth	r2, r2
 8001260:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fdd9 	bl	8004e20 <USB_ReadInterrupts>
 800126e:	4603      	mov	r3, r0
 8001270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001278:	d002      	beq.n	8001280 <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f005 fc1c 	bl	8006ab8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f003 fdcb 	bl	8004e20 <USB_ReadInterrupts>
 800128a:	4603      	mov	r3, r0
 800128c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001290:	2b80      	cmp	r3, #128	; 0x80
 8001292:	d13f      	bne.n	8001314 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800129c:	b29a      	uxth	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012a6:	b292      	uxth	r2, r2
 80012a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d12b      	bne.n	800130e <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012be:	b29a      	uxth	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0204 	orr.w	r2, r2, #4
 80012c8:	b292      	uxth	r2, r2
 80012ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f042 0208 	orr.w	r2, r2, #8
 80012e0:	b292      	uxth	r2, r2
 80012e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001304:	2101      	movs	r1, #1
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f005 fe64 	bl	8006fd4 <HAL_PCDEx_LPM_Callback>
 800130c:	e002      	b.n	8001314 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f005 fbd2 	bl	8006ab8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fd81 	bl	8004e20 <USB_ReadInterrupts>
 800131e:	4603      	mov	r3, r0
 8001320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001328:	d10e      	bne.n	8001348 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001332:	b29a      	uxth	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800133c:	b292      	uxth	r2, r2
 800133e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f005 fb8b 	bl	8006a5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f003 fd67 	bl	8004e20 <USB_ReadInterrupts>
 8001352:	4603      	mov	r3, r0
 8001354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800135c:	d10b      	bne.n	8001376 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001366:	b29a      	uxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001370:	b292      	uxth	r2, r2
 8001372:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_PCD_SetAddress+0x1a>
 8001394:	2302      	movs	r3, #2
 8001396:	e013      	b.n	80013c0 <HAL_PCD_SetAddress+0x42>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	78fa      	ldrb	r2, [r7, #3]
 80013a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fcf5 	bl	8004da0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	4608      	mov	r0, r1
 80013d2:	4611      	mov	r1, r2
 80013d4:	461a      	mov	r2, r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	70fb      	strb	r3, [r7, #3]
 80013da:	460b      	mov	r3, r1
 80013dc:	803b      	strh	r3, [r7, #0]
 80013de:	4613      	mov	r3, r2
 80013e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da0b      	bge.n	8001406 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	015b      	lsls	r3, r3, #5
 80013f6:	3328      	adds	r3, #40	; 0x28
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2201      	movs	r2, #1
 8001402:	705a      	strb	r2, [r3, #1]
 8001404:	e00b      	b.n	800141e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	015b      	lsls	r3, r3, #5
 800140e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	b2da      	uxtb	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800142a:	883a      	ldrh	r2, [r7, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	78ba      	ldrb	r2, [r7, #2]
 8001434:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	785b      	ldrb	r3, [r3, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d004      	beq.n	8001448 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b29a      	uxth	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001448:	78bb      	ldrb	r3, [r7, #2]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d102      	bne.n	8001454 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_PCD_EP_Open+0x9a>
 800145e:	2302      	movs	r3, #2
 8001460:	e00e      	b.n	8001480 <HAL_PCD_EP_Open+0xb8>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68f9      	ldr	r1, [r7, #12]
 8001470:	4618      	mov	r0, r3
 8001472:	f002 fc93 	bl	8003d9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800147e:	7afb      	ldrb	r3, [r7, #11]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001498:	2b00      	cmp	r3, #0
 800149a:	da0b      	bge.n	80014b4 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	015b      	lsls	r3, r3, #5
 80014a4:	3328      	adds	r3, #40	; 0x28
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2201      	movs	r2, #1
 80014b0:	705a      	strb	r2, [r3, #1]
 80014b2:	e00b      	b.n	80014cc <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	015b      	lsls	r3, r3, #5
 80014bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <HAL_PCD_EP_Close+0x5e>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e00e      	b.n	8001504 <HAL_PCD_EP_Close+0x7c>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68f9      	ldr	r1, [r7, #12]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 ff3b 	bl	8004370 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	460b      	mov	r3, r1
 800151a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800151c:	7afb      	ldrb	r3, [r7, #11]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	015b      	lsls	r3, r3, #5
 8001524:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2200      	movs	r2, #0
 8001544:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001546:	7afb      	ldrb	r3, [r7, #11]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	b2da      	uxtb	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001552:	7afb      	ldrb	r3, [r7, #11]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	2b00      	cmp	r3, #0
 800155a:	d106      	bne.n	800156a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6979      	ldr	r1, [r7, #20]
 8001562:	4618      	mov	r0, r3
 8001564:	f003 f89a 	bl	800469c <USB_EPStartXfer>
 8001568:	e005      	b.n	8001576 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6979      	ldr	r1, [r7, #20]
 8001570:	4618      	mov	r0, r3
 8001572:	f003 f893 	bl	800469c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	330a      	adds	r3, #10
 8001596:	015b      	lsls	r3, r3, #5
 8001598:	4413      	add	r3, r2
 800159a:	3304      	adds	r3, #4
 800159c:	681b      	ldr	r3, [r3, #0]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	460b      	mov	r3, r1
 80015b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	015b      	lsls	r3, r3, #5
 80015c2:	3328      	adds	r3, #40	; 0x28
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2200      	movs	r2, #0
 80015da:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2201      	movs	r2, #1
 80015e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d106      	bne.n	8001606 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6979      	ldr	r1, [r7, #20]
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 f84c 	bl	800469c <USB_EPStartXfer>
 8001604:	e005      	b.n	8001612 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6979      	ldr	r1, [r7, #20]
 800160c:	4618      	mov	r0, r3
 800160e:	f003 f845 	bl	800469c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	f003 0207 	and.w	r2, r3, #7
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	429a      	cmp	r2, r3
 8001634:	d901      	bls.n	800163a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e046      	b.n	80016c8 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800163a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800163e:	2b00      	cmp	r3, #0
 8001640:	da0b      	bge.n	800165a <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	015b      	lsls	r3, r3, #5
 800164a:	3328      	adds	r3, #40	; 0x28
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	705a      	strb	r2, [r3, #1]
 8001658:	e009      	b.n	800166e <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	015b      	lsls	r3, r3, #5
 800165e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2201      	movs	r2, #1
 8001672:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	b2da      	uxtb	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_PCD_EP_SetStall+0x72>
 800168a:	2302      	movs	r3, #2
 800168c:	e01c      	b.n	80016c8 <HAL_PCD_EP_SetStall+0xac>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	4618      	mov	r0, r3
 800169e:	f003 faa9 	bl	8004bf4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d108      	bne.n	80016be <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f003 fbc1 	bl	8004e40 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	f003 020f 	and.w	r2, r3, #15
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d901      	bls.n	80016ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e03a      	b.n	8001764 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da0b      	bge.n	800170e <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	015b      	lsls	r3, r3, #5
 80016fe:	3328      	adds	r3, #40	; 0x28
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2201      	movs	r2, #1
 800170a:	705a      	strb	r2, [r3, #1]
 800170c:	e00b      	b.n	8001726 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	015b      	lsls	r3, r3, #5
 8001716:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	b2da      	uxtb	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_PCD_EP_ClrStall+0x76>
 8001742:	2302      	movs	r3, #2
 8001744:	e00e      	b.n	8001764 <HAL_PCD_EP_ClrStall+0x94>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68f9      	ldr	r1, [r7, #12]
 8001754:	4618      	mov	r0, r3
 8001756:	f003 fa8f 	bl	8004c78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001774:	e26f      	b.n	8001c56 <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800177e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001780:	8afb      	ldrh	r3, [r7, #22]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800178a:	7d7b      	ldrb	r3, [r7, #21]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 8137 	bne.w	8001a00 <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001792:	8afb      	ldrh	r3, [r7, #22]
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b00      	cmp	r3, #0
 800179a:	d14f      	bne.n	800183c <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80017a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ac:	b29c      	uxth	r4, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80017b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3328      	adds	r3, #40	; 0x28
 80017c2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	441a      	add	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017fa:	2100      	movs	r1, #0
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f005 f917 	bl	8006a30 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8223 	beq.w	8001c56 <PCD_EP_ISR_Handler+0x4ea>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	f040 821e 	bne.w	8001c56 <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001826:	b2da      	uxtb	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b292      	uxth	r2, r2
 800182e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800183a:	e20c      	b.n	8001c56 <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001842:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800184c:	8a7b      	ldrh	r3, [r7, #18]
 800184e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001852:	2b00      	cmp	r3, #0
 8001854:	d031      	beq.n	80018ba <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800185e:	b29b      	uxth	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4413      	add	r3, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	4413      	add	r3, r2
 8001870:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001890:	b29b      	uxth	r3, r3
 8001892:	f003 fb22 	bl	8004eda <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	b29a      	uxth	r2, r3
 800189e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018a2:	4013      	ands	r3, r2
 80018a4:	b29c      	uxth	r4, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80018ae:	b292      	uxth	r2, r2
 80018b0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f005 f892 	bl	80069dc <HAL_PCD_SetupStageCallback>
 80018b8:	e1cd      	b.n	8001c56 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f280 81c9 	bge.w	8001c56 <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018d0:	4013      	ands	r3, r2
 80018d2:	b29c      	uxth	r4, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80018dc:	b292      	uxth	r2, r2
 80018de:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4413      	add	r3, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	4413      	add	r3, r2
 80018fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d019      	beq.n	8001944 <PCD_EP_ISR_Handler+0x1d8>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d015      	beq.n	8001944 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6959      	ldr	r1, [r3, #20]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001928:	b29b      	uxth	r3, r3
 800192a:	f003 fad6 	bl	8004eda <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	441a      	add	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800193c:	2100      	movs	r1, #0
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f005 f85e 	bl	8006a00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461c      	mov	r4, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001952:	b29b      	uxth	r3, r3
 8001954:	441c      	add	r4, r3
 8001956:	f204 4306 	addw	r3, r4, #1030	; 0x406
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d110      	bne.n	8001986 <PCD_EP_ISR_Handler+0x21a>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800196c:	b29a      	uxth	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	801a      	strh	r2, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800197a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800197e:	b29a      	uxth	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	801a      	strh	r2, [r3, #0]
 8001984:	e026      	b.n	80019d4 <PCD_EP_ISR_Handler+0x268>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2b3d      	cmp	r3, #61	; 0x3d
 800198c:	d813      	bhi.n	80019b6 <PCD_EP_ISR_Handler+0x24a>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	085b      	lsrs	r3, r3, #1
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <PCD_EP_ISR_Handler+0x23c>
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	3301      	adds	r3, #1
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	029b      	lsls	r3, r3, #10
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	801a      	strh	r2, [r3, #0]
 80019b4:	e00e      	b.n	80019d4 <PCD_EP_ISR_Handler+0x268>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	029b      	lsls	r3, r3, #10
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e4:	b29c      	uxth	r4, r3
 80019e6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80019ea:	b29c      	uxth	r4, r3
 80019ec:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80019f0:	b29c      	uxth	r4, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b9f      	ldr	r3, [pc, #636]	; (8001c74 <PCD_EP_ISR_Handler+0x508>)
 80019f8:	4323      	orrs	r3, r4
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	8013      	strh	r3, [r2, #0]
 80019fe:	e12a      	b.n	8001c56 <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	7d7b      	ldrb	r3, [r7, #21]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f280 80cb 	bge.w	8001bb0 <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	7d7b      	ldrb	r3, [r7, #21]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a2e:	4013      	ands	r3, r2
 8001a30:	b29c      	uxth	r4, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	7d7b      	ldrb	r3, [r7, #21]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001a42:	b292      	uxth	r2, r2
 8001a44:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a46:	7d7b      	ldrb	r3, [r7, #21]
 8001a48:	015b      	lsls	r3, r3, #5
 8001a4a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	7b1b      	ldrb	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d11f      	bne.n	8001a9c <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a80:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001a82:	8bfb      	ldrh	r3, [r7, #30]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d06e      	beq.n	8001b66 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6959      	ldr	r1, [r3, #20]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	88da      	ldrh	r2, [r3, #6]
 8001a94:	8bfb      	ldrh	r3, [r7, #30]
 8001a96:	f003 fa20 	bl	8004eda <USB_ReadPMA>
 8001a9a:	e064      	b.n	8001b66 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d01f      	beq.n	8001af6 <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ada:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001adc:	8bfb      	ldrh	r3, [r7, #30]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d028      	beq.n	8001b34 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6959      	ldr	r1, [r3, #20]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	891a      	ldrh	r2, [r3, #8]
 8001aee:	8bfb      	ldrh	r3, [r7, #30]
 8001af0:	f003 f9f3 	bl	8004eda <USB_ReadPMA>
 8001af4:	e01e      	b.n	8001b34 <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b1a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001b1c:	8bfb      	ldrh	r3, [r7, #30]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d008      	beq.n	8001b34 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6959      	ldr	r1, [r3, #20]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	895a      	ldrh	r2, [r3, #10]
 8001b2e:	8bfb      	ldrh	r3, [r7, #30]
 8001b30:	f003 f9d3 	bl	8004eda <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4e:	b29c      	uxth	r4, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	441a      	add	r2, r3
 8001b5e:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <PCD_EP_ISR_Handler+0x50c>)
 8001b60:	4323      	orrs	r3, r4
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	69da      	ldr	r2, [r3, #28]
 8001b6a:	8bfb      	ldrh	r3, [r7, #30]
 8001b6c:	441a      	add	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	8bfb      	ldrh	r3, [r7, #30]
 8001b78:	441a      	add	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <PCD_EP_ISR_Handler+0x424>
 8001b86:	8bfa      	ldrh	r2, [r7, #30]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d206      	bcs.n	8001b9e <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f004 ff32 	bl	8006a00 <HAL_PCD_DataOutStageCallback>
 8001b9c:	e008      	b.n	8001bb0 <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	7819      	ldrb	r1, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fcae 	bl	800150c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bb0:	8a7b      	ldrh	r3, [r7, #18]
 8001bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d04d      	beq.n	8001c56 <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 8001bba:	7d7b      	ldrb	r3, [r7, #21]
 8001bbc:	015b      	lsls	r3, r3, #5
 8001bbe:	3328      	adds	r3, #40	; 0x28
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	7d7b      	ldrb	r3, [r7, #21]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bde:	b29c      	uxth	r4, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	7d7b      	ldrb	r3, [r7, #21]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	441a      	add	r2, r3
 8001bec:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	4413      	add	r3, r2
 8001c12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	441a      	add	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f004 fef7 	bl	8006a30 <HAL_PCD_DataInStageCallback>
 8001c42:	e008      	b.n	8001c56 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	7819      	ldrb	r1, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fcaa 	bl	80015aa <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f6ff ad87 	blt.w	8001776 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd90      	pop	{r4, r7, pc}
 8001c72:	bf00      	nop
 8001c74:	ffff8080 	.word	0xffff8080
 8001c78:	ffff80c0 	.word	0xffff80c0

08001c7c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	817b      	strh	r3, [r7, #10]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001c8e:	897b      	ldrh	r3, [r7, #10]
 8001c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c9a:	897b      	ldrh	r3, [r7, #10]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	015b      	lsls	r3, r3, #5
 8001ca2:	3328      	adds	r3, #40	; 0x28
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	e006      	b.n	8001cba <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cac:	897b      	ldrh	r3, [r7, #10]
 8001cae:	015b      	lsls	r3, r3, #5
 8001cb0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001cba:	893b      	ldrh	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d107      	bne.n	8001cd0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	80da      	strh	r2, [r3, #6]
 8001cce:	e00b      	b.n	8001ce8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b085      	sub	sp, #20
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40007000 	.word	0x40007000

08001d68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d76:	d130      	bne.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d84:	d038      	beq.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2232      	movs	r2, #50	; 0x32
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0c9b      	lsrs	r3, r3, #18
 8001da8:	3301      	adds	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dac:	e002      	b.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc0:	d102      	bne.n	8001dc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f2      	bne.n	8001dae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd4:	d110      	bne.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e00f      	b.n	8001dfa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de6:	d007      	beq.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001df0:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	431bde83 	.word	0x431bde83

08001e14 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e22:	6053      	str	r3, [r2, #4]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40007000 	.word	0x40007000

08001e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e3db      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e46:	4ba4      	ldr	r3, [pc, #656]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e50:	4ba1      	ldr	r3, [pc, #644]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80e1 	beq.w	800202a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_RCC_OscConfig+0x4a>
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b0c      	cmp	r3, #12
 8001e72:	f040 8088 	bne.w	8001f86 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	f040 8084 	bne.w	8001f86 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e7e:	4b96      	ldr	r3, [pc, #600]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_RCC_OscConfig+0x62>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e3b3      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1a      	ldr	r2, [r3, #32]
 8001e9a:	4b8f      	ldr	r3, [pc, #572]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x7c>
 8001ea6:	4b8c      	ldr	r3, [pc, #560]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eae:	e005      	b.n	8001ebc <HAL_RCC_OscConfig+0x88>
 8001eb0:	4b89      	ldr	r3, [pc, #548]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d223      	bcs.n	8001f08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fd0f 	bl	80028e8 <RCC_SetFlashLatencyFromMSIRange>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e394      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed4:	4b80      	ldr	r3, [pc, #512]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a7f      	ldr	r2, [pc, #508]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b7d      	ldr	r3, [pc, #500]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	497a      	ldr	r1, [pc, #488]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef2:	4b79      	ldr	r3, [pc, #484]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	4975      	ldr	r1, [pc, #468]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
 8001f06:	e022      	b.n	8001f4e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f08:	4b73      	ldr	r3, [pc, #460]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a72      	ldr	r2, [pc, #456]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b70      	ldr	r3, [pc, #448]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	496d      	ldr	r1, [pc, #436]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f26:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	4968      	ldr	r1, [pc, #416]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fcd2 	bl	80028e8 <RCC_SetFlashLatencyFromMSIRange>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e357      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f4e:	f000 fc41 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8001f52:	4601      	mov	r1, r0
 8001f54:	4b60      	ldr	r3, [pc, #384]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	4a5f      	ldr	r2, [pc, #380]	; (80020dc <HAL_RCC_OscConfig+0x2a8>)
 8001f60:	5cd3      	ldrb	r3, [r2, r3]
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	fa21 f303 	lsr.w	r3, r1, r3
 8001f6a:	4a5d      	ldr	r2, [pc, #372]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f6e:	4b5d      	ldr	r3, [pc, #372]	; (80020e4 <HAL_RCC_OscConfig+0x2b0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fc5a 	bl	800082c <HAL_InitTick>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d052      	beq.n	8002028 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	e33b      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d032      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f8e:	4b52      	ldr	r3, [pc, #328]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a51      	ldr	r2, [pc, #324]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f9a:	f7fe fc93 	bl	80008c4 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa2:	f7fe fc8f 	bl	80008c4 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e324      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb4:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc0:	4b45      	ldr	r3, [pc, #276]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a44      	ldr	r2, [pc, #272]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001fc6:	f043 0308 	orr.w	r3, r3, #8
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b42      	ldr	r3, [pc, #264]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	493f      	ldr	r1, [pc, #252]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fde:	4b3e      	ldr	r3, [pc, #248]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	493a      	ldr	r1, [pc, #232]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
 8001ff2:	e01a      	b.n	800202a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ff4:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a37      	ldr	r2, [pc, #220]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002000:	f7fe fc60 	bl	80008c4 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002008:	f7fe fc5c 	bl	80008c4 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e2f1      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800201a:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x1d4>
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002028:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d074      	beq.n	8002120 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b08      	cmp	r3, #8
 800203a:	d005      	beq.n	8002048 <HAL_RCC_OscConfig+0x214>
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d10e      	bne.n	8002060 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d10b      	bne.n	8002060 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002048:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d064      	beq.n	800211e <HAL_RCC_OscConfig+0x2ea>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d160      	bne.n	800211e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e2ce      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002068:	d106      	bne.n	8002078 <HAL_RCC_OscConfig+0x244>
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1a      	ldr	r2, [pc, #104]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e01d      	b.n	80020b4 <HAL_RCC_OscConfig+0x280>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x268>
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8002088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a11      	ldr	r2, [pc, #68]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0x280>
 800209c:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0d      	ldr	r2, [pc, #52]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 80020a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 80020ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe fc02 	bl	80008c4 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c2:	e011      	b.n	80020e8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7fe fbfe 	bl	80008c4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d90a      	bls.n	80020e8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e293      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	08007990 	.word	0x08007990
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e8:	4bae      	ldr	r3, [pc, #696]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0e7      	beq.n	80020c4 <HAL_RCC_OscConfig+0x290>
 80020f4:	e014      	b.n	8002120 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7fe fbe5 	bl	80008c4 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fe:	f7fe fbe1 	bl	80008c4 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b64      	cmp	r3, #100	; 0x64
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e276      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002110:	4ba4      	ldr	r3, [pc, #656]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x2ca>
 800211c:	e000      	b.n	8002120 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d060      	beq.n	80021ee <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2b04      	cmp	r3, #4
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x30a>
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b0c      	cmp	r3, #12
 8002136:	d119      	bne.n	800216c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d116      	bne.n	800216c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800213e:	4b99      	ldr	r3, [pc, #612]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_RCC_OscConfig+0x322>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e253      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002156:	4b93      	ldr	r3, [pc, #588]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	061b      	lsls	r3, r3, #24
 8002164:	498f      	ldr	r1, [pc, #572]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216a:	e040      	b.n	80021ee <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d023      	beq.n	80021bc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002174:	4b8b      	ldr	r3, [pc, #556]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a8a      	ldr	r2, [pc, #552]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 800217a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7fe fba0 	bl	80008c4 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002188:	f7fe fb9c 	bl	80008c4 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e231      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219a:	4b82      	ldr	r3, [pc, #520]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a6:	4b7f      	ldr	r3, [pc, #508]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	061b      	lsls	r3, r3, #24
 80021b4:	497b      	ldr	r1, [pc, #492]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
 80021ba:	e018      	b.n	80021ee <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021bc:	4b79      	ldr	r3, [pc, #484]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a78      	ldr	r2, [pc, #480]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 80021c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe fb7c 	bl	80008c4 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d0:	f7fe fb78 	bl	80008c4 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e20d      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e2:	4b70      	ldr	r3, [pc, #448]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d03c      	beq.n	8002274 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01c      	beq.n	800223c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002202:	4b68      	ldr	r3, [pc, #416]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002208:	4a66      	ldr	r2, [pc, #408]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002212:	f7fe fb57 	bl	80008c4 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221a:	f7fe fb53 	bl	80008c4 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1e8      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800222c:	4b5d      	ldr	r3, [pc, #372]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 800222e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0ef      	beq.n	800221a <HAL_RCC_OscConfig+0x3e6>
 800223a:	e01b      	b.n	8002274 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223c:	4b59      	ldr	r3, [pc, #356]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 800223e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002242:	4a58      	ldr	r2, [pc, #352]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7fe fb3a 	bl	80008c4 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002254:	f7fe fb36 	bl	80008c4 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1cb      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002266:	4b4f      	ldr	r3, [pc, #316]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1ef      	bne.n	8002254 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a5 	beq.w	80023cc <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002286:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	4b44      	ldr	r3, [pc, #272]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	4a43      	ldr	r2, [pc, #268]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	6593      	str	r3, [r2, #88]	; 0x58
 800229e:	4b41      	ldr	r3, [pc, #260]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ae:	4b3e      	ldr	r3, [pc, #248]	; (80023a8 <HAL_RCC_OscConfig+0x574>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ba:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_RCC_OscConfig+0x574>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a3a      	ldr	r2, [pc, #232]	; (80023a8 <HAL_RCC_OscConfig+0x574>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7fe fafd 	bl	80008c4 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7fe faf9 	bl	80008c4 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e18e      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e0:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <HAL_RCC_OscConfig+0x574>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d108      	bne.n	8002306 <HAL_RCC_OscConfig+0x4d2>
 80022f4:	4b2b      	ldr	r3, [pc, #172]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	4a2a      	ldr	r2, [pc, #168]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002304:	e024      	b.n	8002350 <HAL_RCC_OscConfig+0x51c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b05      	cmp	r3, #5
 800230c:	d110      	bne.n	8002330 <HAL_RCC_OscConfig+0x4fc>
 800230e:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800231e:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800232e:	e00f      	b.n	8002350 <HAL_RCC_OscConfig+0x51c>
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002348:	f023 0304 	bic.w	r3, r3, #4
 800234c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d016      	beq.n	8002386 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe fab4 	bl	80008c4 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800235e:	e00a      	b.n	8002376 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002360:	f7fe fab0 	bl	80008c4 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e143      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_OscConfig+0x570>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ed      	beq.n	8002360 <HAL_RCC_OscConfig+0x52c>
 8002384:	e019      	b.n	80023ba <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7fe fa9d 	bl	80008c4 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800238c:	e00e      	b.n	80023ac <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe fa99 	bl	80008c4 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d905      	bls.n	80023ac <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e12c      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ac:	4b96      	ldr	r3, [pc, #600]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1e9      	bne.n	800238e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ba:	7ffb      	ldrb	r3, [r7, #31]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d105      	bne.n	80023cc <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c0:	4b91      	ldr	r3, [pc, #580]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	4a90      	ldr	r2, [pc, #576]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 80023c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d03c      	beq.n	8002452 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01c      	beq.n	800241a <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023e0:	4b89      	ldr	r3, [pc, #548]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 80023e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023e6:	4a88      	ldr	r2, [pc, #544]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7fe fa68 	bl	80008c4 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023f8:	f7fe fa64 	bl	80008c4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e0f9      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800240a:	4b7f      	ldr	r3, [pc, #508]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 800240c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0ef      	beq.n	80023f8 <HAL_RCC_OscConfig+0x5c4>
 8002418:	e01b      	b.n	8002452 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800241a:	4b7b      	ldr	r3, [pc, #492]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 800241c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002420:	4a79      	ldr	r2, [pc, #484]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242a:	f7fe fa4b 	bl	80008c4 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002432:	f7fe fa47 	bl	80008c4 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0dc      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002444:	4b70      	ldr	r3, [pc, #448]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 8002446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1ef      	bne.n	8002432 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80d0 	beq.w	80025fc <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2b0c      	cmp	r3, #12
 8002460:	f000 808d 	beq.w	800257e <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	2b02      	cmp	r3, #2
 800246a:	d15a      	bne.n	8002522 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246c:	4b66      	ldr	r3, [pc, #408]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a65      	ldr	r2, [pc, #404]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 8002472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe fa24 	bl	80008c4 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe fa20 	bl	80008c4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e0b5      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002492:	4b5d      	ldr	r3, [pc, #372]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800249e:	4b5a      	ldr	r3, [pc, #360]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	4b5a      	ldr	r3, [pc, #360]	; (800260c <HAL_RCC_OscConfig+0x7d8>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024ae:	3a01      	subs	r2, #1
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	4311      	orrs	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024b8:	0212      	lsls	r2, r2, #8
 80024ba:	4311      	orrs	r1, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024c0:	0852      	lsrs	r2, r2, #1
 80024c2:	3a01      	subs	r2, #1
 80024c4:	0552      	lsls	r2, r2, #21
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024cc:	0852      	lsrs	r2, r2, #1
 80024ce:	3a01      	subs	r2, #1
 80024d0:	0652      	lsls	r2, r2, #25
 80024d2:	4311      	orrs	r1, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024d8:	06d2      	lsls	r2, r2, #27
 80024da:	430a      	orrs	r2, r1
 80024dc:	494a      	ldr	r1, [pc, #296]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e2:	4b49      	ldr	r3, [pc, #292]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a48      	ldr	r2, [pc, #288]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 80024e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ec:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024ee:	4b46      	ldr	r3, [pc, #280]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	4a45      	ldr	r2, [pc, #276]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 80024f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7fe f9e3 	bl	80008c4 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002502:	f7fe f9df 	bl	80008c4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e074      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002514:	4b3c      	ldr	r3, [pc, #240]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x6ce>
 8002520:	e06c      	b.n	80025fc <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002522:	4b39      	ldr	r3, [pc, #228]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a38      	ldr	r2, [pc, #224]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 8002528:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800252c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800252e:	4b36      	ldr	r3, [pc, #216]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d105      	bne.n	8002546 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800253a:	4b33      	ldr	r3, [pc, #204]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4a32      	ldr	r2, [pc, #200]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 8002540:	f023 0303 	bic.w	r3, r3, #3
 8002544:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 800254c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002554:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe f9b5 	bl	80008c4 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255e:	f7fe f9b1 	bl	80008c4 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e046      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x72a>
 800257c:	e03e      	b.n	80025fc <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e039      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800258a:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <HAL_RCC_OscConfig+0x7d4>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 0203 	and.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	429a      	cmp	r2, r3
 800259c:	d12c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	3b01      	subs	r3, #1
 80025aa:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d123      	bne.n	80025f8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ba:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d11b      	bne.n	80025f8 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d113      	bne.n	80025f8 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	3b01      	subs	r3, #1
 80025de:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d109      	bne.n	80025f8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	3b01      	subs	r3, #1
 80025f2:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	019d808c 	.word	0x019d808c

08002610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0c8      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002624:	4b66      	ldr	r3, [pc, #408]	; (80027c0 <HAL_RCC_ClockConfig+0x1b0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d910      	bls.n	8002654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_RCC_ClockConfig+0x1b0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 0207 	bic.w	r2, r3, #7
 800263a:	4961      	ldr	r1, [pc, #388]	; (80027c0 <HAL_RCC_ClockConfig+0x1b0>)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <HAL_RCC_ClockConfig+0x1b0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0b0      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d04c      	beq.n	80026fa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d107      	bne.n	8002678 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002668:	4b56      	ldr	r3, [pc, #344]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d121      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e09e      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d107      	bne.n	8002690 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002680:	4b50      	ldr	r3, [pc, #320]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d115      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e092      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002698:	4b4a      	ldr	r3, [pc, #296]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e086      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a8:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e07e      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026b8:	4b42      	ldr	r3, [pc, #264]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 0203 	bic.w	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	493f      	ldr	r1, [pc, #252]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ca:	f7fe f8fb 	bl	80008c4 <HAL_GetTick>
 80026ce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d2:	f7fe f8f7 	bl	80008c4 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e066      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 020c 	and.w	r2, r3, #12
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d1eb      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	492c      	ldr	r1, [pc, #176]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <HAL_RCC_ClockConfig+0x1b0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d210      	bcs.n	8002748 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <HAL_RCC_ClockConfig+0x1b0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	4924      	ldr	r1, [pc, #144]	; (80027c0 <HAL_RCC_ClockConfig+0x1b0>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_RCC_ClockConfig+0x1b0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e036      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4918      	ldr	r1, [pc, #96]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4910      	ldr	r1, [pc, #64]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002786:	f000 f825 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800278a:	4601      	mov	r1, r0
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_RCC_ClockConfig+0x1b4>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	5cd3      	ldrb	r3, [r2, r3]
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	fa21 f303 	lsr.w	r3, r1, r3
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe f83e 	bl	800082c <HAL_InitTick>
 80027b0:	4603      	mov	r3, r0
 80027b2:	72fb      	strb	r3, [r7, #11]

  return status;
 80027b4:	7afb      	ldrb	r3, [r7, #11]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40022000 	.word	0x40022000
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08007990 	.word	0x08007990
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e2:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x104>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ec:	4b3a      	ldr	r3, [pc, #232]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x104>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x34>
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	d121      	bne.n	8002846 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d11e      	bne.n	8002846 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002808:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d107      	bne.n	8002824 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002814:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	e005      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002824:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002830:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002838:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10d      	bne.n	800285c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002844:	e00a      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d102      	bne.n	8002852 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800284c:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	e004      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b08      	cmp	r3, #8
 8002856:	d101      	bne.n	800285c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002858:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800285a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	2b0c      	cmp	r3, #12
 8002860:	d133      	bne.n	80028ca <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002862:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d002      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0xa4>
 8002872:	2b03      	cmp	r3, #3
 8002874:	d003      	beq.n	800287e <HAL_RCC_GetSysClockFreq+0xaa>
 8002876:	e005      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800287a:	617b      	str	r3, [r7, #20]
      break;
 800287c:	e005      	b.n	800288a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002880:	617b      	str	r3, [r7, #20]
      break;
 8002882:	e002      	b.n	800288a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	617b      	str	r3, [r7, #20]
      break;
 8002888:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	3301      	adds	r3, #1
 8002896:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002898:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	fb02 f203 	mul.w	r2, r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x104>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	0e5b      	lsrs	r3, r3, #25
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	3301      	adds	r3, #1
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028ca:	69bb      	ldr	r3, [r7, #24]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3724      	adds	r7, #36	; 0x24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	40021000 	.word	0x40021000
 80028dc:	080079a0 	.word	0x080079a0
 80028e0:	00f42400 	.word	0x00f42400
 80028e4:	007a1200 	.word	0x007a1200

080028e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028f4:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002900:	f7ff fa24 	bl	8001d4c <HAL_PWREx_GetVoltageRange>
 8002904:	6178      	str	r0, [r7, #20]
 8002906:	e014      	b.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290c:	4a24      	ldr	r2, [pc, #144]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002912:	6593      	str	r3, [r2, #88]	; 0x58
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002920:	f7ff fa14 	bl	8001d4c <HAL_PWREx_GetVoltageRange>
 8002924:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002930:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002938:	d10b      	bne.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d919      	bls.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2ba0      	cmp	r3, #160	; 0xa0
 8002944:	d902      	bls.n	800294c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002946:	2302      	movs	r3, #2
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	e013      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800294c:	2301      	movs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	e010      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b80      	cmp	r3, #128	; 0x80
 8002956:	d902      	bls.n	800295e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002958:	2303      	movs	r3, #3
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	e00a      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b80      	cmp	r3, #128	; 0x80
 8002962:	d102      	bne.n	800296a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002964:	2302      	movs	r3, #2
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	e004      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b70      	cmp	r3, #112	; 0x70
 800296e:	d101      	bne.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002970:	2301      	movs	r3, #1
 8002972:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 0207 	bic.w	r2, r3, #7
 800297c:	4909      	ldr	r1, [pc, #36]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002984:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40022000 	.word	0x40022000

080029a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029b0:	2300      	movs	r3, #0
 80029b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b4:	2300      	movs	r3, #0
 80029b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02f      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029cc:	d005      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80029ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029d2:	d015      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80029d8:	e00f      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80029da:	4b5d      	ldr	r3, [pc, #372]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	4a5c      	ldr	r2, [pc, #368]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e6:	e00c      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fa1e 	bl	8002e30 <RCCEx_PLLSAI1_Config>
 80029f4:	4603      	mov	r3, r0
 80029f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029f8:	e003      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	74fb      	strb	r3, [r7, #19]
      break;
 80029fe:	e000      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a02:	7cfb      	ldrb	r3, [r7, #19]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10b      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a08:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	494e      	ldr	r1, [pc, #312]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a1e:	e001      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 809e 	beq.w	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a36:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00d      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b40      	ldr	r3, [pc, #256]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	4a3f      	ldr	r2, [pc, #252]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a56:	6593      	str	r3, [r2, #88]	; 0x58
 8002a58:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a64:	2301      	movs	r3, #1
 8002a66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a68:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a39      	ldr	r2, [pc, #228]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a74:	f7fd ff26 	bl	80008c4 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a7a:	e009      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7c:	f7fd ff22 	bl	80008c4 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d902      	bls.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	74fb      	strb	r3, [r7, #19]
        break;
 8002a8e:	e005      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a90:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ef      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d15a      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01e      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d019      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aca:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ada:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	4a1b      	ldr	r2, [pc, #108]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002aea:	4a19      	ldr	r2, [pc, #100]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d016      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fd fee2 	bl	80008c4 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b02:	e00b      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fd fede 	bl	80008c4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d902      	bls.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	74fb      	strb	r3, [r7, #19]
            break;
 8002b1a:	e006      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0ec      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10b      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b30:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	4904      	ldr	r1, [pc, #16]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b46:	e009      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	74bb      	strb	r3, [r7, #18]
 8002b4c:	e006      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b58:	7cfb      	ldrb	r3, [r7, #19]
 8002b5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b5c:	7c7b      	ldrb	r3, [r7, #17]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d105      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b62:	4bb2      	ldr	r3, [pc, #712]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	4ab1      	ldr	r2, [pc, #708]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b7a:	4bac      	ldr	r3, [pc, #688]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b80:	f023 0203 	bic.w	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	49a8      	ldr	r1, [pc, #672]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b9c:	4ba3      	ldr	r3, [pc, #652]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f023 020c 	bic.w	r2, r3, #12
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	49a0      	ldr	r1, [pc, #640]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bbe:	4b9b      	ldr	r3, [pc, #620]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	4997      	ldr	r1, [pc, #604]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002be0:	4b92      	ldr	r3, [pc, #584]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	498f      	ldr	r1, [pc, #572]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c02:	4b8a      	ldr	r3, [pc, #552]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	4986      	ldr	r1, [pc, #536]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c24:	4b81      	ldr	r3, [pc, #516]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	497e      	ldr	r1, [pc, #504]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c46:	4b79      	ldr	r3, [pc, #484]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	4975      	ldr	r1, [pc, #468]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c68:	4b70      	ldr	r3, [pc, #448]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	496d      	ldr	r1, [pc, #436]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c8a:	4b68      	ldr	r3, [pc, #416]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	4964      	ldr	r1, [pc, #400]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d028      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cac:	4b5f      	ldr	r3, [pc, #380]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cba:	495c      	ldr	r1, [pc, #368]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cca:	d106      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ccc:	4b57      	ldr	r3, [pc, #348]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4a56      	ldr	r2, [pc, #344]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cd6:	60d3      	str	r3, [r2, #12]
 8002cd8:	e011      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ce2:	d10c      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f8a0 	bl	8002e30 <RCCEx_PLLSAI1_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8002cfa:	7cfb      	ldrb	r3, [r7, #19]
 8002cfc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d028      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d0a:	4b48      	ldr	r3, [pc, #288]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d18:	4944      	ldr	r1, [pc, #272]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d28:	d106      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d2a:	4b40      	ldr	r3, [pc, #256]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4a3f      	ldr	r2, [pc, #252]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d34:	60d3      	str	r3, [r2, #12]
 8002d36:	e011      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f871 	bl	8002e30 <RCCEx_PLLSAI1_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d028      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d68:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d76:	492d      	ldr	r1, [pc, #180]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d86:	d106      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d88:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a27      	ldr	r2, [pc, #156]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d92:	60d3      	str	r3, [r2, #12]
 8002d94:	e011      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d9e:	d10c      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	2101      	movs	r1, #1
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f842 	bl	8002e30 <RCCEx_PLLSAI1_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01c      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dc6:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dcc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	4915      	ldr	r1, [pc, #84]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	2102      	movs	r1, #2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 f81f 	bl	8002e30 <RCCEx_PLLSAI1_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002df6:	7cfb      	ldrb	r3, [r7, #19]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e0c:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1a:	4904      	ldr	r1, [pc, #16]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e22:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000

08002e30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e3e:	4b73      	ldr	r3, [pc, #460]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d018      	beq.n	8002e7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e4a:	4b70      	ldr	r3, [pc, #448]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f003 0203 	and.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d10d      	bne.n	8002e76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e62:	4b6a      	ldr	r3, [pc, #424]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
       ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d044      	beq.n	8002f00 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	e041      	b.n	8002f00 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d00c      	beq.n	8002e9e <RCCEx_PLLSAI1_Config+0x6e>
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d013      	beq.n	8002eb0 <RCCEx_PLLSAI1_Config+0x80>
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d120      	bne.n	8002ece <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e8c:	4b5f      	ldr	r3, [pc, #380]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d11d      	bne.n	8002ed4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9c:	e01a      	b.n	8002ed4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e9e:	4b5b      	ldr	r3, [pc, #364]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d116      	bne.n	8002ed8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eae:	e013      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eb0:	4b56      	ldr	r3, [pc, #344]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10f      	bne.n	8002edc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ebc:	4b53      	ldr	r3, [pc, #332]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d109      	bne.n	8002edc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ecc:	e006      	b.n	8002edc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed2:	e004      	b.n	8002ede <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ed4:	bf00      	nop
 8002ed6:	e002      	b.n	8002ede <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ed8:	bf00      	nop
 8002eda:	e000      	b.n	8002ede <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002edc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10d      	bne.n	8002f00 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ee4:	4b49      	ldr	r3, [pc, #292]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	4944      	ldr	r1, [pc, #272]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d17c      	bne.n	8003000 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f06:	4b41      	ldr	r3, [pc, #260]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a40      	ldr	r2, [pc, #256]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f12:	f7fd fcd7 	bl	80008c4 <HAL_GetTick>
 8002f16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f18:	e009      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f1a:	f7fd fcd3 	bl	80008c4 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d902      	bls.n	8002f2e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	73fb      	strb	r3, [r7, #15]
        break;
 8002f2c:	e005      	b.n	8002f3a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f2e:	4b37      	ldr	r3, [pc, #220]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1ef      	bne.n	8002f1a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d15f      	bne.n	8003000 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d110      	bne.n	8002f68 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f46:	4b31      	ldr	r3, [pc, #196]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002f4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6892      	ldr	r2, [r2, #8]
 8002f56:	0211      	lsls	r1, r2, #8
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68d2      	ldr	r2, [r2, #12]
 8002f5c:	06d2      	lsls	r2, r2, #27
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	492a      	ldr	r1, [pc, #168]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	610b      	str	r3, [r1, #16]
 8002f66:	e027      	b.n	8002fb8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d112      	bne.n	8002f94 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f6e:	4b27      	ldr	r3, [pc, #156]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6892      	ldr	r2, [r2, #8]
 8002f7e:	0211      	lsls	r1, r2, #8
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6912      	ldr	r2, [r2, #16]
 8002f84:	0852      	lsrs	r2, r2, #1
 8002f86:	3a01      	subs	r2, #1
 8002f88:	0552      	lsls	r2, r2, #21
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	491f      	ldr	r1, [pc, #124]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	610b      	str	r3, [r1, #16]
 8002f92:	e011      	b.n	8002fb8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6892      	ldr	r2, [r2, #8]
 8002fa4:	0211      	lsls	r1, r2, #8
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6952      	ldr	r2, [r2, #20]
 8002faa:	0852      	lsrs	r2, r2, #1
 8002fac:	3a01      	subs	r2, #1
 8002fae:	0652      	lsls	r2, r2, #25
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	4916      	ldr	r1, [pc, #88]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fb8:	4b14      	ldr	r3, [pc, #80]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a13      	ldr	r2, [pc, #76]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7fd fc7e 	bl	80008c4 <HAL_GetTick>
 8002fc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fca:	e009      	b.n	8002fe0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fcc:	f7fd fc7a 	bl	80008c4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d902      	bls.n	8002fe0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	73fb      	strb	r3, [r7, #15]
          break;
 8002fde:	e005      	b.n	8002fec <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ef      	beq.n	8002fcc <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	4904      	ldr	r1, [pc, #16]	; (800300c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003000:	7bfb      	ldrb	r3, [r7, #15]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000

08003010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e07c      	b.n	800311c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d106      	bne.n	8003042 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7fd fac5 	bl	80005cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003058:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003062:	d902      	bls.n	800306a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	e002      	b.n	8003070 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800306a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003078:	d007      	beq.n	800308a <HAL_SPI_Init+0x7a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003082:	d002      	beq.n	800308a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800309a:	d903      	bls.n	80030a4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
 80030a2:	e002      	b.n	80030aa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	ea42 0103 	orr.w	r1, r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	0c1b      	lsrs	r3, r3, #16
 80030ea:	f003 0204 	and.w	r2, r3, #4
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	ea42 0103 	orr.w	r1, r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_SPI_Transmit+0x22>
 8003142:	2302      	movs	r3, #2
 8003144:	e150      	b.n	80033e8 <HAL_SPI_Transmit+0x2c4>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800314e:	f7fd fbb9 	bl	80008c4 <HAL_GetTick>
 8003152:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	d002      	beq.n	800316a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003164:	2302      	movs	r3, #2
 8003166:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003168:	e135      	b.n	80033d6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_SPI_Transmit+0x52>
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	77fb      	strb	r3, [r7, #31]
    goto error;
 800317a:	e12c      	b.n	80033d6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2203      	movs	r2, #3
 8003180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	88fa      	ldrh	r2, [r7, #6]
 800319a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c6:	d107      	bne.n	80031d8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d007      	beq.n	80031f6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031fe:	d94b      	bls.n	8003298 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_SPI_Transmit+0xea>
 8003208:	8afb      	ldrh	r3, [r7, #22]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d13e      	bne.n	800328c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003232:	e02b      	b.n	800328c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d112      	bne.n	8003268 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	881a      	ldrh	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	1c9a      	adds	r2, r3, #2
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003266:	e011      	b.n	800328c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003268:	f7fd fb2c 	bl	80008c4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d803      	bhi.n	8003280 <HAL_SPI_Transmit+0x15c>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327e:	d102      	bne.n	8003286 <HAL_SPI_Transmit+0x162>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d102      	bne.n	800328c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	77fb      	strb	r3, [r7, #31]
          goto error;
 800328a:	e0a4      	b.n	80033d6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1ce      	bne.n	8003234 <HAL_SPI_Transmit+0x110>
 8003296:	e07c      	b.n	8003392 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_SPI_Transmit+0x182>
 80032a0:	8afb      	ldrh	r3, [r7, #22]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d170      	bne.n	8003388 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d912      	bls.n	80032d6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	881a      	ldrh	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b02      	subs	r3, #2
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032d4:	e058      	b.n	8003388 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	7812      	ldrb	r2, [r2, #0]
 80032e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80032fc:	e044      	b.n	8003388 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d12b      	bne.n	8003364 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d912      	bls.n	800333c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	881a      	ldrh	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	1c9a      	adds	r2, r3, #2
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b02      	subs	r3, #2
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	87da      	strh	r2, [r3, #62]	; 0x3e
 800333a:	e025      	b.n	8003388 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	330c      	adds	r3, #12
 8003346:	7812      	ldrb	r2, [r2, #0]
 8003348:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003362:	e011      	b.n	8003388 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003364:	f7fd faae 	bl	80008c4 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d803      	bhi.n	800337c <HAL_SPI_Transmit+0x258>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d102      	bne.n	8003382 <HAL_SPI_Transmit+0x25e>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003386:	e026      	b.n	80033d6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1b5      	bne.n	80032fe <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	6839      	ldr	r1, [r7, #0]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fc42 	bl	8003c20 <SPI_EndRxTxTransaction>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e000      	b.n	80033d6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80033d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3720      	adds	r7, #32
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033fe:	2301      	movs	r3, #1
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_SPI_TransmitReceive+0x26>
 8003412:	2302      	movs	r3, #2
 8003414:	e1fb      	b.n	800380e <HAL_SPI_TransmitReceive+0x41e>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800341e:	f7fd fa51 	bl	80008c4 <HAL_GetTick>
 8003422:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800342a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003436:	887b      	ldrh	r3, [r7, #2]
 8003438:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800343a:	7efb      	ldrb	r3, [r7, #27]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d00e      	beq.n	800345e <HAL_SPI_TransmitReceive+0x6e>
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003446:	d106      	bne.n	8003456 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d102      	bne.n	8003456 <HAL_SPI_TransmitReceive+0x66>
 8003450:	7efb      	ldrb	r3, [r7, #27]
 8003452:	2b04      	cmp	r3, #4
 8003454:	d003      	beq.n	800345e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003456:	2302      	movs	r3, #2
 8003458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800345c:	e1cd      	b.n	80037fa <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_SPI_TransmitReceive+0x80>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_SPI_TransmitReceive+0x80>
 800346a:	887b      	ldrh	r3, [r7, #2]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d103      	bne.n	8003478 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003476:	e1c0      	b.n	80037fa <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b04      	cmp	r3, #4
 8003482:	d003      	beq.n	800348c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2205      	movs	r2, #5
 8003488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	887a      	ldrh	r2, [r7, #2]
 800349c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	887a      	ldrh	r2, [r7, #2]
 80034a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	887a      	ldrh	r2, [r7, #2]
 80034b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	887a      	ldrh	r2, [r7, #2]
 80034b8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ce:	d802      	bhi.n	80034d6 <HAL_SPI_TransmitReceive+0xe6>
 80034d0:	8a3b      	ldrh	r3, [r7, #16]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d908      	bls.n	80034e8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	e007      	b.n	80034f8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d007      	beq.n	8003516 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003514:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800351e:	d97c      	bls.n	800361a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_SPI_TransmitReceive+0x13e>
 8003528:	8a7b      	ldrh	r3, [r7, #18]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d169      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	881a      	ldrh	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	1c9a      	adds	r2, r3, #2
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003552:	e056      	b.n	8003602 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b02      	cmp	r3, #2
 8003560:	d11b      	bne.n	800359a <HAL_SPI_TransmitReceive+0x1aa>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d016      	beq.n	800359a <HAL_SPI_TransmitReceive+0x1aa>
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	2b01      	cmp	r3, #1
 8003570:	d113      	bne.n	800359a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	881a      	ldrh	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	1c9a      	adds	r2, r3, #2
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d11c      	bne.n	80035e2 <HAL_SPI_TransmitReceive+0x1f2>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d016      	beq.n	80035e2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	b292      	uxth	r2, r2
 80035c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	1c9a      	adds	r2, r3, #2
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035de:	2301      	movs	r3, #1
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035e2:	f7fd f96f 	bl	80008c4 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d807      	bhi.n	8003602 <HAL_SPI_TransmitReceive+0x212>
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d003      	beq.n	8003602 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003600:	e0fb      	b.n	80037fa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1a3      	bne.n	8003554 <HAL_SPI_TransmitReceive+0x164>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d19d      	bne.n	8003554 <HAL_SPI_TransmitReceive+0x164>
 8003618:	e0df      	b.n	80037da <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_SPI_TransmitReceive+0x23a>
 8003622:	8a7b      	ldrh	r3, [r7, #18]
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 80cb 	bne.w	80037c0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d912      	bls.n	800365a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	881a      	ldrh	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	1c9a      	adds	r2, r3, #2
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b02      	subs	r3, #2
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003658:	e0b2      	b.n	80037c0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	7812      	ldrb	r2, [r2, #0]
 8003666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003680:	e09e      	b.n	80037c0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d134      	bne.n	80036fa <HAL_SPI_TransmitReceive+0x30a>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d02f      	beq.n	80036fa <HAL_SPI_TransmitReceive+0x30a>
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	2b01      	cmp	r3, #1
 800369e:	d12c      	bne.n	80036fa <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d912      	bls.n	80036d0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	881a      	ldrh	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	1c9a      	adds	r2, r3, #2
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b02      	subs	r3, #2
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036ce:	e012      	b.n	80036f6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	7812      	ldrb	r2, [r2, #0]
 80036dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d148      	bne.n	800379a <HAL_SPI_TransmitReceive+0x3aa>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d042      	beq.n	800379a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d923      	bls.n	8003768 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	b292      	uxth	r2, r2
 800372c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	1c9a      	adds	r2, r3, #2
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b02      	subs	r3, #2
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d81f      	bhi.n	8003796 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	e016      	b.n	8003796 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f103 020c 	add.w	r2, r3, #12
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	7812      	ldrb	r2, [r2, #0]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003796:	2301      	movs	r3, #1
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800379a:	f7fd f893 	bl	80008c4 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d803      	bhi.n	80037b2 <HAL_SPI_TransmitReceive+0x3c2>
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d102      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x3c8>
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d103      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80037be:	e01c      	b.n	80037fa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f47f af5b 	bne.w	8003682 <HAL_SPI_TransmitReceive+0x292>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f47f af54 	bne.w	8003682 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fa1e 	bl	8003c20 <SPI_EndRxTxTransaction>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d006      	beq.n	80037f8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	661a      	str	r2, [r3, #96]	; 0x60
 80037f6:	e000      	b.n	80037fa <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80037f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800380a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800380e:	4618      	mov	r0, r3
 8003810:	3728      	adds	r7, #40	; 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	099b      	lsrs	r3, r3, #6
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10f      	bne.n	800385c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	099b      	lsrs	r3, r3, #6
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
    return;
 800385a:	e0d8      	b.n	8003a0e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_SPI_IRQHandler+0x66>
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	09db      	lsrs	r3, r3, #7
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
    return;
 800387c:	e0c7      	b.n	8003a0e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10c      	bne.n	80038a4 <HAL_SPI_IRQHandler+0x8c>
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	099b      	lsrs	r3, r3, #6
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_SPI_IRQHandler+0x8c>
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	0a1b      	lsrs	r3, r3, #8
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80b5 	beq.w	8003a0e <HAL_SPI_IRQHandler+0x1f6>
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80ae 	beq.w	8003a0e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	099b      	lsrs	r3, r3, #6
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d023      	beq.n	8003906 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d011      	beq.n	80038ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ce:	f043 0204 	orr.w	r2, r3, #4
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	e00b      	b.n	8003906 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038ee:	2300      	movs	r3, #0
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	693b      	ldr	r3, [r7, #16]
        return;
 8003904:	e083      	b.n	8003a0e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d014      	beq.n	800393c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003916:	f043 0201 	orr.w	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00c      	beq.n	8003962 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394c:	f043 0208 	orr.w	r2, r3, #8
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003966:	2b00      	cmp	r3, #0
 8003968:	d050      	beq.n	8003a0c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003978:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <HAL_SPI_IRQHandler+0x17e>
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d034      	beq.n	8003a00 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0203 	bic.w	r2, r2, #3
 80039a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d011      	beq.n	80039d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <HAL_SPI_IRQHandler+0x1fc>)
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd f8c1 	bl	8000b42 <HAL_DMA_Abort_IT>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d016      	beq.n	8003a08 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	4a0d      	ldr	r2, [pc, #52]	; (8003a14 <HAL_SPI_IRQHandler+0x1fc>)
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd f8ab 	bl	8000b42 <HAL_DMA_Abort_IT>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80039fe:	e003      	b.n	8003a08 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f809 	bl	8003a18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a06:	e000      	b.n	8003a0a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003a08:	bf00      	nop
    return;
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
  }
}
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	08003a49 	.word	0x08003a49

08003a18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a3a:	b2db      	uxtb	r3, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7ff ffd7 	bl	8003a18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a6a:	bf00      	nop
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a82:	e04c      	b.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d048      	beq.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003a8c:	f7fc ff1a 	bl	80008c4 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d902      	bls.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d13d      	bne.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ab0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aba:	d111      	bne.n	8003ae0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac4:	d004      	beq.n	8003ad0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ace:	d107      	bne.n	8003ae0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ade:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae8:	d10f      	bne.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e00f      	b.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4013      	ands	r3, r2
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	bf0c      	ite	eq
 8003b2e:	2301      	moveq	r3, #1
 8003b30:	2300      	movne	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d1a3      	bne.n	8003a84 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	607a      	str	r2, [r7, #4]
 8003b52:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b54:	e057      	b.n	8003c06 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b5c:	d106      	bne.n	8003b6c <SPI_WaitFifoStateUntilTimeout+0x26>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d103      	bne.n	8003b6c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b72:	d048      	beq.n	8003c06 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003b74:	f7fc fea6 	bl	80008c4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d902      	bls.n	8003b8a <SPI_WaitFifoStateUntilTimeout+0x44>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d13d      	bne.n	8003c06 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ba2:	d111      	bne.n	8003bc8 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bac:	d004      	beq.n	8003bb8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb6:	d107      	bne.n	8003bc8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd0:	d10f      	bne.n	8003bf2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e008      	b.n	8003c18 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d19f      	bne.n	8003b56 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff ff84 	bl	8003b46 <SPI_WaitFifoStateUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c48:	f043 0220 	orr.w	r2, r3, #32
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e027      	b.n	8003ca4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2180      	movs	r1, #128	; 0x80
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f7ff ff07 	bl	8003a72 <SPI_WaitFlagStateUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6e:	f043 0220 	orr.w	r2, r3, #32
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e014      	b.n	8003ca4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7ff ff5d 	bl	8003b46 <SPI_WaitFifoStateUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c96:	f043 0220 	orr.w	r2, r3, #32
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e000      	b.n	8003ca4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cac:	b084      	sub	sp, #16
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	f107 0014 	add.w	r0, r7, #20
 8003cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	b004      	add	sp, #16
 8003ccc:	4770      	bx	lr

08003cce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cd6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003cda:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	89fb      	ldrh	r3, [r7, #14]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d06:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003d0a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	b21a      	sxth	r2, r3
 8003d16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	b21b      	sxth	r3, r3
 8003d1e:	4013      	ands	r3, r2
 8003d20:	b21b      	sxth	r3, r3
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d52:	b084      	sub	sp, #16
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	f107 0014 	add.w	r0, r7, #20
 8003d60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ffa2 	bl	8003cce <USB_EnableGlobalInt>

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d96:	b004      	add	sp, #16
 8003d98:	4770      	bx	lr
	...

08003d9c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d9c:	b490      	push	{r4, r7}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc0:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	78db      	ldrb	r3, [r3, #3]
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d819      	bhi.n	8003dfe <USB_ActivateEndpoint+0x62>
 8003dca:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <USB_ActivateEndpoint+0x34>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003de1 	.word	0x08003de1
 8003dd4:	08003df5 	.word	0x08003df5
 8003dd8:	08003e05 	.word	0x08003e05
 8003ddc:	08003deb 	.word	0x08003deb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003de0:	8abb      	ldrh	r3, [r7, #20]
 8003de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003de6:	82bb      	strh	r3, [r7, #20]
      break;
 8003de8:	e00d      	b.n	8003e06 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003dea:	8abb      	ldrh	r3, [r7, #20]
 8003dec:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003df0:	82bb      	strh	r3, [r7, #20]
      break;
 8003df2:	e008      	b.n	8003e06 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003df4:	8abb      	ldrh	r3, [r7, #20]
 8003df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dfa:	82bb      	strh	r3, [r7, #20]
      break;
 8003dfc:	e003      	b.n	8003e06 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
      break;
 8003e02:	e000      	b.n	8003e06 <USB_ActivateEndpoint+0x6a>
      break;
 8003e04:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	441a      	add	r2, r3
 8003e10:	8abb      	ldrh	r3, [r7, #20]
 8003e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	b21b      	sxth	r3, r3
 8003e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3e:	b21a      	sxth	r2, r3
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	4313      	orrs	r3, r2
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	b29c      	uxth	r4, r3
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	441a      	add	r2, r3
 8003e56:	4b87      	ldr	r3, [pc, #540]	; (8004074 <USB_ActivateEndpoint+0x2d8>)
 8003e58:	4323      	orrs	r3, r4
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	7b1b      	ldrb	r3, [r3, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 810c 	bne.w	8004080 <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d067      	beq.n	8003f40 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e70:	687c      	ldr	r4, [r7, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	441c      	add	r4, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4423      	add	r3, r4
 8003e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e88:	461c      	mov	r4, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	88db      	ldrh	r3, [r3, #6]
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b29c      	uxth	r4, r3
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d014      	beq.n	8003eda <USB_ActivateEndpoint+0x13e>
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	b29c      	uxth	r4, r3
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	441a      	add	r2, r3
 8003ed2:	4b69      	ldr	r3, [pc, #420]	; (8004078 <USB_ActivateEndpoint+0x2dc>)
 8003ed4:	4323      	orrs	r3, r4
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	78db      	ldrb	r3, [r3, #3]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d018      	beq.n	8003f14 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef8:	b29c      	uxth	r4, r3
 8003efa:	f084 0320 	eor.w	r3, r4, #32
 8003efe:	b29c      	uxth	r4, r3
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	441a      	add	r2, r3
 8003f0a:	4b5a      	ldr	r3, [pc, #360]	; (8004074 <USB_ActivateEndpoint+0x2d8>)
 8003f0c:	4323      	orrs	r3, r4
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	8013      	strh	r3, [r2, #0]
 8003f12:	e225      	b.n	8004360 <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f2a:	b29c      	uxth	r4, r3
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	4b4f      	ldr	r3, [pc, #316]	; (8004074 <USB_ActivateEndpoint+0x2d8>)
 8003f38:	4323      	orrs	r3, r4
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	8013      	strh	r3, [r2, #0]
 8003f3e:	e20f      	b.n	8004360 <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f40:	687c      	ldr	r4, [r7, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	441c      	add	r4, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4423      	add	r3, r4
 8003f54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f58:	461c      	mov	r4, r3
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	88db      	ldrh	r3, [r3, #6]
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f68:	687c      	ldr	r4, [r7, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	441c      	add	r4, r3
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4423      	add	r3, r4
 8003f7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d110      	bne.n	8003fac <USB_ActivateEndpoint+0x210>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	801a      	strh	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	801a      	strh	r2, [r3, #0]
 8003faa:	e026      	b.n	8003ffa <USB_ActivateEndpoint+0x25e>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b3d      	cmp	r3, #61	; 0x3d
 8003fb2:	d813      	bhi.n	8003fdc <USB_ActivateEndpoint+0x240>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <USB_ActivateEndpoint+0x232>
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	029b      	lsls	r3, r3, #10
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	e00e      	b.n	8003ffa <USB_ActivateEndpoint+0x25e>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	029b      	lsls	r3, r3, #10
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	b29c      	uxth	r4, r3
 8004008:	4623      	mov	r3, r4
 800400a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d014      	beq.n	800403c <USB_ActivateEndpoint+0x2a0>
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004028:	b29c      	uxth	r4, r3
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	441a      	add	r2, r3
 8004034:	4b11      	ldr	r3, [pc, #68]	; (800407c <USB_ActivateEndpoint+0x2e0>)
 8004036:	4323      	orrs	r3, r4
 8004038:	b29b      	uxth	r3, r3
 800403a:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	b29c      	uxth	r4, r3
 8004054:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004058:	b29c      	uxth	r4, r3
 800405a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800405e:	b29c      	uxth	r4, r3
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	441a      	add	r2, r3
 800406a:	4b02      	ldr	r3, [pc, #8]	; (8004074 <USB_ActivateEndpoint+0x2d8>)
 800406c:	4323      	orrs	r3, r4
 800406e:	b29b      	uxth	r3, r3
 8004070:	8013      	strh	r3, [r2, #0]
 8004072:	e175      	b.n	8004360 <USB_ActivateEndpoint+0x5c4>
 8004074:	ffff8080 	.word	0xffff8080
 8004078:	ffff80c0 	.word	0xffff80c0
 800407c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004096:	b29c      	uxth	r4, r3
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	441a      	add	r2, r3
 80040a2:	4b96      	ldr	r3, [pc, #600]	; (80042fc <USB_ActivateEndpoint+0x560>)
 80040a4:	4323      	orrs	r3, r4
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040aa:	687c      	ldr	r4, [r7, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	441c      	add	r4, r3
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4423      	add	r3, r4
 80040be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040c2:	461c      	mov	r4, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	891b      	ldrh	r3, [r3, #8]
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	8023      	strh	r3, [r4, #0]
 80040d2:	687c      	ldr	r4, [r7, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040da:	b29b      	uxth	r3, r3
 80040dc:	441c      	add	r4, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4423      	add	r3, r4
 80040e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040ea:	461c      	mov	r4, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	895b      	ldrh	r3, [r3, #10]
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 8088 	bne.w	8004214 <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29c      	uxth	r4, r3
 8004112:	4623      	mov	r3, r4
 8004114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d014      	beq.n	8004146 <USB_ActivateEndpoint+0x3aa>
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	b29c      	uxth	r4, r3
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	4b70      	ldr	r3, [pc, #448]	; (8004300 <USB_ActivateEndpoint+0x564>)
 8004140:	4323      	orrs	r3, r4
 8004142:	b29b      	uxth	r3, r3
 8004144:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29c      	uxth	r4, r3
 8004154:	4623      	mov	r3, r4
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d014      	beq.n	8004188 <USB_ActivateEndpoint+0x3ec>
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004174:	b29c      	uxth	r4, r3
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	4b60      	ldr	r3, [pc, #384]	; (8004304 <USB_ActivateEndpoint+0x568>)
 8004182:	4323      	orrs	r3, r4
 8004184:	b29b      	uxth	r3, r3
 8004186:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419e:	b29c      	uxth	r4, r3
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	441a      	add	r2, r3
 80041aa:	4b56      	ldr	r3, [pc, #344]	; (8004304 <USB_ActivateEndpoint+0x568>)
 80041ac:	4323      	orrs	r3, r4
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c8:	b29c      	uxth	r4, r3
 80041ca:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80041ce:	b29c      	uxth	r4, r3
 80041d0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80041d4:	b29c      	uxth	r4, r3
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	441a      	add	r2, r3
 80041e0:	4b49      	ldr	r3, [pc, #292]	; (8004308 <USB_ActivateEndpoint+0x56c>)
 80041e2:	4323      	orrs	r3, r4
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041fe:	b29c      	uxth	r4, r3
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	441a      	add	r2, r3
 800420a:	4b3f      	ldr	r3, [pc, #252]	; (8004308 <USB_ActivateEndpoint+0x56c>)
 800420c:	4323      	orrs	r3, r4
 800420e:	b29b      	uxth	r3, r3
 8004210:	8013      	strh	r3, [r2, #0]
 8004212:	e0a5      	b.n	8004360 <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	b29c      	uxth	r4, r3
 8004222:	4623      	mov	r3, r4
 8004224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d014      	beq.n	8004256 <USB_ActivateEndpoint+0x4ba>
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004242:	b29c      	uxth	r4, r3
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	441a      	add	r2, r3
 800424e:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <USB_ActivateEndpoint+0x564>)
 8004250:	4323      	orrs	r3, r4
 8004252:	b29b      	uxth	r3, r3
 8004254:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b29c      	uxth	r4, r3
 8004264:	4623      	mov	r3, r4
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d014      	beq.n	8004298 <USB_ActivateEndpoint+0x4fc>
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004284:	b29c      	uxth	r4, r3
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	441a      	add	r2, r3
 8004290:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <USB_ActivateEndpoint+0x568>)
 8004292:	4323      	orrs	r3, r4
 8004294:	b29b      	uxth	r3, r3
 8004296:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	b29c      	uxth	r4, r3
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	441a      	add	r2, r3
 80042ba:	4b11      	ldr	r3, [pc, #68]	; (8004300 <USB_ActivateEndpoint+0x564>)
 80042bc:	4323      	orrs	r3, r4
 80042be:	b29b      	uxth	r3, r3
 80042c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	78db      	ldrb	r3, [r3, #3]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d020      	beq.n	800430c <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e0:	b29c      	uxth	r4, r3
 80042e2:	f084 0320 	eor.w	r3, r4, #32
 80042e6:	b29c      	uxth	r4, r3
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	441a      	add	r2, r3
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <USB_ActivateEndpoint+0x56c>)
 80042f4:	4323      	orrs	r3, r4
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	8013      	strh	r3, [r2, #0]
 80042fa:	e01c      	b.n	8004336 <USB_ActivateEndpoint+0x59a>
 80042fc:	ffff8180 	.word	0xffff8180
 8004300:	ffffc080 	.word	0xffffc080
 8004304:	ffff80c0 	.word	0xffff80c0
 8004308:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	b29b      	uxth	r3, r3
 800431a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004322:	b29c      	uxth	r4, r3
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	441a      	add	r2, r3
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <USB_ActivateEndpoint+0x5d0>)
 8004330:	4323      	orrs	r3, r4
 8004332:	b29b      	uxth	r3, r3
 8004334:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434c:	b29c      	uxth	r4, r3
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	441a      	add	r2, r3
 8004358:	4b04      	ldr	r3, [pc, #16]	; (800436c <USB_ActivateEndpoint+0x5d0>)
 800435a:	4323      	orrs	r3, r4
 800435c:	b29b      	uxth	r3, r3
 800435e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004360:	7dfb      	ldrb	r3, [r7, #23]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bc90      	pop	{r4, r7}
 800436a:	4770      	bx	lr
 800436c:	ffff8080 	.word	0xffff8080

08004370 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004370:	b490      	push	{r4, r7}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	7b1b      	ldrb	r3, [r3, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d171      	bne.n	8004466 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	785b      	ldrb	r3, [r3, #1]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d036      	beq.n	80043f8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29c      	uxth	r4, r3
 8004398:	4623      	mov	r3, r4
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d014      	beq.n	80043cc <USB_DeactivateEndpoint+0x5c>
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	b29c      	uxth	r4, r3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	4b6b      	ldr	r3, [pc, #428]	; (8004574 <USB_DeactivateEndpoint+0x204>)
 80043c6:	4323      	orrs	r3, r4
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e2:	b29c      	uxth	r4, r3
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	441a      	add	r2, r3
 80043ee:	4b62      	ldr	r3, [pc, #392]	; (8004578 <USB_DeactivateEndpoint+0x208>)
 80043f0:	4323      	orrs	r3, r4
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8013      	strh	r3, [r2, #0]
 80043f6:	e144      	b.n	8004682 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b29c      	uxth	r4, r3
 8004406:	4623      	mov	r3, r4
 8004408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d014      	beq.n	800443a <USB_DeactivateEndpoint+0xca>
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	b29c      	uxth	r4, r3
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	441a      	add	r2, r3
 8004432:	4b52      	ldr	r3, [pc, #328]	; (800457c <USB_DeactivateEndpoint+0x20c>)
 8004434:	4323      	orrs	r3, r4
 8004436:	b29b      	uxth	r3, r3
 8004438:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b29b      	uxth	r3, r3
 8004448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800444c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004450:	b29c      	uxth	r4, r3
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	441a      	add	r2, r3
 800445c:	4b46      	ldr	r3, [pc, #280]	; (8004578 <USB_DeactivateEndpoint+0x208>)
 800445e:	4323      	orrs	r3, r4
 8004460:	b29b      	uxth	r3, r3
 8004462:	8013      	strh	r3, [r2, #0]
 8004464:	e10d      	b.n	8004682 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 8088 	bne.w	8004580 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29c      	uxth	r4, r3
 800447e:	4623      	mov	r3, r4
 8004480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d014      	beq.n	80044b2 <USB_DeactivateEndpoint+0x142>
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	b29c      	uxth	r4, r3
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	441a      	add	r2, r3
 80044aa:	4b34      	ldr	r3, [pc, #208]	; (800457c <USB_DeactivateEndpoint+0x20c>)
 80044ac:	4323      	orrs	r3, r4
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29c      	uxth	r4, r3
 80044c0:	4623      	mov	r3, r4
 80044c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d014      	beq.n	80044f4 <USB_DeactivateEndpoint+0x184>
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e0:	b29c      	uxth	r4, r3
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	441a      	add	r2, r3
 80044ec:	4b21      	ldr	r3, [pc, #132]	; (8004574 <USB_DeactivateEndpoint+0x204>)
 80044ee:	4323      	orrs	r3, r4
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	b29c      	uxth	r4, r3
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	441a      	add	r2, r3
 8004516:	4b17      	ldr	r3, [pc, #92]	; (8004574 <USB_DeactivateEndpoint+0x204>)
 8004518:	4323      	orrs	r3, r4
 800451a:	b29b      	uxth	r3, r3
 800451c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004534:	b29c      	uxth	r4, r3
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <USB_DeactivateEndpoint+0x208>)
 8004542:	4323      	orrs	r3, r4
 8004544:	b29b      	uxth	r3, r3
 8004546:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	b29b      	uxth	r3, r3
 8004556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455e:	b29c      	uxth	r4, r3
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	441a      	add	r2, r3
 800456a:	4b03      	ldr	r3, [pc, #12]	; (8004578 <USB_DeactivateEndpoint+0x208>)
 800456c:	4323      	orrs	r3, r4
 800456e:	b29b      	uxth	r3, r3
 8004570:	8013      	strh	r3, [r2, #0]
 8004572:	e086      	b.n	8004682 <USB_DeactivateEndpoint+0x312>
 8004574:	ffff80c0 	.word	0xffff80c0
 8004578:	ffff8080 	.word	0xffff8080
 800457c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29c      	uxth	r4, r3
 800458e:	4623      	mov	r3, r4
 8004590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d014      	beq.n	80045c2 <USB_DeactivateEndpoint+0x252>
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ae:	b29c      	uxth	r4, r3
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	441a      	add	r2, r3
 80045ba:	4b35      	ldr	r3, [pc, #212]	; (8004690 <USB_DeactivateEndpoint+0x320>)
 80045bc:	4323      	orrs	r3, r4
 80045be:	b29b      	uxth	r3, r3
 80045c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29c      	uxth	r4, r3
 80045d0:	4623      	mov	r3, r4
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d014      	beq.n	8004604 <USB_DeactivateEndpoint+0x294>
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f0:	b29c      	uxth	r4, r3
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	441a      	add	r2, r3
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <USB_DeactivateEndpoint+0x324>)
 80045fe:	4323      	orrs	r3, r4
 8004600:	b29b      	uxth	r3, r3
 8004602:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	b29c      	uxth	r4, r3
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	441a      	add	r2, r3
 8004626:	4b1a      	ldr	r3, [pc, #104]	; (8004690 <USB_DeactivateEndpoint+0x320>)
 8004628:	4323      	orrs	r3, r4
 800462a:	b29b      	uxth	r3, r3
 800462c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004644:	b29c      	uxth	r4, r3
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	441a      	add	r2, r3
 8004650:	4b11      	ldr	r3, [pc, #68]	; (8004698 <USB_DeactivateEndpoint+0x328>)
 8004652:	4323      	orrs	r3, r4
 8004654:	b29b      	uxth	r3, r3
 8004656:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	b29c      	uxth	r4, r3
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	4b07      	ldr	r3, [pc, #28]	; (8004698 <USB_DeactivateEndpoint+0x328>)
 800467c:	4323      	orrs	r3, r4
 800467e:	b29b      	uxth	r3, r3
 8004680:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bc90      	pop	{r4, r7}
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	ffffc080 	.word	0xffffc080
 8004694:	ffff80c0 	.word	0xffff80c0
 8004698:	ffff8080 	.word	0xffff8080

0800469c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800469c:	b590      	push	{r4, r7, lr}
 800469e:	b095      	sub	sp, #84	; 0x54
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	785b      	ldrb	r3, [r3, #1]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	f040 815d 	bne.w	800496a <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	699a      	ldr	r2, [r3, #24]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d909      	bls.n	80046d0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c8:	1ad2      	subs	r2, r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	619a      	str	r2, [r3, #24]
 80046ce:	e005      	b.n	80046dc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2200      	movs	r2, #0
 80046da:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	7b1b      	ldrb	r3, [r3, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d11a      	bne.n	800471a <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6959      	ldr	r1, [r3, #20]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	88da      	ldrh	r2, [r3, #6]
 80046ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fbb1 	bl	8004e58 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046f6:	687c      	ldr	r4, [r7, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fe:	b29b      	uxth	r3, r3
 8004700:	441c      	add	r4, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4423      	add	r3, r4
 800470a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	801a      	strh	r2, [r3, #0]
 8004718:	e10b      	b.n	8004932 <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d062      	beq.n	80047f6 <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004730:	687c      	ldr	r4, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	785b      	ldrb	r3, [r3, #1]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d144      	bne.n	80047c4 <USB_EPStartXfer+0x128>
 800473a:	687c      	ldr	r4, [r7, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004742:	b29b      	uxth	r3, r3
 8004744:	441c      	add	r4, r3
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4423      	add	r3, r4
 800474e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004756:	2b00      	cmp	r3, #0
 8004758:	d110      	bne.n	800477c <USB_EPStartXfer+0xe0>
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004762:	b29a      	uxth	r2, r3
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	801a      	strh	r2, [r3, #0]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004774:	b29a      	uxth	r2, r3
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	801a      	strh	r2, [r3, #0]
 800477a:	e037      	b.n	80047ec <USB_EPStartXfer+0x150>
 800477c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800477e:	2b3d      	cmp	r3, #61	; 0x3d
 8004780:	d811      	bhi.n	80047a6 <USB_EPStartXfer+0x10a>
 8004782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	647b      	str	r3, [r7, #68]	; 0x44
 8004788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <USB_EPStartXfer+0xfc>
 8004792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004794:	3301      	adds	r3, #1
 8004796:	647b      	str	r3, [r7, #68]	; 0x44
 8004798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800479a:	b29b      	uxth	r3, r3
 800479c:	029b      	lsls	r3, r3, #10
 800479e:	b29a      	uxth	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	801a      	strh	r2, [r3, #0]
 80047a4:	e022      	b.n	80047ec <USB_EPStartXfer+0x150>
 80047a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	647b      	str	r3, [r7, #68]	; 0x44
 80047ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	029b      	lsls	r3, r3, #10
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047bc:	b29a      	uxth	r2, r3
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	801a      	strh	r2, [r3, #0]
 80047c2:	e013      	b.n	80047ec <USB_EPStartXfer+0x150>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d10f      	bne.n	80047ec <USB_EPStartXfer+0x150>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	441c      	add	r4, r3
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	4423      	add	r3, r4
 80047de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	895b      	ldrh	r3, [r3, #10]
 80047f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80047f4:	e061      	b.n	80048ba <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	785b      	ldrb	r3, [r3, #1]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d144      	bne.n	8004888 <USB_EPStartXfer+0x1ec>
 80047fe:	687c      	ldr	r4, [r7, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004806:	b29b      	uxth	r3, r3
 8004808:	441c      	add	r4, r3
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4423      	add	r3, r4
 8004812:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481a:	2b00      	cmp	r3, #0
 800481c:	d110      	bne.n	8004840 <USB_EPStartXfer+0x1a4>
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004826:	b29a      	uxth	r2, r3
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004838:	b29a      	uxth	r2, r3
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	801a      	strh	r2, [r3, #0]
 800483e:	e038      	b.n	80048b2 <USB_EPStartXfer+0x216>
 8004840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004842:	2b3d      	cmp	r3, #61	; 0x3d
 8004844:	d811      	bhi.n	800486a <USB_EPStartXfer+0x1ce>
 8004846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	643b      	str	r3, [r7, #64]	; 0x40
 800484c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <USB_EPStartXfer+0x1c0>
 8004856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004858:	3301      	adds	r3, #1
 800485a:	643b      	str	r3, [r7, #64]	; 0x40
 800485c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800485e:	b29b      	uxth	r3, r3
 8004860:	029b      	lsls	r3, r3, #10
 8004862:	b29a      	uxth	r2, r3
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	801a      	strh	r2, [r3, #0]
 8004868:	e023      	b.n	80048b2 <USB_EPStartXfer+0x216>
 800486a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	643b      	str	r3, [r7, #64]	; 0x40
 8004870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004872:	b29b      	uxth	r3, r3
 8004874:	029b      	lsls	r3, r3, #10
 8004876:	b29b      	uxth	r3, r3
 8004878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800487c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004880:	b29a      	uxth	r2, r3
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	801a      	strh	r2, [r3, #0]
 8004886:	e014      	b.n	80048b2 <USB_EPStartXfer+0x216>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	785b      	ldrb	r3, [r3, #1]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d110      	bne.n	80048b2 <USB_EPStartXfer+0x216>
 8004890:	687c      	ldr	r4, [r7, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004898:	b29b      	uxth	r3, r3
 800489a:	441c      	add	r4, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4423      	add	r3, r4
 80048a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	891b      	ldrh	r3, [r3, #8]
 80048b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	6959      	ldr	r1, [r3, #20]
 80048be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fac6 	bl	8004e58 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	785b      	ldrb	r3, [r3, #1]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d115      	bne.n	8004900 <USB_EPStartXfer+0x264>
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ea:	b29c      	uxth	r4, r3
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	441a      	add	r2, r3
 80048f6:	4b99      	ldr	r3, [pc, #612]	; (8004b5c <USB_EPStartXfer+0x4c0>)
 80048f8:	4323      	orrs	r3, r4
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	8013      	strh	r3, [r2, #0]
 80048fe:	e018      	b.n	8004932 <USB_EPStartXfer+0x296>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	785b      	ldrb	r3, [r3, #1]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d114      	bne.n	8004932 <USB_EPStartXfer+0x296>
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	b29c      	uxth	r4, r3
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	441a      	add	r2, r3
 800492a:	4b8d      	ldr	r3, [pc, #564]	; (8004b60 <USB_EPStartXfer+0x4c4>)
 800492c:	4323      	orrs	r3, r4
 800492e:	b29b      	uxth	r3, r3
 8004930:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	b29b      	uxth	r3, r3
 8004940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004948:	b29c      	uxth	r4, r3
 800494a:	f084 0310 	eor.w	r3, r4, #16
 800494e:	b29c      	uxth	r4, r3
 8004950:	f084 0320 	eor.w	r3, r4, #32
 8004954:	b29c      	uxth	r4, r3
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	441a      	add	r2, r3
 8004960:	4b80      	ldr	r3, [pc, #512]	; (8004b64 <USB_EPStartXfer+0x4c8>)
 8004962:	4323      	orrs	r3, r4
 8004964:	b29b      	uxth	r3, r3
 8004966:	8013      	strh	r3, [r2, #0]
 8004968:	e13c      	b.n	8004be4 <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	429a      	cmp	r2, r3
 8004974:	d909      	bls.n	800498a <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	699a      	ldr	r2, [r3, #24]
 8004980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004982:	1ad2      	subs	r2, r2, r3
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	619a      	str	r2, [r3, #24]
 8004988:	e005      	b.n	8004996 <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2200      	movs	r2, #0
 8004994:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	7b1b      	ldrb	r3, [r3, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d144      	bne.n	8004a28 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800499e:	687c      	ldr	r4, [r7, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	441c      	add	r4, r3
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4423      	add	r3, r4
 80049b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d110      	bne.n	80049e0 <USB_EPStartXfer+0x344>
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d8:	b29a      	uxth	r2, r3
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	801a      	strh	r2, [r3, #0]
 80049de:	e0e6      	b.n	8004bae <USB_EPStartXfer+0x512>
 80049e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e2:	2b3d      	cmp	r3, #61	; 0x3d
 80049e4:	d811      	bhi.n	8004a0a <USB_EPStartXfer+0x36e>
 80049e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <USB_EPStartXfer+0x360>
 80049f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f8:	3301      	adds	r3, #1
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	029b      	lsls	r3, r3, #10
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	801a      	strh	r2, [r3, #0]
 8004a08:	e0d1      	b.n	8004bae <USB_EPStartXfer+0x512>
 8004a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	029b      	lsls	r3, r3, #10
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	e0c2      	b.n	8004bae <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d144      	bne.n	8004aba <USB_EPStartXfer+0x41e>
 8004a30:	687c      	ldr	r4, [r7, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	441c      	add	r4, r3
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4423      	add	r3, r4
 8004a44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d110      	bne.n	8004a72 <USB_EPStartXfer+0x3d6>
 8004a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	801a      	strh	r2, [r3, #0]
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	801a      	strh	r2, [r3, #0]
 8004a70:	e038      	b.n	8004ae4 <USB_EPStartXfer+0x448>
 8004a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a74:	2b3d      	cmp	r3, #61	; 0x3d
 8004a76:	d811      	bhi.n	8004a9c <USB_EPStartXfer+0x400>
 8004a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7a:	085b      	lsrs	r3, r3, #1
 8004a7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <USB_EPStartXfer+0x3f2>
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	029b      	lsls	r3, r3, #10
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a98:	801a      	strh	r2, [r3, #0]
 8004a9a:	e023      	b.n	8004ae4 <USB_EPStartXfer+0x448>
 8004a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	029b      	lsls	r3, r3, #10
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	801a      	strh	r2, [r3, #0]
 8004ab8:	e014      	b.n	8004ae4 <USB_EPStartXfer+0x448>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	785b      	ldrb	r3, [r3, #1]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d110      	bne.n	8004ae4 <USB_EPStartXfer+0x448>
 8004ac2:	687c      	ldr	r4, [r7, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	441c      	add	r4, r3
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4423      	add	r3, r4
 8004ad6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ada:	633b      	str	r3, [r7, #48]	; 0x30
 8004adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	687c      	ldr	r4, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d14b      	bne.n	8004b86 <USB_EPStartXfer+0x4ea>
 8004aee:	687c      	ldr	r4, [r7, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	441c      	add	r4, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4423      	add	r3, r4
 8004b02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
 8004b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d110      	bne.n	8004b30 <USB_EPStartXfer+0x494>
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	801a      	strh	r2, [r3, #0]
 8004b2e:	e03e      	b.n	8004bae <USB_EPStartXfer+0x512>
 8004b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b32:	2b3d      	cmp	r3, #61	; 0x3d
 8004b34:	d818      	bhi.n	8004b68 <USB_EPStartXfer+0x4cc>
 8004b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b38:	085b      	lsrs	r3, r3, #1
 8004b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <USB_EPStartXfer+0x4b0>
 8004b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b48:	3301      	adds	r3, #1
 8004b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	029b      	lsls	r3, r3, #10
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	801a      	strh	r2, [r3, #0]
 8004b58:	e029      	b.n	8004bae <USB_EPStartXfer+0x512>
 8004b5a:	bf00      	nop
 8004b5c:	ffff80c0 	.word	0xffff80c0
 8004b60:	ffffc080 	.word	0xffffc080
 8004b64:	ffff8080 	.word	0xffff8080
 8004b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	029b      	lsls	r3, r3, #10
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	e013      	b.n	8004bae <USB_EPStartXfer+0x512>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d10f      	bne.n	8004bae <USB_EPStartXfer+0x512>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	441c      	add	r4, r3
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4423      	add	r3, r4
 8004ba0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc4:	b29c      	uxth	r4, r3
 8004bc6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004bca:	b29c      	uxth	r4, r3
 8004bcc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004bd0:	b29c      	uxth	r4, r3
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	441a      	add	r2, r3
 8004bdc:	4b04      	ldr	r3, [pc, #16]	; (8004bf0 <USB_EPStartXfer+0x554>)
 8004bde:	4323      	orrs	r3, r4
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3754      	adds	r7, #84	; 0x54
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd90      	pop	{r4, r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	ffff8080 	.word	0xffff8080

08004bf4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bf4:	b490      	push	{r4, r7}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	785b      	ldrb	r3, [r3, #1]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d018      	beq.n	8004c38 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c1c:	b29c      	uxth	r4, r3
 8004c1e:	f084 0310 	eor.w	r3, r4, #16
 8004c22:	b29c      	uxth	r4, r3
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <USB_EPSetStall+0x80>)
 8004c30:	4323      	orrs	r3, r4
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	8013      	strh	r3, [r2, #0]
 8004c36:	e017      	b.n	8004c68 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4e:	b29c      	uxth	r4, r3
 8004c50:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004c54:	b29c      	uxth	r4, r3
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	441a      	add	r2, r3
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <USB_EPSetStall+0x80>)
 8004c62:	4323      	orrs	r3, r4
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc90      	pop	{r4, r7}
 8004c72:	4770      	bx	lr
 8004c74:	ffff8080 	.word	0xffff8080

08004c78 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c78:	b490      	push	{r4, r7}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	7b1b      	ldrb	r3, [r3, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d17d      	bne.n	8004d86 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d03d      	beq.n	8004d0e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29c      	uxth	r4, r3
 8004ca0:	4623      	mov	r3, r4
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d014      	beq.n	8004cd4 <USB_EPClearStall+0x5c>
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc0:	b29c      	uxth	r4, r3
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	441a      	add	r2, r3
 8004ccc:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <USB_EPClearStall+0x11c>)
 8004cce:	4323      	orrs	r3, r4
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	78db      	ldrb	r3, [r3, #3]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d054      	beq.n	8004d86 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf2:	b29c      	uxth	r4, r3
 8004cf4:	f084 0320 	eor.w	r3, r4, #32
 8004cf8:	b29c      	uxth	r4, r3
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	441a      	add	r2, r3
 8004d04:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <USB_EPClearStall+0x120>)
 8004d06:	4323      	orrs	r3, r4
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]
 8004d0c:	e03b      	b.n	8004d86 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29c      	uxth	r4, r3
 8004d1c:	4623      	mov	r3, r4
 8004d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d014      	beq.n	8004d50 <USB_EPClearStall+0xd8>
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3c:	b29c      	uxth	r4, r3
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	441a      	add	r2, r3
 8004d48:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <USB_EPClearStall+0x124>)
 8004d4a:	4323      	orrs	r3, r4
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d66:	b29c      	uxth	r4, r3
 8004d68:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004d6c:	b29c      	uxth	r4, r3
 8004d6e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004d72:	b29c      	uxth	r4, r3
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	441a      	add	r2, r3
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <USB_EPClearStall+0x120>)
 8004d80:	4323      	orrs	r3, r4
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc90      	pop	{r4, r7}
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	ffff80c0 	.word	0xffff80c0
 8004d98:	ffff8080 	.word	0xffff8080
 8004d9c:	ffffc080 	.word	0xffffc080

08004da0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2280      	movs	r2, #128	; 0x80
 8004db6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004e32:	68fb      	ldr	r3, [r7, #12]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b08d      	sub	sp, #52	; 0x34
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	4611      	mov	r1, r2
 8004e64:	461a      	mov	r2, r3
 8004e66:	460b      	mov	r3, r1
 8004e68:	80fb      	strh	r3, [r7, #6]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004e6e:	88bb      	ldrh	r3, [r7, #4]
 8004e70:	3301      	adds	r3, #1
 8004e72:	085b      	lsrs	r3, r3, #1
 8004e74:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e8e:	e01b      	b.n	8004ec8 <USB_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pBuf;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	3301      	adds	r3, #1
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	3302      	adds	r3, #2
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e0      	bne.n	8004e90 <USB_WritePMA+0x38>
  }
}
 8004ece:	bf00      	nop
 8004ed0:	3734      	adds	r7, #52	; 0x34
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b08b      	sub	sp, #44	; 0x2c
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	460b      	mov	r3, r1
 8004eea:	80fb      	strh	r3, [r7, #6]
 8004eec:	4613      	mov	r3, r2
 8004eee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004ef0:	88bb      	ldrh	r3, [r7, #4]
 8004ef2:	085b      	lsrs	r3, r3, #1
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f00:	88fa      	ldrh	r2, [r7, #6]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f0a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f10:	e017      	b.n	8004f42 <USB_ReadPMA+0x68>
  {
    temp = *pdwVal;
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e4      	bne.n	8004f12 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004f48:	88bb      	ldrh	r3, [r7, #4]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d006      	beq.n	8004f62 <USB_ReadPMA+0x88>
  {
    temp = *pdwVal;
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	701a      	strb	r2, [r3, #0]
  }
}
 8004f62:	bf00      	nop
 8004f64:	372c      	adds	r7, #44	; 0x2c
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	7c1b      	ldrb	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d115      	bne.n	8004fb2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	2181      	movs	r1, #129	; 0x81
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f001 fe5c 	bl	8006c4c <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f001 fe52 	bl	8006c4c <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8004fb0:	e012      	b.n	8004fd8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004fb2:	2340      	movs	r3, #64	; 0x40
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	2181      	movs	r1, #129	; 0x81
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f001 fe47 	bl	8006c4c <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004fc4:	2340      	movs	r3, #64	; 0x40
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	2101      	movs	r1, #1
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f001 fe3e 	bl	8006c4c <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004fd8:	2308      	movs	r3, #8
 8004fda:	2203      	movs	r2, #3
 8004fdc:	2182      	movs	r1, #130	; 0x82
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 fe34 	bl	8006c4c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004fea:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004fee:	f002 f827 	bl	8007040 <USBD_static_malloc>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
 8005008:	e026      	b.n	8005058 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005010:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	7c1b      	ldrb	r3, [r3, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d109      	bne.n	8005048 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800503a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800503e:	2101      	movs	r1, #1
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f001 ff79 	bl	8006f38 <USBD_LL_PrepareReceive>
 8005046:	e007      	b.n	8005058 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800504e:	2340      	movs	r3, #64	; 0x40
 8005050:	2101      	movs	r1, #1
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f001 ff70 	bl	8006f38 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	460b      	mov	r3, r1
 800506c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005072:	2181      	movs	r1, #129	; 0x81
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f001 fe27 	bl	8006cc8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005080:	2101      	movs	r1, #1
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f001 fe20 	bl	8006cc8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005090:	2182      	movs	r1, #130	; 0x82
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 fe18 	bl	8006cc8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00e      	beq.n	80050c6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80050b8:	4618      	mov	r0, r3
 80050ba:	f001 ffcf 	bl	800705c <USBD_static_free>
    pdev->pClassData = NULL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80050e0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d039      	beq.n	800516e <USBD_CDC_Setup+0x9e>
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	d17c      	bne.n	80051f8 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	88db      	ldrh	r3, [r3, #6]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d029      	beq.n	800515a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	b25b      	sxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	da11      	bge.n	8005134 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800511c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	88d2      	ldrh	r2, [r2, #6]
 8005122:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005124:	6939      	ldr	r1, [r7, #16]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	88db      	ldrh	r3, [r3, #6]
 800512a:	461a      	mov	r2, r3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f001 f9a7 	bl	8006480 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8005132:	e068      	b.n	8005206 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	785a      	ldrb	r2, [r3, #1]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	88db      	ldrh	r3, [r3, #6]
 8005142:	b2da      	uxtb	r2, r3
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800514a:	6939      	ldr	r1, [r7, #16]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	88db      	ldrh	r3, [r3, #6]
 8005150:	461a      	mov	r2, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 f9c2 	bl	80064dc <USBD_CtlPrepareRx>
    break;
 8005158:	e055      	b.n	8005206 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	7850      	ldrb	r0, [r2, #1]
 8005166:	2200      	movs	r2, #0
 8005168:	6839      	ldr	r1, [r7, #0]
 800516a:	4798      	blx	r3
    break;
 800516c:	e04b      	b.n	8005206 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	2b0a      	cmp	r3, #10
 8005174:	d017      	beq.n	80051a6 <USBD_CDC_Setup+0xd6>
 8005176:	2b0b      	cmp	r3, #11
 8005178:	d029      	beq.n	80051ce <USBD_CDC_Setup+0xfe>
 800517a:	2b00      	cmp	r3, #0
 800517c:	d133      	bne.n	80051e6 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005184:	2b03      	cmp	r3, #3
 8005186:	d107      	bne.n	8005198 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005188:	f107 030c 	add.w	r3, r7, #12
 800518c:	2202      	movs	r2, #2
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f001 f975 	bl	8006480 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005196:	e02e      	b.n	80051f6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005198:	6839      	ldr	r1, [r7, #0]
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f001 f905 	bl	80063aa <USBD_CtlError>
			  ret = USBD_FAIL;
 80051a0:	2302      	movs	r3, #2
 80051a2:	75fb      	strb	r3, [r7, #23]
      break;
 80051a4:	e027      	b.n	80051f6 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d107      	bne.n	80051c0 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80051b0:	f107 030f 	add.w	r3, r7, #15
 80051b4:	2201      	movs	r2, #1
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f001 f961 	bl	8006480 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80051be:	e01a      	b.n	80051f6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f001 f8f1 	bl	80063aa <USBD_CtlError>
			  ret = USBD_FAIL;
 80051c8:	2302      	movs	r3, #2
 80051ca:	75fb      	strb	r3, [r7, #23]
      break;
 80051cc:	e013      	b.n	80051f6 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d00d      	beq.n	80051f4 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f001 f8e5 	bl	80063aa <USBD_CtlError>
			  ret = USBD_FAIL;
 80051e0:	2302      	movs	r3, #2
 80051e2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80051e4:	e006      	b.n	80051f4 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f001 f8de 	bl	80063aa <USBD_CtlError>
      ret = USBD_FAIL;
 80051ee:	2302      	movs	r3, #2
 80051f0:	75fb      	strb	r3, [r7, #23]
      break;
 80051f2:	e000      	b.n	80051f6 <USBD_CDC_Setup+0x126>
      break;
 80051f4:	bf00      	nop
    }
    break;
 80051f6:	e006      	b.n	8005206 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f001 f8d5 	bl	80063aa <USBD_CtlError>
    ret = USBD_FAIL;
 8005200:	2302      	movs	r3, #2
 8005202:	75fb      	strb	r3, [r7, #23]
    break;
 8005204:	bf00      	nop
  }

  return ret;
 8005206:	7dfb      	ldrb	r3, [r7, #23]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005222:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800522a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005232:	2b00      	cmp	r3, #0
 8005234:	d037      	beq.n	80052a6 <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	331c      	adds	r3, #28
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d026      	beq.n	800529a <USBD_CDC_DataIn+0x8a>
 800524c:	78fa      	ldrb	r2, [r7, #3]
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	331c      	adds	r3, #28
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	78fa      	ldrb	r2, [r7, #3]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	0152      	lsls	r2, r2, #5
 8005264:	440a      	add	r2, r1
 8005266:	3238      	adds	r2, #56	; 0x38
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	fbb3 f1f2 	udiv	r1, r3, r2
 800526e:	fb02 f201 	mul.w	r2, r2, r1
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d110      	bne.n	800529a <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005278:	78fa      	ldrb	r2, [r7, #3]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	331c      	adds	r3, #28
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800528c:	78f9      	ldrb	r1, [r7, #3]
 800528e:	2300      	movs	r3, #0
 8005290:	2200      	movs	r2, #0
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f001 fe16 	bl	8006ec4 <USBD_LL_Transmit>
 8005298:	e003      	b.n	80052a2 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	e000      	b.n	80052a8 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80052a6:	2302      	movs	r3, #2
  }
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f001 fe6f 	bl	8006fac <USBD_LL_GetRxDataSize>
 80052ce:	4602      	mov	r2, r0
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00d      	beq.n	80052fc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80052f4:	4611      	mov	r1, r2
 80052f6:	4798      	blx	r3

    return USBD_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	e000      	b.n	80052fe <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80052fc:	2302      	movs	r3, #2
  }
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005314:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800531c:	2b00      	cmp	r3, #0
 800531e:	d015      	beq.n	800534c <USBD_CDC_EP0_RxReady+0x46>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005326:	2bff      	cmp	r3, #255	; 0xff
 8005328:	d010      	beq.n	800534c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005338:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005340:	b292      	uxth	r2, r2
 8005342:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	22ff      	movs	r2, #255	; 0xff
 8005348:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2243      	movs	r2, #67	; 0x43
 8005364:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005366:	4b03      	ldr	r3, [pc, #12]	; (8005374 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	20000094 	.word	0x20000094

08005378 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2243      	movs	r2, #67	; 0x43
 8005384:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005386:	4b03      	ldr	r3, [pc, #12]	; (8005394 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	20000050 	.word	0x20000050

08005398 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2243      	movs	r2, #67	; 0x43
 80053a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80053a6:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	200000d8 	.word	0x200000d8

080053b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	220a      	movs	r2, #10
 80053c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80053c6:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	2000000c 	.word	0x2000000c

080053d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80053e2:	2302      	movs	r3, #2
 80053e4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005406:	b480      	push	{r7}
 8005408:	b087      	sub	sp, #28
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	4613      	mov	r3, r2
 8005412:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800541a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005424:	88fa      	ldrh	r2, [r7, #6]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800544a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005470:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01c      	beq.n	80054b6 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005482:	2b00      	cmp	r3, #0
 8005484:	d115      	bne.n	80054b2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2181      	movs	r1, #129	; 0x81
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f001 fd0b 	bl	8006ec4 <USBD_LL_Transmit>

      return USBD_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	e002      	b.n	80054b8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80054b6:	2302      	movs	r3, #2
  }
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d017      	beq.n	800550a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	7c1b      	ldrb	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054ec:	2101      	movs	r1, #1
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f001 fd22 	bl	8006f38 <USBD_LL_PrepareReceive>
 80054f4:	e007      	b.n	8005506 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054fc:	2340      	movs	r3, #64	; 0x40
 80054fe:	2101      	movs	r1, #1
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 fd19 	bl	8006f38 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	e000      	b.n	800550c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800550a:	2302      	movs	r3, #2
  }
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	4613      	mov	r3, r2
 8005520:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005528:	2302      	movs	r3, #2
 800552a:	e01a      	b.n	8005562 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	79fa      	ldrb	r2, [r7, #7]
 8005558:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f001 fae2 	bl	8006b24 <USBD_LL_Init>

  return USBD_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d006      	beq.n	800558c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	73fb      	strb	r3, [r7, #15]
 800558a:	e001      	b.n	8005590 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800558c:	2302      	movs	r3, #2
 800558e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005590:	7bfb      	ldrb	r3, [r7, #15]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 fb1e 	bl	8006be8 <USBD_LL_Start>

  return USBD_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80055d8:	2302      	movs	r3, #2
 80055da:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00c      	beq.n	8005600 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	78fa      	ldrb	r2, [r7, #3]
 80055f0:	4611      	mov	r1, r2
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	460b      	mov	r3, r1
 8005614:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	4611      	mov	r1, r2
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4798      	blx	r3
  return USBD_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005640:	6839      	ldr	r1, [r7, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fe74 	bl	8006330 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8005656:	461a      	mov	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	2b01      	cmp	r3, #1
 800566a:	d00c      	beq.n	8005686 <USBD_LL_SetupStage+0x56>
 800566c:	2b01      	cmp	r3, #1
 800566e:	d302      	bcc.n	8005676 <USBD_LL_SetupStage+0x46>
 8005670:	2b02      	cmp	r3, #2
 8005672:	d010      	beq.n	8005696 <USBD_LL_SetupStage+0x66>
 8005674:	e017      	b.n	80056a6 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800567c:	4619      	mov	r1, r3
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f9c8 	bl	8005a14 <USBD_StdDevReq>
    break;
 8005684:	e01a      	b.n	80056bc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fa2a 	bl	8005ae8 <USBD_StdItfReq>
    break;
 8005694:	e012      	b.n	80056bc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800569c:	4619      	mov	r1, r3
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fa68 	bl	8005b74 <USBD_StdEPReq>
    break;
 80056a4:	e00a      	b.n	80056bc <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80056ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f001 fb3d 	bl	8006d34 <USBD_LL_StallEP>
    break;
 80056ba:	bf00      	nop
  }

  return USBD_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b086      	sub	sp, #24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	460b      	mov	r3, r1
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80056d4:	7afb      	ldrb	r3, [r7, #11]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d14b      	bne.n	8005772 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80056e0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d134      	bne.n	8005756 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d919      	bls.n	800572c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	1ad2      	subs	r2, r2, r3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800570e:	429a      	cmp	r2, r3
 8005710:	d203      	bcs.n	800571a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8005716:	b29b      	uxth	r3, r3
 8005718:	e002      	b.n	8005720 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800571e:	b29b      	uxth	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fef7 	bl	8006518 <USBD_CtlContinueRx>
 800572a:	e038      	b.n	800579e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800573e:	2b03      	cmp	r3, #3
 8005740:	d105      	bne.n	800574e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fef4 	bl	800653c <USBD_CtlSendStatus>
 8005754:	e023      	b.n	800579e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800575c:	2b05      	cmp	r3, #5
 800575e:	d11e      	bne.n	800579e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8005768:	2100      	movs	r1, #0
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f001 fae2 	bl	8006d34 <USBD_LL_StallEP>
 8005770:	e015      	b.n	800579e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00d      	beq.n	800579a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8005784:	2b03      	cmp	r3, #3
 8005786:	d108      	bne.n	800579a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	7afa      	ldrb	r2, [r7, #11]
 8005792:	4611      	mov	r1, r2
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	4798      	blx	r3
 8005798:	e001      	b.n	800579e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800579a:	2302      	movs	r3, #2
 800579c:	e000      	b.n	80057a0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	460b      	mov	r3, r1
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80057b6:	7afb      	ldrb	r3, [r7, #11]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d17f      	bne.n	80058bc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3314      	adds	r3, #20
 80057c0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d15c      	bne.n	8005886 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d915      	bls.n	8005804 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	1ad2      	subs	r2, r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fe61 	bl	80064b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80057f6:	2300      	movs	r3, #0
 80057f8:	2200      	movs	r2, #0
 80057fa:	2100      	movs	r1, #0
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f001 fb9b 	bl	8006f38 <USBD_LL_PrepareReceive>
 8005802:	e04e      	b.n	80058a2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	6912      	ldr	r2, [r2, #16]
 800580c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005810:	fb02 f201 	mul.w	r2, r2, r1
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d11c      	bne.n	8005854 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005822:	429a      	cmp	r2, r3
 8005824:	d316      	bcc.n	8005854 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8005830:	429a      	cmp	r2, r3
 8005832:	d20f      	bcs.n	8005854 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005834:	2200      	movs	r2, #0
 8005836:	2100      	movs	r1, #0
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 fe3d 	bl	80064b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005846:	2300      	movs	r3, #0
 8005848:	2200      	movs	r2, #0
 800584a:	2100      	movs	r1, #0
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f001 fb73 	bl	8006f38 <USBD_LL_PrepareReceive>
 8005852:	e026      	b.n	80058a2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005866:	2b03      	cmp	r3, #3
 8005868:	d105      	bne.n	8005876 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005876:	2180      	movs	r1, #128	; 0x80
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f001 fa5b 	bl	8006d34 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 fe6f 	bl	8006562 <USBD_CtlReceiveStatus>
 8005884:	e00d      	b.n	80058a2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800588c:	2b04      	cmp	r3, #4
 800588e:	d004      	beq.n	800589a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005896:	2b00      	cmp	r3, #0
 8005898:	d103      	bne.n	80058a2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800589a:	2180      	movs	r1, #128	; 0x80
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f001 fa49 	bl	8006d34 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d11d      	bne.n	80058e8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7ff fe82 	bl	80055b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80058ba:	e015      	b.n	80058e8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00d      	beq.n	80058e4 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d108      	bne.n	80058e4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	7afa      	ldrb	r2, [r7, #11]
 80058dc:	4611      	mov	r1, r2
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	4798      	blx	r3
 80058e2:	e001      	b.n	80058e8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80058e4:	2302      	movs	r3, #2
 80058e6:	e000      	b.n	80058ea <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058fa:	2340      	movs	r3, #64	; 0x40
 80058fc:	2200      	movs	r2, #0
 80058fe:	2100      	movs	r1, #0
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 f9a3 	bl	8006c4c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2240      	movs	r2, #64	; 0x40
 8005912:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005916:	2340      	movs	r3, #64	; 0x40
 8005918:	2200      	movs	r2, #0
 800591a:	2180      	movs	r1, #128	; 0x80
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f001 f995 	bl	8006c4c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2240      	movs	r2, #64	; 0x40
 800592c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6852      	ldr	r2, [r2, #4]
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	4611      	mov	r1, r2
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
  }

  return USBD_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	78fa      	ldrb	r2, [r7, #3]
 8005984:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2204      	movs	r2, #4
 80059ac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d10b      	bne.n	8005a0a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d004      	beq.n	8005a38 <USBD_StdDevReq+0x24>
 8005a2e:	2b40      	cmp	r3, #64	; 0x40
 8005a30:	d002      	beq.n	8005a38 <USBD_StdDevReq+0x24>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d008      	beq.n	8005a48 <USBD_StdDevReq+0x34>
 8005a36:	e04c      	b.n	8005ad2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	4798      	blx	r3
    break;
 8005a46:	e049      	b.n	8005adc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	2b09      	cmp	r3, #9
 8005a4e:	d83a      	bhi.n	8005ac6 <USBD_StdDevReq+0xb2>
 8005a50:	a201      	add	r2, pc, #4	; (adr r2, 8005a58 <USBD_StdDevReq+0x44>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005aa9 	.word	0x08005aa9
 8005a5c:	08005abd 	.word	0x08005abd
 8005a60:	08005ac7 	.word	0x08005ac7
 8005a64:	08005ab3 	.word	0x08005ab3
 8005a68:	08005ac7 	.word	0x08005ac7
 8005a6c:	08005a8b 	.word	0x08005a8b
 8005a70:	08005a81 	.word	0x08005a81
 8005a74:	08005ac7 	.word	0x08005ac7
 8005a78:	08005a9f 	.word	0x08005a9f
 8005a7c:	08005a95 	.word	0x08005a95
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f9d2 	bl	8005e2c <USBD_GetDescriptor>
      break;
 8005a88:	e022      	b.n	8005ad0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fae3 	bl	8006058 <USBD_SetAddress>
      break;
 8005a92:	e01d      	b.n	8005ad0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fb20 	bl	80060dc <USBD_SetConfig>
      break;
 8005a9c:	e018      	b.n	8005ad0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8005a9e:	6839      	ldr	r1, [r7, #0]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fba9 	bl	80061f8 <USBD_GetConfig>
      break;
 8005aa6:	e013      	b.n	8005ad0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fbd8 	bl	8006260 <USBD_GetStatus>
      break;
 8005ab0:	e00e      	b.n	8005ad0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8005ab2:	6839      	ldr	r1, [r7, #0]
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fc06 	bl	80062c6 <USBD_SetFeature>
      break;
 8005aba:	e009      	b.n	8005ad0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fc15 	bl	80062ee <USBD_ClrFeature>
      break;
 8005ac4:	e004      	b.n	8005ad0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fc6e 	bl	80063aa <USBD_CtlError>
      break;
 8005ace:	bf00      	nop
    }
    break;
 8005ad0:	e004      	b.n	8005adc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fc68 	bl	80063aa <USBD_CtlError>
    break;
 8005ada:	bf00      	nop
  }

  return ret;
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop

08005ae8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d003      	beq.n	8005b0a <USBD_StdItfReq+0x22>
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d001      	beq.n	8005b0a <USBD_StdItfReq+0x22>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d12a      	bne.n	8005b60 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005b10:	3b01      	subs	r3, #1
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d81d      	bhi.n	8005b52 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	889b      	ldrh	r3, [r3, #4]
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d813      	bhi.n	8005b48 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	4798      	blx	r3
 8005b2e:	4603      	mov	r3, r0
 8005b30:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	88db      	ldrh	r3, [r3, #6]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d110      	bne.n	8005b5c <USBD_StdItfReq+0x74>
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10d      	bne.n	8005b5c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fcfb 	bl	800653c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005b46:	e009      	b.n	8005b5c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fc2d 	bl	80063aa <USBD_CtlError>
      break;
 8005b50:	e004      	b.n	8005b5c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fc28 	bl	80063aa <USBD_CtlError>
      break;
 8005b5a:	e000      	b.n	8005b5e <USBD_StdItfReq+0x76>
      break;
 8005b5c:	bf00      	nop
    }
    break;
 8005b5e:	e004      	b.n	8005b6a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005b60:	6839      	ldr	r1, [r7, #0]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fc21 	bl	80063aa <USBD_CtlError>
    break;
 8005b68:	bf00      	nop
  }

  return USBD_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	889b      	ldrh	r3, [r3, #4]
 8005b86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d004      	beq.n	8005b9e <USBD_StdEPReq+0x2a>
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	d002      	beq.n	8005b9e <USBD_StdEPReq+0x2a>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <USBD_StdEPReq+0x3a>
 8005b9c:	e13b      	b.n	8005e16 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	4798      	blx	r3
    break;
 8005bac:	e138      	b.n	8005e20 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d10a      	bne.n	8005bd0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	4798      	blx	r3
 8005bc8:	4603      	mov	r3, r0
 8005bca:	73fb      	strb	r3, [r7, #15]

      return ret;
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	e128      	b.n	8005e22 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d03e      	beq.n	8005c56 <USBD_StdEPReq+0xe2>
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d002      	beq.n	8005be2 <USBD_StdEPReq+0x6e>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d070      	beq.n	8005cc2 <USBD_StdEPReq+0x14e>
 8005be0:	e113      	b.n	8005e0a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d002      	beq.n	8005bf2 <USBD_StdEPReq+0x7e>
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d015      	beq.n	8005c1c <USBD_StdEPReq+0xa8>
 8005bf0:	e02b      	b.n	8005c4a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00c      	beq.n	8005c12 <USBD_StdEPReq+0x9e>
 8005bf8:	7bbb      	ldrb	r3, [r7, #14]
 8005bfa:	2b80      	cmp	r3, #128	; 0x80
 8005bfc:	d009      	beq.n	8005c12 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005bfe:	7bbb      	ldrb	r3, [r7, #14]
 8005c00:	4619      	mov	r1, r3
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f001 f896 	bl	8006d34 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005c08:	2180      	movs	r1, #128	; 0x80
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 f892 	bl	8006d34 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005c10:	e020      	b.n	8005c54 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fbc8 	bl	80063aa <USBD_CtlError>
        break;
 8005c1a:	e01b      	b.n	8005c54 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	885b      	ldrh	r3, [r3, #2]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10e      	bne.n	8005c42 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c24:	7bbb      	ldrb	r3, [r7, #14]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00b      	beq.n	8005c42 <USBD_StdEPReq+0xce>
 8005c2a:	7bbb      	ldrb	r3, [r7, #14]
 8005c2c:	2b80      	cmp	r3, #128	; 0x80
 8005c2e:	d008      	beq.n	8005c42 <USBD_StdEPReq+0xce>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	88db      	ldrh	r3, [r3, #6]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8005c38:	7bbb      	ldrb	r3, [r7, #14]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 f879 	bl	8006d34 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fc7a 	bl	800653c <USBD_CtlSendStatus>

        break;
 8005c48:	e004      	b.n	8005c54 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fbac 	bl	80063aa <USBD_CtlError>
        break;
 8005c52:	bf00      	nop
      }
      break;
 8005c54:	e0de      	b.n	8005e14 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d002      	beq.n	8005c66 <USBD_StdEPReq+0xf2>
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d015      	beq.n	8005c90 <USBD_StdEPReq+0x11c>
 8005c64:	e026      	b.n	8005cb4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c66:	7bbb      	ldrb	r3, [r7, #14]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00c      	beq.n	8005c86 <USBD_StdEPReq+0x112>
 8005c6c:	7bbb      	ldrb	r3, [r7, #14]
 8005c6e:	2b80      	cmp	r3, #128	; 0x80
 8005c70:	d009      	beq.n	8005c86 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005c72:	7bbb      	ldrb	r3, [r7, #14]
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f001 f85c 	bl	8006d34 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005c7c:	2180      	movs	r1, #128	; 0x80
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 f858 	bl	8006d34 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005c84:	e01c      	b.n	8005cc0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8005c86:	6839      	ldr	r1, [r7, #0]
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fb8e 	bl	80063aa <USBD_CtlError>
        break;
 8005c8e:	e017      	b.n	8005cc0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	885b      	ldrh	r3, [r3, #2]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d112      	bne.n	8005cbe <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
 8005c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d004      	beq.n	8005cac <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ca2:	7bbb      	ldrb	r3, [r7, #14]
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f001 f87a 	bl	8006da0 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fc45 	bl	800653c <USBD_CtlSendStatus>
        }
        break;
 8005cb2:	e004      	b.n	8005cbe <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fb77 	bl	80063aa <USBD_CtlError>
        break;
 8005cbc:	e000      	b.n	8005cc0 <USBD_StdEPReq+0x14c>
        break;
 8005cbe:	bf00      	nop
      }
      break;
 8005cc0:	e0a8      	b.n	8005e14 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d002      	beq.n	8005cd2 <USBD_StdEPReq+0x15e>
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d031      	beq.n	8005d34 <USBD_StdEPReq+0x1c0>
 8005cd0:	e095      	b.n	8005dfe <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cd2:	7bbb      	ldrb	r3, [r7, #14]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d007      	beq.n	8005ce8 <USBD_StdEPReq+0x174>
 8005cd8:	7bbb      	ldrb	r3, [r7, #14]
 8005cda:	2b80      	cmp	r3, #128	; 0x80
 8005cdc:	d004      	beq.n	8005ce8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8005cde:	6839      	ldr	r1, [r7, #0]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fb62 	bl	80063aa <USBD_CtlError>
          break;
 8005ce6:	e08f      	b.n	8005e08 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	da0b      	bge.n	8005d08 <USBD_StdEPReq+0x194>
 8005cf0:	7bbb      	ldrb	r3, [r7, #14]
 8005cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	3310      	adds	r3, #16
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	4413      	add	r3, r2
 8005d04:	3304      	adds	r3, #4
 8005d06:	e00a      	b.n	8005d1e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fba7 	bl	8006480 <USBD_CtlSendData>
          break;
 8005d32:	e069      	b.n	8005e08 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005d34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	da11      	bge.n	8005d60 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d3c:	7bbb      	ldrb	r3, [r7, #14]
 8005d3e:	f003 020f 	and.w	r2, r3, #15
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	3318      	adds	r3, #24
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d117      	bne.n	8005d86 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fb26 	bl	80063aa <USBD_CtlError>
            break;
 8005d5e:	e053      	b.n	8005e08 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d60:	7bbb      	ldrb	r3, [r7, #14]
 8005d62:	f003 020f 	and.w	r2, r3, #15
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fb13 	bl	80063aa <USBD_CtlError>
            break;
 8005d84:	e040      	b.n	8005e08 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005d86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	da0b      	bge.n	8005da6 <USBD_StdEPReq+0x232>
 8005d8e:	7bbb      	ldrb	r3, [r7, #14]
 8005d90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	3310      	adds	r3, #16
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4413      	add	r3, r2
 8005da2:	3304      	adds	r3, #4
 8005da4:	e00a      	b.n	8005dbc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	4413      	add	r3, r2
 8005dbc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005dbe:	7bbb      	ldrb	r3, [r7, #14]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <USBD_StdEPReq+0x256>
 8005dc4:	7bbb      	ldrb	r3, [r7, #14]
 8005dc6:	2b80      	cmp	r3, #128	; 0x80
 8005dc8:	d103      	bne.n	8005dd2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e00e      	b.n	8005df0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f001 f818 	bl	8006e0c <USBD_LL_IsStallEP>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2201      	movs	r2, #1
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	e002      	b.n	8005df0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2202      	movs	r2, #2
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fb42 	bl	8006480 <USBD_CtlSendData>
          break;
 8005dfc:	e004      	b.n	8005e08 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fad2 	bl	80063aa <USBD_CtlError>
        break;
 8005e06:	bf00      	nop
      }
      break;
 8005e08:	e004      	b.n	8005e14 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 facc 	bl	80063aa <USBD_CtlError>
      break;
 8005e12:	bf00      	nop
    }
    break;
 8005e14:	e004      	b.n	8005e20 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fac6 	bl	80063aa <USBD_CtlError>
    break;
 8005e1e:	bf00      	nop
  }

  return ret;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	885b      	ldrh	r3, [r3, #2]
 8005e3a:	0a1b      	lsrs	r3, r3, #8
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	2b0e      	cmp	r3, #14
 8005e42:	f200 80e5 	bhi.w	8006010 <USBD_GetDescriptor+0x1e4>
 8005e46:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <USBD_GetDescriptor+0x20>)
 8005e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4c:	08005ea1 	.word	0x08005ea1
 8005e50:	08005eb9 	.word	0x08005eb9
 8005e54:	08005ef9 	.word	0x08005ef9
 8005e58:	08006011 	.word	0x08006011
 8005e5c:	08006011 	.word	0x08006011
 8005e60:	08005fbd 	.word	0x08005fbd
 8005e64:	08005fe3 	.word	0x08005fe3
 8005e68:	08006011 	.word	0x08006011
 8005e6c:	08006011 	.word	0x08006011
 8005e70:	08006011 	.word	0x08006011
 8005e74:	08006011 	.word	0x08006011
 8005e78:	08006011 	.word	0x08006011
 8005e7c:	08006011 	.word	0x08006011
 8005e80:	08006011 	.word	0x08006011
 8005e84:	08005e89 	.word	0x08005e89
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	7c12      	ldrb	r2, [r2, #16]
 8005e94:	f107 010a 	add.w	r1, r7, #10
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4798      	blx	r3
 8005e9c:	60f8      	str	r0, [r7, #12]
    break;
 8005e9e:	e0bc      	b.n	800601a <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	7c12      	ldrb	r2, [r2, #16]
 8005eac:	f107 010a 	add.w	r1, r7, #10
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	4798      	blx	r3
 8005eb4:	60f8      	str	r0, [r7, #12]
    break;
 8005eb6:	e0b0      	b.n	800601a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	7c1b      	ldrb	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10d      	bne.n	8005edc <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	f107 020a 	add.w	r2, r7, #10
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4798      	blx	r3
 8005ed0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005eda:	e09e      	b.n	800601a <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	f107 020a 	add.w	r2, r7, #10
 8005ee8:	4610      	mov	r0, r2
 8005eea:	4798      	blx	r3
 8005eec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	701a      	strb	r2, [r3, #0]
    break;
 8005ef6:	e090      	b.n	800601a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	885b      	ldrh	r3, [r3, #2]
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d856      	bhi.n	8005fb0 <USBD_GetDescriptor+0x184>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <USBD_GetDescriptor+0xdc>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f21 	.word	0x08005f21
 8005f0c:	08005f39 	.word	0x08005f39
 8005f10:	08005f51 	.word	0x08005f51
 8005f14:	08005f69 	.word	0x08005f69
 8005f18:	08005f81 	.word	0x08005f81
 8005f1c:	08005f99 	.word	0x08005f99
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	7c12      	ldrb	r2, [r2, #16]
 8005f2c:	f107 010a 	add.w	r1, r7, #10
 8005f30:	4610      	mov	r0, r2
 8005f32:	4798      	blx	r3
 8005f34:	60f8      	str	r0, [r7, #12]
      break;
 8005f36:	e040      	b.n	8005fba <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	7c12      	ldrb	r2, [r2, #16]
 8005f44:	f107 010a 	add.w	r1, r7, #10
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4798      	blx	r3
 8005f4c:	60f8      	str	r0, [r7, #12]
      break;
 8005f4e:	e034      	b.n	8005fba <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	7c12      	ldrb	r2, [r2, #16]
 8005f5c:	f107 010a 	add.w	r1, r7, #10
 8005f60:	4610      	mov	r0, r2
 8005f62:	4798      	blx	r3
 8005f64:	60f8      	str	r0, [r7, #12]
      break;
 8005f66:	e028      	b.n	8005fba <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	7c12      	ldrb	r2, [r2, #16]
 8005f74:	f107 010a 	add.w	r1, r7, #10
 8005f78:	4610      	mov	r0, r2
 8005f7a:	4798      	blx	r3
 8005f7c:	60f8      	str	r0, [r7, #12]
      break;
 8005f7e:	e01c      	b.n	8005fba <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	7c12      	ldrb	r2, [r2, #16]
 8005f8c:	f107 010a 	add.w	r1, r7, #10
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
 8005f94:	60f8      	str	r0, [r7, #12]
      break;
 8005f96:	e010      	b.n	8005fba <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	7c12      	ldrb	r2, [r2, #16]
 8005fa4:	f107 010a 	add.w	r1, r7, #10
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4798      	blx	r3
 8005fac:	60f8      	str	r0, [r7, #12]
      break;
 8005fae:	e004      	b.n	8005fba <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f9f9 	bl	80063aa <USBD_CtlError>
      return;
 8005fb8:	e04b      	b.n	8006052 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 8005fba:	e02e      	b.n	800601a <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	7c1b      	ldrb	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d109      	bne.n	8005fd8 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fcc:	f107 020a 	add.w	r2, r7, #10
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4798      	blx	r3
 8005fd4:	60f8      	str	r0, [r7, #12]
      break;
 8005fd6:	e020      	b.n	800601a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f9e5 	bl	80063aa <USBD_CtlError>
      return;
 8005fe0:	e037      	b.n	8006052 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	7c1b      	ldrb	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10d      	bne.n	8006006 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	f107 020a 	add.w	r2, r7, #10
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	4798      	blx	r3
 8005ffa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3301      	adds	r3, #1
 8006000:	2207      	movs	r2, #7
 8006002:	701a      	strb	r2, [r3, #0]
      break;
 8006004:	e009      	b.n	800601a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f9ce 	bl	80063aa <USBD_CtlError>
      return;
 800600e:	e020      	b.n	8006052 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f9c9 	bl	80063aa <USBD_CtlError>
    return;
 8006018:	e01b      	b.n	8006052 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 800601a:	897b      	ldrh	r3, [r7, #10]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d011      	beq.n	8006044 <USBD_GetDescriptor+0x218>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	88db      	ldrh	r3, [r3, #6]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00d      	beq.n	8006044 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	88da      	ldrh	r2, [r3, #6]
 800602c:	897b      	ldrh	r3, [r7, #10]
 800602e:	4293      	cmp	r3, r2
 8006030:	bf28      	it	cs
 8006032:	4613      	movcs	r3, r2
 8006034:	b29b      	uxth	r3, r3
 8006036:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006038:	897b      	ldrh	r3, [r7, #10]
 800603a:	461a      	mov	r2, r3
 800603c:	68f9      	ldr	r1, [r7, #12]
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fa1e 	bl	8006480 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	88db      	ldrh	r3, [r3, #6]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d102      	bne.n	8006052 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fa75 	bl	800653c <USBD_CtlSendStatus>
  }
}
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	889b      	ldrh	r3, [r3, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d130      	bne.n	80060cc <USBD_SetAddress+0x74>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	88db      	ldrh	r3, [r3, #6]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d12c      	bne.n	80060cc <USBD_SetAddress+0x74>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	885b      	ldrh	r3, [r3, #2]
 8006076:	2b7f      	cmp	r3, #127	; 0x7f
 8006078:	d828      	bhi.n	80060cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	885b      	ldrh	r3, [r3, #2]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006084:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800608c:	2b03      	cmp	r3, #3
 800608e:	d104      	bne.n	800609a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f989 	bl	80063aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006098:	e01c      	b.n	80060d4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	7bfa      	ldrb	r2, [r7, #15]
 800609e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fed6 	bl	8006e58 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fa45 	bl	800653c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d004      	beq.n	80060c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c0:	e008      	b.n	80060d4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ca:	e003      	b.n	80060d4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f96b 	bl	80063aa <USBD_CtlError>
  }
}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	885b      	ldrh	r3, [r3, #2]
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	4b41      	ldr	r3, [pc, #260]	; (80061f4 <USBD_SetConfig+0x118>)
 80060ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80060f0:	4b40      	ldr	r3, [pc, #256]	; (80061f4 <USBD_SetConfig+0x118>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d904      	bls.n	8006102 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f955 	bl	80063aa <USBD_CtlError>
 8006100:	e075      	b.n	80061ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006108:	2b02      	cmp	r3, #2
 800610a:	d002      	beq.n	8006112 <USBD_SetConfig+0x36>
 800610c:	2b03      	cmp	r3, #3
 800610e:	d023      	beq.n	8006158 <USBD_SetConfig+0x7c>
 8006110:	e062      	b.n	80061d8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8006112:	4b38      	ldr	r3, [pc, #224]	; (80061f4 <USBD_SetConfig+0x118>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01a      	beq.n	8006150 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800611a:	4b36      	ldr	r3, [pc, #216]	; (80061f4 <USBD_SetConfig+0x118>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2203      	movs	r2, #3
 8006128:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800612c:	4b31      	ldr	r3, [pc, #196]	; (80061f4 <USBD_SetConfig+0x118>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fa4a 	bl	80055cc <USBD_SetClassConfig>
 8006138:	4603      	mov	r3, r0
 800613a:	2b02      	cmp	r3, #2
 800613c:	d104      	bne.n	8006148 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f932 	bl	80063aa <USBD_CtlError>
          return;
 8006146:	e052      	b.n	80061ee <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f9f7 	bl	800653c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800614e:	e04e      	b.n	80061ee <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f9f3 	bl	800653c <USBD_CtlSendStatus>
      break;
 8006156:	e04a      	b.n	80061ee <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006158:	4b26      	ldr	r3, [pc, #152]	; (80061f4 <USBD_SetConfig+0x118>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d112      	bne.n	8006186 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8006168:	4b22      	ldr	r3, [pc, #136]	; (80061f4 <USBD_SetConfig+0x118>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8006172:	4b20      	ldr	r3, [pc, #128]	; (80061f4 <USBD_SetConfig+0x118>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	4619      	mov	r1, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff fa46 	bl	800560a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f9dc 	bl	800653c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006184:	e033      	b.n	80061ee <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8006186:	4b1b      	ldr	r3, [pc, #108]	; (80061f4 <USBD_SetConfig+0x118>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	d01d      	beq.n	80061d0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	b2db      	uxtb	r3, r3
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fa34 	bl	800560a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80061a2:	4b14      	ldr	r3, [pc, #80]	; (80061f4 <USBD_SetConfig+0x118>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80061ac:	4b11      	ldr	r3, [pc, #68]	; (80061f4 <USBD_SetConfig+0x118>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fa0a 	bl	80055cc <USBD_SetClassConfig>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d104      	bne.n	80061c8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f8f2 	bl	80063aa <USBD_CtlError>
          return;
 80061c6:	e012      	b.n	80061ee <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f9b7 	bl	800653c <USBD_CtlSendStatus>
      break;
 80061ce:	e00e      	b.n	80061ee <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f9b3 	bl	800653c <USBD_CtlSendStatus>
      break;
 80061d6:	e00a      	b.n	80061ee <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f8e5 	bl	80063aa <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80061e0:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <USBD_SetConfig+0x118>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff fa0f 	bl	800560a <USBD_ClrClassConfig>
      break;
 80061ec:	bf00      	nop
    }
  }
}
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000210 	.word	0x20000210

080061f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	88db      	ldrh	r3, [r3, #6]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d004      	beq.n	8006214 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f8cc 	bl	80063aa <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8006212:	e021      	b.n	8006258 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800621a:	2b01      	cmp	r3, #1
 800621c:	db17      	blt.n	800624e <USBD_GetConfig+0x56>
 800621e:	2b02      	cmp	r3, #2
 8006220:	dd02      	ble.n	8006228 <USBD_GetConfig+0x30>
 8006222:	2b03      	cmp	r3, #3
 8006224:	d00b      	beq.n	800623e <USBD_GetConfig+0x46>
 8006226:	e012      	b.n	800624e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3308      	adds	r3, #8
 8006232:	2201      	movs	r2, #1
 8006234:	4619      	mov	r1, r3
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f922 	bl	8006480 <USBD_CtlSendData>
      break;
 800623c:	e00c      	b.n	8006258 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3304      	adds	r3, #4
 8006242:	2201      	movs	r2, #1
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f91a 	bl	8006480 <USBD_CtlSendData>
      break;
 800624c:	e004      	b.n	8006258 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f8aa 	bl	80063aa <USBD_CtlError>
      break;
 8006256:	bf00      	nop
}
 8006258:	bf00      	nop
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006270:	3b01      	subs	r3, #1
 8006272:	2b02      	cmp	r3, #2
 8006274:	d81e      	bhi.n	80062b4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	88db      	ldrh	r3, [r3, #6]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d004      	beq.n	8006288 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f892 	bl	80063aa <USBD_CtlError>
      break;
 8006286:	e01a      	b.n	80062be <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f043 0202 	orr.w	r2, r3, #2
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	330c      	adds	r3, #12
 80062a8:	2202      	movs	r2, #2
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f8e7 	bl	8006480 <USBD_CtlSendData>
    break;
 80062b2:	e004      	b.n	80062be <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f877 	bl	80063aa <USBD_CtlError>
    break;
 80062bc:	bf00      	nop
  }
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b082      	sub	sp, #8
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	885b      	ldrh	r3, [r3, #2]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d106      	bne.n	80062e6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f92b 	bl	800653c <USBD_CtlSendStatus>
  }

}
 80062e6:	bf00      	nop
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80062fe:	3b01      	subs	r3, #1
 8006300:	2b02      	cmp	r3, #2
 8006302:	d80b      	bhi.n	800631c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	885b      	ldrh	r3, [r3, #2]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d10c      	bne.n	8006326 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f911 	bl	800653c <USBD_CtlSendStatus>
    }
    break;
 800631a:	e004      	b.n	8006326 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f843 	bl	80063aa <USBD_CtlError>
    break;
 8006324:	e000      	b.n	8006328 <USBD_ClrFeature+0x3a>
    break;
 8006326:	bf00      	nop
  }
}
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781a      	ldrb	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	785a      	ldrb	r2, [r3, #1]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	3302      	adds	r3, #2
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	b29a      	uxth	r2, r3
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	3303      	adds	r3, #3
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	b29b      	uxth	r3, r3
 800635e:	4413      	add	r3, r2
 8006360:	b29a      	uxth	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	3304      	adds	r3, #4
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	b29a      	uxth	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	3305      	adds	r3, #5
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	b29b      	uxth	r3, r3
 800637a:	4413      	add	r3, r2
 800637c:	b29a      	uxth	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	3306      	adds	r3, #6
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	b29a      	uxth	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	3307      	adds	r3, #7
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	b29b      	uxth	r3, r3
 8006396:	4413      	add	r3, r2
 8006398:	b29a      	uxth	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	80da      	strh	r2, [r3, #6]

}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80063b4:	2180      	movs	r1, #128	; 0x80
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fcbc 	bl	8006d34 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80063bc:	2100      	movs	r1, #0
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fcb8 	bl	8006d34 <USBD_LL_StallEP>
}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d032      	beq.n	8006448 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f834 	bl	8006450 <USBD_GetLen>
 80063e8:	4603      	mov	r3, r0
 80063ea:	3301      	adds	r3, #1
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	75fa      	strb	r2, [r7, #23]
 80063fc:	461a      	mov	r2, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4413      	add	r3, r2
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	7812      	ldrb	r2, [r2, #0]
 8006406:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	75fa      	strb	r2, [r7, #23]
 800640e:	461a      	mov	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4413      	add	r3, r2
 8006414:	2203      	movs	r2, #3
 8006416:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006418:	e012      	b.n	8006440 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	60fa      	str	r2, [r7, #12]
 8006420:	7dfa      	ldrb	r2, [r7, #23]
 8006422:	1c51      	adds	r1, r2, #1
 8006424:	75f9      	strb	r1, [r7, #23]
 8006426:	4611      	mov	r1, r2
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	440a      	add	r2, r1
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006430:	7dfb      	ldrb	r3, [r7, #23]
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	75fa      	strb	r2, [r7, #23]
 8006436:	461a      	mov	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4413      	add	r3, r2
 800643c:	2200      	movs	r2, #0
 800643e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e8      	bne.n	800641a <USBD_GetString+0x4e>
    }
  }
}
 8006448:	bf00      	nop
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800645c:	e005      	b.n	800646a <USBD_GetLen+0x1a>
    {
        len++;
 800645e:	7bfb      	ldrb	r3, [r7, #15]
 8006460:	3301      	adds	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3301      	adds	r3, #1
 8006468:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f5      	bne.n	800645e <USBD_GetLen+0xe>
    }

    return len;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	4613      	mov	r3, r2
 800648c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2202      	movs	r2, #2
 8006492:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800649c:	88fa      	ldrh	r2, [r7, #6]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80064a2:	88fb      	ldrh	r3, [r7, #6]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	2100      	movs	r1, #0
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 fd0b 	bl	8006ec4 <USBD_LL_Transmit>

  return USBD_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	4613      	mov	r3, r2
 80064c4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	2100      	movs	r1, #0
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 fcf9 	bl	8006ec4 <USBD_LL_Transmit>

  return USBD_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	4613      	mov	r3, r2
 80064e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2203      	movs	r2, #3
 80064ee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80064f2:	88fa      	ldrh	r2, [r7, #6]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80064fa:	88fa      	ldrh	r2, [r7, #6]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	2100      	movs	r1, #0
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 fd15 	bl	8006f38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006526:	88fb      	ldrh	r3, [r7, #6]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	2100      	movs	r1, #0
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 fd03 	bl	8006f38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2204      	movs	r2, #4
 8006548:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800654c:	2300      	movs	r3, #0
 800654e:	2200      	movs	r2, #0
 8006550:	2100      	movs	r1, #0
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fcb6 	bl	8006ec4 <USBD_LL_Transmit>

  return USBD_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2205      	movs	r2, #5
 800656e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006572:	2300      	movs	r3, #0
 8006574:	2200      	movs	r2, #0
 8006576:	2100      	movs	r1, #0
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fcdd 	bl	8006f38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800658c:	2200      	movs	r2, #0
 800658e:	4912      	ldr	r1, [pc, #72]	; (80065d8 <MX_USB_DEVICE_Init+0x50>)
 8006590:	4812      	ldr	r0, [pc, #72]	; (80065dc <MX_USB_DEVICE_Init+0x54>)
 8006592:	f7fe ffbf 	bl	8005514 <USBD_Init>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800659c:	f7f9 ffea 	bl	8000574 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80065a0:	490f      	ldr	r1, [pc, #60]	; (80065e0 <MX_USB_DEVICE_Init+0x58>)
 80065a2:	480e      	ldr	r0, [pc, #56]	; (80065dc <MX_USB_DEVICE_Init+0x54>)
 80065a4:	f7fe ffe1 	bl	800556a <USBD_RegisterClass>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80065ae:	f7f9 ffe1 	bl	8000574 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80065b2:	490c      	ldr	r1, [pc, #48]	; (80065e4 <MX_USB_DEVICE_Init+0x5c>)
 80065b4:	4809      	ldr	r0, [pc, #36]	; (80065dc <MX_USB_DEVICE_Init+0x54>)
 80065b6:	f7fe ff0f 	bl	80053d8 <USBD_CDC_RegisterInterface>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80065c0:	f7f9 ffd8 	bl	8000574 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80065c4:	4805      	ldr	r0, [pc, #20]	; (80065dc <MX_USB_DEVICE_Init+0x54>)
 80065c6:	f7fe ffea 	bl	800559e <USBD_Start>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80065d0:	f7f9 ffd0 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80065d4:	bf00      	nop
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	2000012c 	.word	0x2000012c
 80065dc:	200004a4 	.word	0x200004a4
 80065e0:	20000018 	.word	0x20000018
 80065e4:	2000011c 	.word	0x2000011c

080065e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80065ec:	2200      	movs	r2, #0
 80065ee:	4905      	ldr	r1, [pc, #20]	; (8006604 <CDC_Init_FS+0x1c>)
 80065f0:	4805      	ldr	r0, [pc, #20]	; (8006608 <CDC_Init_FS+0x20>)
 80065f2:	f7fe ff08 	bl	8005406 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80065f6:	4905      	ldr	r1, [pc, #20]	; (800660c <CDC_Init_FS+0x24>)
 80065f8:	4803      	ldr	r0, [pc, #12]	; (8006608 <CDC_Init_FS+0x20>)
 80065fa:	f7fe ff1e 	bl	800543a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80065fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006600:	4618      	mov	r0, r3
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20000b28 	.word	0x20000b28
 8006608:	200004a4 	.word	0x200004a4
 800660c:	20000740 	.word	0x20000740

08006610 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006614:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006616:	4618      	mov	r0, r3
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	6039      	str	r1, [r7, #0]
 800662a:	71fb      	strb	r3, [r7, #7]
 800662c:	4613      	mov	r3, r2
 800662e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	2b23      	cmp	r3, #35	; 0x23
 8006634:	d84a      	bhi.n	80066cc <CDC_Control_FS+0xac>
 8006636:	a201      	add	r2, pc, #4	; (adr r2, 800663c <CDC_Control_FS+0x1c>)
 8006638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663c:	080066cd 	.word	0x080066cd
 8006640:	080066cd 	.word	0x080066cd
 8006644:	080066cd 	.word	0x080066cd
 8006648:	080066cd 	.word	0x080066cd
 800664c:	080066cd 	.word	0x080066cd
 8006650:	080066cd 	.word	0x080066cd
 8006654:	080066cd 	.word	0x080066cd
 8006658:	080066cd 	.word	0x080066cd
 800665c:	080066cd 	.word	0x080066cd
 8006660:	080066cd 	.word	0x080066cd
 8006664:	080066cd 	.word	0x080066cd
 8006668:	080066cd 	.word	0x080066cd
 800666c:	080066cd 	.word	0x080066cd
 8006670:	080066cd 	.word	0x080066cd
 8006674:	080066cd 	.word	0x080066cd
 8006678:	080066cd 	.word	0x080066cd
 800667c:	080066cd 	.word	0x080066cd
 8006680:	080066cd 	.word	0x080066cd
 8006684:	080066cd 	.word	0x080066cd
 8006688:	080066cd 	.word	0x080066cd
 800668c:	080066cd 	.word	0x080066cd
 8006690:	080066cd 	.word	0x080066cd
 8006694:	080066cd 	.word	0x080066cd
 8006698:	080066cd 	.word	0x080066cd
 800669c:	080066cd 	.word	0x080066cd
 80066a0:	080066cd 	.word	0x080066cd
 80066a4:	080066cd 	.word	0x080066cd
 80066a8:	080066cd 	.word	0x080066cd
 80066ac:	080066cd 	.word	0x080066cd
 80066b0:	080066cd 	.word	0x080066cd
 80066b4:	080066cd 	.word	0x080066cd
 80066b8:	080066cd 	.word	0x080066cd
 80066bc:	080066cd 	.word	0x080066cd
 80066c0:	080066cd 	.word	0x080066cd
 80066c4:	080066cd 	.word	0x080066cd
 80066c8:	080066cd 	.word	0x080066cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80066cc:	bf00      	nop
  }

  return (USBD_OK);
 80066ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	4805      	ldr	r0, [pc, #20]	; (8006700 <CDC_Receive_FS+0x24>)
 80066ea:	f7fe fea6 	bl	800543a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80066ee:	4804      	ldr	r0, [pc, #16]	; (8006700 <CDC_Receive_FS+0x24>)
 80066f0:	f7fe fee6 	bl	80054c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80066f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	200004a4 	.word	0x200004a4

08006704 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006714:	4b0d      	ldr	r3, [pc, #52]	; (800674c <CDC_Transmit_FS+0x48>)
 8006716:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800671a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006726:	2301      	movs	r3, #1
 8006728:	e00b      	b.n	8006742 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800672a:	887b      	ldrh	r3, [r7, #2]
 800672c:	461a      	mov	r2, r3
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	4806      	ldr	r0, [pc, #24]	; (800674c <CDC_Transmit_FS+0x48>)
 8006732:	f7fe fe68 	bl	8005406 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006736:	4805      	ldr	r0, [pc, #20]	; (800674c <CDC_Transmit_FS+0x48>)
 8006738:	f7fe fe93 	bl	8005462 <USBD_CDC_TransmitPacket>
 800673c:	4603      	mov	r3, r0
 800673e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	200004a4 	.word	0x200004a4

08006750 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	6039      	str	r1, [r7, #0]
 800675a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2212      	movs	r2, #18
 8006760:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006762:	4b03      	ldr	r3, [pc, #12]	; (8006770 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	2000014c 	.word	0x2000014c

08006774 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	4603      	mov	r3, r0
 800677c:	6039      	str	r1, [r7, #0]
 800677e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2204      	movs	r2, #4
 8006784:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006786:	4b03      	ldr	r3, [pc, #12]	; (8006794 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	2000016c 	.word	0x2000016c

08006798 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	4603      	mov	r3, r0
 80067a0:	6039      	str	r1, [r7, #0]
 80067a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d105      	bne.n	80067b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	4907      	ldr	r1, [pc, #28]	; (80067cc <USBD_FS_ProductStrDescriptor+0x34>)
 80067ae:	4808      	ldr	r0, [pc, #32]	; (80067d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80067b0:	f7ff fe0c 	bl	80063cc <USBD_GetString>
 80067b4:	e004      	b.n	80067c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	4904      	ldr	r1, [pc, #16]	; (80067cc <USBD_FS_ProductStrDescriptor+0x34>)
 80067ba:	4805      	ldr	r0, [pc, #20]	; (80067d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80067bc:	f7ff fe06 	bl	80063cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80067c0:	4b02      	ldr	r3, [pc, #8]	; (80067cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000f10 	.word	0x20000f10
 80067d0:	08007948 	.word	0x08007948

080067d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	6039      	str	r1, [r7, #0]
 80067de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	4904      	ldr	r1, [pc, #16]	; (80067f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80067e4:	4804      	ldr	r0, [pc, #16]	; (80067f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80067e6:	f7ff fdf1 	bl	80063cc <USBD_GetString>
  return USBD_StrDesc;
 80067ea:	4b02      	ldr	r3, [pc, #8]	; (80067f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20000f10 	.word	0x20000f10
 80067f8:	08007960 	.word	0x08007960

080067fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	6039      	str	r1, [r7, #0]
 8006806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	221a      	movs	r2, #26
 800680c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800680e:	f000 f855 	bl	80068bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006812:	4b02      	ldr	r3, [pc, #8]	; (800681c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	20000170 	.word	0x20000170

08006820 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	6039      	str	r1, [r7, #0]
 800682a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800682c:	79fb      	ldrb	r3, [r7, #7]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d105      	bne.n	800683e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	4907      	ldr	r1, [pc, #28]	; (8006854 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006836:	4808      	ldr	r0, [pc, #32]	; (8006858 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006838:	f7ff fdc8 	bl	80063cc <USBD_GetString>
 800683c:	e004      	b.n	8006848 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	4904      	ldr	r1, [pc, #16]	; (8006854 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006842:	4805      	ldr	r0, [pc, #20]	; (8006858 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006844:	f7ff fdc2 	bl	80063cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006848:	4b02      	ldr	r3, [pc, #8]	; (8006854 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000f10 	.word	0x20000f10
 8006858:	08007974 	.word	0x08007974

0800685c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	6039      	str	r1, [r7, #0]
 8006866:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d105      	bne.n	800687a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	4907      	ldr	r1, [pc, #28]	; (8006890 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006872:	4808      	ldr	r0, [pc, #32]	; (8006894 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006874:	f7ff fdaa 	bl	80063cc <USBD_GetString>
 8006878:	e004      	b.n	8006884 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	4904      	ldr	r1, [pc, #16]	; (8006890 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800687e:	4805      	ldr	r0, [pc, #20]	; (8006894 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006880:	f7ff fda4 	bl	80063cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006884:	4b02      	ldr	r3, [pc, #8]	; (8006890 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000f10 	.word	0x20000f10
 8006894:	08007980 	.word	0x08007980

08006898 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	6039      	str	r1, [r7, #0]
 80068a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	220c      	movs	r2, #12
 80068a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80068aa:	4b03      	ldr	r3, [pc, #12]	; (80068b8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	20000160 	.word	0x20000160

080068bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80068c2:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <Get_SerialNum+0x44>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068c8:	4b0e      	ldr	r3, [pc, #56]	; (8006904 <Get_SerialNum+0x48>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80068ce:	4b0e      	ldr	r3, [pc, #56]	; (8006908 <Get_SerialNum+0x4c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4413      	add	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d009      	beq.n	80068f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80068e2:	2208      	movs	r2, #8
 80068e4:	4909      	ldr	r1, [pc, #36]	; (800690c <Get_SerialNum+0x50>)
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 f814 	bl	8006914 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80068ec:	2204      	movs	r2, #4
 80068ee:	4908      	ldr	r1, [pc, #32]	; (8006910 <Get_SerialNum+0x54>)
 80068f0:	68b8      	ldr	r0, [r7, #8]
 80068f2:	f000 f80f 	bl	8006914 <IntToUnicode>
  }
}
 80068f6:	bf00      	nop
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	1fff7590 	.word	0x1fff7590
 8006904:	1fff7594 	.word	0x1fff7594
 8006908:	1fff7598 	.word	0x1fff7598
 800690c:	20000172 	.word	0x20000172
 8006910:	20000182 	.word	0x20000182

08006914 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006926:	2300      	movs	r3, #0
 8006928:	75fb      	strb	r3, [r7, #23]
 800692a:	e027      	b.n	800697c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	0f1b      	lsrs	r3, r3, #28
 8006930:	2b09      	cmp	r3, #9
 8006932:	d80b      	bhi.n	800694c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	0f1b      	lsrs	r3, r3, #28
 8006938:	b2da      	uxtb	r2, r3
 800693a:	7dfb      	ldrb	r3, [r7, #23]
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	4619      	mov	r1, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	440b      	add	r3, r1
 8006944:	3230      	adds	r2, #48	; 0x30
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e00a      	b.n	8006962 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	0f1b      	lsrs	r3, r3, #28
 8006950:	b2da      	uxtb	r2, r3
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	4619      	mov	r1, r3
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	440b      	add	r3, r1
 800695c:	3237      	adds	r2, #55	; 0x37
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	011b      	lsls	r3, r3, #4
 8006966:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	3301      	adds	r3, #1
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	4413      	add	r3, r2
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	3301      	adds	r3, #1
 800697a:	75fb      	strb	r3, [r7, #23]
 800697c:	7dfa      	ldrb	r2, [r7, #23]
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	429a      	cmp	r2, r3
 8006982:	d3d3      	bcc.n	800692c <IntToUnicode+0x18>
  }
}
 8006984:	bf00      	nop
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a0d      	ldr	r2, [pc, #52]	; (80069d4 <HAL_PCD_MspInit+0x44>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d113      	bne.n	80069ca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80069a2:	4b0d      	ldr	r3, [pc, #52]	; (80069d8 <HAL_PCD_MspInit+0x48>)
 80069a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a6:	4a0c      	ldr	r2, [pc, #48]	; (80069d8 <HAL_PCD_MspInit+0x48>)
 80069a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069ac:	6593      	str	r3, [r2, #88]	; 0x58
 80069ae:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <HAL_PCD_MspInit+0x48>)
 80069b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80069ba:	2200      	movs	r2, #0
 80069bc:	2100      	movs	r1, #0
 80069be:	2043      	movs	r0, #67	; 0x43
 80069c0:	f7fa f889 	bl	8000ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80069c4:	2043      	movs	r0, #67	; 0x43
 80069c6:	f7fa f8a2 	bl	8000b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	40006800 	.word	0x40006800
 80069d8:	40021000 	.word	0x40021000

080069dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f7fe fe1c 	bl	8005630 <USBD_LL_SetupStage>
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	015b      	lsls	r3, r3, #5
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	4619      	mov	r1, r3
 8006a24:	f7fe fe4f 	bl	80056c6 <USBD_LL_DataOutStage>
}
 8006a28:	bf00      	nop
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	015b      	lsls	r3, r3, #5
 8006a48:	4413      	add	r3, r2
 8006a4a:	333c      	adds	r3, #60	; 0x3c
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	4619      	mov	r1, r3
 8006a52:	f7fe fea9 	bl	80057a8 <USBD_LL_DataInStage>
}
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fe ffb7 	bl	80059e0 <USBD_LL_SOF>
}
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a82:	2301      	movs	r3, #1
 8006a84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d001      	beq.n	8006a92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006a8e:	f7f9 fd71 	bl	8000574 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006a98:	7bfa      	ldrb	r2, [r7, #15]
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fe ff69 	bl	8005974 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe ff22 	bl	80058f2 <USBD_LL_Reset>
}
 8006aae:	bf00      	nop
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fe ff64 	bl	8005994 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ad4:	4b04      	ldr	r3, [pc, #16]	; (8006ae8 <HAL_PCD_SuspendCallback+0x30>)
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	4a03      	ldr	r2, [pc, #12]	; (8006ae8 <HAL_PCD_SuspendCallback+0x30>)
 8006ada:	f043 0306 	orr.w	r3, r3, #6
 8006ade:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	e000ed00 	.word	0xe000ed00

08006aec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d007      	beq.n	8006b0c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006afc:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <HAL_PCD_ResumeCallback+0x34>)
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	4a07      	ldr	r2, [pc, #28]	; (8006b20 <HAL_PCD_ResumeCallback+0x34>)
 8006b02:	f023 0306 	bic.w	r3, r3, #6
 8006b06:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006b08:	f000 fab2 	bl	8007070 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe ff53 	bl	80059be <USBD_LL_Resume>
}
 8006b18:	bf00      	nop
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	e000ed00 	.word	0xe000ed00

08006b24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8006b2c:	f7fb f972 	bl	8001e14 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006b30:	4a2b      	ldr	r2, [pc, #172]	; (8006be0 <USBD_LL_Init+0xbc>)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a29      	ldr	r2, [pc, #164]	; (8006be0 <USBD_LL_Init+0xbc>)
 8006b3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8006b40:	4b27      	ldr	r3, [pc, #156]	; (8006be0 <USBD_LL_Init+0xbc>)
 8006b42:	4a28      	ldr	r2, [pc, #160]	; (8006be4 <USBD_LL_Init+0xc0>)
 8006b44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006b46:	4b26      	ldr	r3, [pc, #152]	; (8006be0 <USBD_LL_Init+0xbc>)
 8006b48:	2208      	movs	r2, #8
 8006b4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006b4c:	4b24      	ldr	r3, [pc, #144]	; (8006be0 <USBD_LL_Init+0xbc>)
 8006b4e:	2202      	movs	r2, #2
 8006b50:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b52:	4b23      	ldr	r3, [pc, #140]	; (8006be0 <USBD_LL_Init+0xbc>)
 8006b54:	2202      	movs	r2, #2
 8006b56:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006b58:	4b21      	ldr	r3, [pc, #132]	; (8006be0 <USBD_LL_Init+0xbc>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006b5e:	4b20      	ldr	r3, [pc, #128]	; (8006be0 <USBD_LL_Init+0xbc>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006b64:	4b1e      	ldr	r3, [pc, #120]	; (8006be0 <USBD_LL_Init+0xbc>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006b6a:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <USBD_LL_Init+0xbc>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006b70:	481b      	ldr	r0, [pc, #108]	; (8006be0 <USBD_LL_Init+0xbc>)
 8006b72:	f7fa f9a1 	bl	8000eb8 <HAL_PCD_Init>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8006b7c:	f7f9 fcfa 	bl	8000574 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006b86:	2318      	movs	r3, #24
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	f7fb f876 	bl	8001c7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006b96:	2358      	movs	r3, #88	; 0x58
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2180      	movs	r1, #128	; 0x80
 8006b9c:	f7fb f86e 	bl	8001c7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006ba6:	23c0      	movs	r3, #192	; 0xc0
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2181      	movs	r1, #129	; 0x81
 8006bac:	f7fb f866 	bl	8001c7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006bb6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	f7fb f85d 	bl	8001c7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2182      	movs	r1, #130	; 0x82
 8006bd0:	f7fb f854 	bl	8001c7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20001110 	.word	0x20001110
 8006be4:	40006800 	.word	0x40006800

08006be8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fa fa42 	bl	8001088 <HAL_PCD_Start>
 8006c04:	4603      	mov	r3, r0
 8006c06:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	d816      	bhi.n	8006c3c <USBD_LL_Start+0x54>
 8006c0e:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <USBD_LL_Start+0x2c>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006c25 	.word	0x08006c25
 8006c18:	08006c2b 	.word	0x08006c2b
 8006c1c:	08006c31 	.word	0x08006c31
 8006c20:	08006c37 	.word	0x08006c37
    case HAL_OK :
      usb_status = USBD_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]
    break;
 8006c28:	e00b      	b.n	8006c42 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c2e:	e008      	b.n	8006c42 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c30:	2301      	movs	r3, #1
 8006c32:	73fb      	strb	r3, [r7, #15]
    break;
 8006c34:	e005      	b.n	8006c42 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c36:	2302      	movs	r3, #2
 8006c38:	73fb      	strb	r3, [r7, #15]
    break;
 8006c3a:	e002      	b.n	8006c42 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c40:	bf00      	nop
  }
  return usb_status;
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	4608      	mov	r0, r1
 8006c56:	4611      	mov	r1, r2
 8006c58:	461a      	mov	r2, r3
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	70fb      	strb	r3, [r7, #3]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	70bb      	strb	r3, [r7, #2]
 8006c62:	4613      	mov	r3, r2
 8006c64:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006c74:	78bb      	ldrb	r3, [r7, #2]
 8006c76:	883a      	ldrh	r2, [r7, #0]
 8006c78:	78f9      	ldrb	r1, [r7, #3]
 8006c7a:	f7fa fba5 	bl	80013c8 <HAL_PCD_EP_Open>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d817      	bhi.n	8006cb8 <USBD_LL_OpenEP+0x6c>
 8006c88:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <USBD_LL_OpenEP+0x44>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006ca1 	.word	0x08006ca1
 8006c94:	08006ca7 	.word	0x08006ca7
 8006c98:	08006cad 	.word	0x08006cad
 8006c9c:	08006cb3 	.word	0x08006cb3
    case HAL_OK :
      usb_status = USBD_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ca4:	e00b      	b.n	8006cbe <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8006caa:	e008      	b.n	8006cbe <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006cac:	2301      	movs	r3, #1
 8006cae:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb0:	e005      	b.n	8006cbe <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb6:	e002      	b.n	8006cbe <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006cb8:	2302      	movs	r3, #2
 8006cba:	73fb      	strb	r3, [r7, #15]
    break;
 8006cbc:	bf00      	nop
  }
  return usb_status;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006ce2:	78fa      	ldrb	r2, [r7, #3]
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fa fbce 	bl	8001488 <HAL_PCD_EP_Close>
 8006cec:	4603      	mov	r3, r0
 8006cee:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d816      	bhi.n	8006d24 <USBD_LL_CloseEP+0x5c>
 8006cf6:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <USBD_LL_CloseEP+0x34>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d0d 	.word	0x08006d0d
 8006d00:	08006d13 	.word	0x08006d13
 8006d04:	08006d19 	.word	0x08006d19
 8006d08:	08006d1f 	.word	0x08006d1f
    case HAL_OK :
      usb_status = USBD_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d10:	e00b      	b.n	8006d2a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d12:	2302      	movs	r3, #2
 8006d14:	73fb      	strb	r3, [r7, #15]
    break;
 8006d16:	e008      	b.n	8006d2a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d1c:	e005      	b.n	8006d2a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	73fb      	strb	r3, [r7, #15]
    break;
 8006d22:	e002      	b.n	8006d2a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006d24:	2302      	movs	r3, #2
 8006d26:	73fb      	strb	r3, [r7, #15]
    break;
 8006d28:	bf00      	nop
  }
  return usb_status;  
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	4611      	mov	r1, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fa fc62 	bl	800161c <HAL_PCD_EP_SetStall>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006d5c:	7bbb      	ldrb	r3, [r7, #14]
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d816      	bhi.n	8006d90 <USBD_LL_StallEP+0x5c>
 8006d62:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <USBD_LL_StallEP+0x34>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d79 	.word	0x08006d79
 8006d6c:	08006d7f 	.word	0x08006d7f
 8006d70:	08006d85 	.word	0x08006d85
 8006d74:	08006d8b 	.word	0x08006d8b
    case HAL_OK :
      usb_status = USBD_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d7c:	e00b      	b.n	8006d96 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	73fb      	strb	r3, [r7, #15]
    break;
 8006d82:	e008      	b.n	8006d96 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d84:	2301      	movs	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
    break;
 8006d88:	e005      	b.n	8006d96 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	73fb      	strb	r3, [r7, #15]
    break;
 8006d8e:	e002      	b.n	8006d96 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006d90:	2302      	movs	r3, #2
 8006d92:	73fb      	strb	r3, [r7, #15]
    break;
 8006d94:	bf00      	nop
  }
  return usb_status;  
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006dba:	78fa      	ldrb	r2, [r7, #3]
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fa fc86 	bl	80016d0 <HAL_PCD_EP_ClrStall>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d816      	bhi.n	8006dfc <USBD_LL_ClearStallEP+0x5c>
 8006dce:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <USBD_LL_ClearStallEP+0x34>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006de5 	.word	0x08006de5
 8006dd8:	08006deb 	.word	0x08006deb
 8006ddc:	08006df1 	.word	0x08006df1
 8006de0:	08006df7 	.word	0x08006df7
    case HAL_OK :
      usb_status = USBD_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	73fb      	strb	r3, [r7, #15]
    break;
 8006de8:	e00b      	b.n	8006e02 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006dea:	2302      	movs	r3, #2
 8006dec:	73fb      	strb	r3, [r7, #15]
    break;
 8006dee:	e008      	b.n	8006e02 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006df0:	2301      	movs	r3, #1
 8006df2:	73fb      	strb	r3, [r7, #15]
    break;
 8006df4:	e005      	b.n	8006e02 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006df6:	2302      	movs	r3, #2
 8006df8:	73fb      	strb	r3, [r7, #15]
    break;
 8006dfa:	e002      	b.n	8006e02 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8006e00:	bf00      	nop
  }
  return usb_status; 
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006e1e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	da08      	bge.n	8006e3a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	015b      	lsls	r3, r3, #5
 8006e32:	4413      	add	r3, r2
 8006e34:	332a      	adds	r3, #42	; 0x2a
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	e008      	b.n	8006e4c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	015b      	lsls	r3, r3, #5
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006e4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	460b      	mov	r3, r1
 8006e62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	4611      	mov	r1, r2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fa fa81 	bl	800137e <HAL_PCD_SetAddress>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d816      	bhi.n	8006eb4 <USBD_LL_SetUSBAddress+0x5c>
 8006e86:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <USBD_LL_SetUSBAddress+0x34>)
 8006e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8c:	08006e9d 	.word	0x08006e9d
 8006e90:	08006ea3 	.word	0x08006ea3
 8006e94:	08006ea9 	.word	0x08006ea9
 8006e98:	08006eaf 	.word	0x08006eaf
    case HAL_OK :
      usb_status = USBD_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea0:	e00b      	b.n	8006eba <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea6:	e008      	b.n	8006eba <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8006eac:	e005      	b.n	8006eba <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	73fb      	strb	r3, [r7, #15]
    break;
 8006eb2:	e002      	b.n	8006eba <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8006eb8:	bf00      	nop
  }
  return usb_status;  
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	607a      	str	r2, [r7, #4]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	72fb      	strb	r3, [r7, #11]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006ee6:	893b      	ldrh	r3, [r7, #8]
 8006ee8:	7af9      	ldrb	r1, [r7, #11]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	f7fa fb5d 	bl	80015aa <HAL_PCD_EP_Transmit>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8006ef4:	7dbb      	ldrb	r3, [r7, #22]
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d816      	bhi.n	8006f28 <USBD_LL_Transmit+0x64>
 8006efa:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <USBD_LL_Transmit+0x3c>)
 8006efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f00:	08006f11 	.word	0x08006f11
 8006f04:	08006f17 	.word	0x08006f17
 8006f08:	08006f1d 	.word	0x08006f1d
 8006f0c:	08006f23 	.word	0x08006f23
    case HAL_OK :
      usb_status = USBD_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	75fb      	strb	r3, [r7, #23]
    break;
 8006f14:	e00b      	b.n	8006f2e <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f16:	2302      	movs	r3, #2
 8006f18:	75fb      	strb	r3, [r7, #23]
    break;
 8006f1a:	e008      	b.n	8006f2e <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	75fb      	strb	r3, [r7, #23]
    break;
 8006f20:	e005      	b.n	8006f2e <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f22:	2302      	movs	r3, #2
 8006f24:	75fb      	strb	r3, [r7, #23]
    break;
 8006f26:	e002      	b.n	8006f2e <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	75fb      	strb	r3, [r7, #23]
    break;
 8006f2c:	bf00      	nop
  }
  return usb_status;    
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	607a      	str	r2, [r7, #4]
 8006f42:	461a      	mov	r2, r3
 8006f44:	460b      	mov	r3, r1
 8006f46:	72fb      	strb	r3, [r7, #11]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006f5a:	893b      	ldrh	r3, [r7, #8]
 8006f5c:	7af9      	ldrb	r1, [r7, #11]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	f7fa fad4 	bl	800150c <HAL_PCD_EP_Receive>
 8006f64:	4603      	mov	r3, r0
 8006f66:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8006f68:	7dbb      	ldrb	r3, [r7, #22]
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d816      	bhi.n	8006f9c <USBD_LL_PrepareReceive+0x64>
 8006f6e:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <USBD_LL_PrepareReceive+0x3c>)
 8006f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f74:	08006f85 	.word	0x08006f85
 8006f78:	08006f8b 	.word	0x08006f8b
 8006f7c:	08006f91 	.word	0x08006f91
 8006f80:	08006f97 	.word	0x08006f97
    case HAL_OK :
      usb_status = USBD_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]
    break;
 8006f88:	e00b      	b.n	8006fa2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	75fb      	strb	r3, [r7, #23]
    break;
 8006f8e:	e008      	b.n	8006fa2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f90:	2301      	movs	r3, #1
 8006f92:	75fb      	strb	r3, [r7, #23]
    break;
 8006f94:	e005      	b.n	8006fa2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f96:	2302      	movs	r3, #2
 8006f98:	75fb      	strb	r3, [r7, #23]
    break;
 8006f9a:	e002      	b.n	8006fa2 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	75fb      	strb	r3, [r7, #23]
    break;
 8006fa0:	bf00      	nop
  }
  return usb_status; 
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fa fadc 	bl	8001580 <HAL_PCD_EP_GetRxCount>
 8006fc8:	4603      	mov	r3, r0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <HAL_PCDEx_LPM_Callback+0x18>
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d013      	beq.n	8007012 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8006fea:	e023      	b.n	8007034 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8006ff4:	f000 f83c 	bl	8007070 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ff8:	4b10      	ldr	r3, [pc, #64]	; (800703c <HAL_PCDEx_LPM_Callback+0x68>)
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	4a0f      	ldr	r2, [pc, #60]	; (800703c <HAL_PCDEx_LPM_Callback+0x68>)
 8006ffe:	f023 0306 	bic.w	r3, r3, #6
 8007002:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe fcd7 	bl	80059be <USBD_LL_Resume>
    break;
 8007010:	e010      	b.n	8007034 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe fcbb 	bl	8005994 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <HAL_PCDEx_LPM_Callback+0x68>)
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	4a04      	ldr	r2, [pc, #16]	; (800703c <HAL_PCDEx_LPM_Callback+0x68>)
 800702c:	f043 0306 	orr.w	r3, r3, #6
 8007030:	6113      	str	r3, [r2, #16]
    break;   
 8007032:	bf00      	nop
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	e000ed00 	.word	0xe000ed00

08007040 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007048:	4b03      	ldr	r3, [pc, #12]	; (8007058 <USBD_static_malloc+0x18>)
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	20000214 	.word	0x20000214

0800705c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]

}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007074:	f7f9 f95e 	bl	8000334 <SystemClock_Config>
}
 8007078:	bf00      	nop
 800707a:	bd80      	pop	{r7, pc}

0800707c <__errno>:
 800707c:	4b01      	ldr	r3, [pc, #4]	; (8007084 <__errno+0x8>)
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	2000018c 	.word	0x2000018c

08007088 <__libc_init_array>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	4e0d      	ldr	r6, [pc, #52]	; (80070c0 <__libc_init_array+0x38>)
 800708c:	4c0d      	ldr	r4, [pc, #52]	; (80070c4 <__libc_init_array+0x3c>)
 800708e:	1ba4      	subs	r4, r4, r6
 8007090:	10a4      	asrs	r4, r4, #2
 8007092:	2500      	movs	r5, #0
 8007094:	42a5      	cmp	r5, r4
 8007096:	d109      	bne.n	80070ac <__libc_init_array+0x24>
 8007098:	4e0b      	ldr	r6, [pc, #44]	; (80070c8 <__libc_init_array+0x40>)
 800709a:	4c0c      	ldr	r4, [pc, #48]	; (80070cc <__libc_init_array+0x44>)
 800709c:	f000 fc40 	bl	8007920 <_init>
 80070a0:	1ba4      	subs	r4, r4, r6
 80070a2:	10a4      	asrs	r4, r4, #2
 80070a4:	2500      	movs	r5, #0
 80070a6:	42a5      	cmp	r5, r4
 80070a8:	d105      	bne.n	80070b6 <__libc_init_array+0x2e>
 80070aa:	bd70      	pop	{r4, r5, r6, pc}
 80070ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070b0:	4798      	blx	r3
 80070b2:	3501      	adds	r5, #1
 80070b4:	e7ee      	b.n	8007094 <__libc_init_array+0xc>
 80070b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070ba:	4798      	blx	r3
 80070bc:	3501      	adds	r5, #1
 80070be:	e7f2      	b.n	80070a6 <__libc_init_array+0x1e>
 80070c0:	08007a04 	.word	0x08007a04
 80070c4:	08007a04 	.word	0x08007a04
 80070c8:	08007a04 	.word	0x08007a04
 80070cc:	08007a08 	.word	0x08007a08

080070d0 <memset>:
 80070d0:	4402      	add	r2, r0
 80070d2:	4603      	mov	r3, r0
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d100      	bne.n	80070da <memset+0xa>
 80070d8:	4770      	bx	lr
 80070da:	f803 1b01 	strb.w	r1, [r3], #1
 80070de:	e7f9      	b.n	80070d4 <memset+0x4>

080070e0 <_vsniprintf_r>:
 80070e0:	b530      	push	{r4, r5, lr}
 80070e2:	1e14      	subs	r4, r2, #0
 80070e4:	4605      	mov	r5, r0
 80070e6:	b09b      	sub	sp, #108	; 0x6c
 80070e8:	4618      	mov	r0, r3
 80070ea:	da05      	bge.n	80070f8 <_vsniprintf_r+0x18>
 80070ec:	238b      	movs	r3, #139	; 0x8b
 80070ee:	602b      	str	r3, [r5, #0]
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	b01b      	add	sp, #108	; 0x6c
 80070f6:	bd30      	pop	{r4, r5, pc}
 80070f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007100:	bf14      	ite	ne
 8007102:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007106:	4623      	moveq	r3, r4
 8007108:	9302      	str	r3, [sp, #8]
 800710a:	9305      	str	r3, [sp, #20]
 800710c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007110:	9100      	str	r1, [sp, #0]
 8007112:	9104      	str	r1, [sp, #16]
 8007114:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007118:	4602      	mov	r2, r0
 800711a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800711c:	4669      	mov	r1, sp
 800711e:	4628      	mov	r0, r5
 8007120:	f000 f872 	bl	8007208 <_svfiprintf_r>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	bfbc      	itt	lt
 8007128:	238b      	movlt	r3, #139	; 0x8b
 800712a:	602b      	strlt	r3, [r5, #0]
 800712c:	2c00      	cmp	r4, #0
 800712e:	d0e1      	beq.n	80070f4 <_vsniprintf_r+0x14>
 8007130:	9b00      	ldr	r3, [sp, #0]
 8007132:	2200      	movs	r2, #0
 8007134:	701a      	strb	r2, [r3, #0]
 8007136:	e7dd      	b.n	80070f4 <_vsniprintf_r+0x14>

08007138 <vsniprintf>:
 8007138:	b507      	push	{r0, r1, r2, lr}
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	4613      	mov	r3, r2
 800713e:	460a      	mov	r2, r1
 8007140:	4601      	mov	r1, r0
 8007142:	4803      	ldr	r0, [pc, #12]	; (8007150 <vsniprintf+0x18>)
 8007144:	6800      	ldr	r0, [r0, #0]
 8007146:	f7ff ffcb 	bl	80070e0 <_vsniprintf_r>
 800714a:	b003      	add	sp, #12
 800714c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007150:	2000018c 	.word	0x2000018c

08007154 <__ssputs_r>:
 8007154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007158:	688e      	ldr	r6, [r1, #8]
 800715a:	429e      	cmp	r6, r3
 800715c:	4682      	mov	sl, r0
 800715e:	460c      	mov	r4, r1
 8007160:	4690      	mov	r8, r2
 8007162:	4699      	mov	r9, r3
 8007164:	d837      	bhi.n	80071d6 <__ssputs_r+0x82>
 8007166:	898a      	ldrh	r2, [r1, #12]
 8007168:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800716c:	d031      	beq.n	80071d2 <__ssputs_r+0x7e>
 800716e:	6825      	ldr	r5, [r4, #0]
 8007170:	6909      	ldr	r1, [r1, #16]
 8007172:	1a6f      	subs	r7, r5, r1
 8007174:	6965      	ldr	r5, [r4, #20]
 8007176:	2302      	movs	r3, #2
 8007178:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800717c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007180:	f109 0301 	add.w	r3, r9, #1
 8007184:	443b      	add	r3, r7
 8007186:	429d      	cmp	r5, r3
 8007188:	bf38      	it	cc
 800718a:	461d      	movcc	r5, r3
 800718c:	0553      	lsls	r3, r2, #21
 800718e:	d530      	bpl.n	80071f2 <__ssputs_r+0x9e>
 8007190:	4629      	mov	r1, r5
 8007192:	f000 fb2b 	bl	80077ec <_malloc_r>
 8007196:	4606      	mov	r6, r0
 8007198:	b950      	cbnz	r0, 80071b0 <__ssputs_r+0x5c>
 800719a:	230c      	movs	r3, #12
 800719c:	f8ca 3000 	str.w	r3, [sl]
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071a6:	81a3      	strh	r3, [r4, #12]
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b0:	463a      	mov	r2, r7
 80071b2:	6921      	ldr	r1, [r4, #16]
 80071b4:	f000 faa8 	bl	8007708 <memcpy>
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c2:	81a3      	strh	r3, [r4, #12]
 80071c4:	6126      	str	r6, [r4, #16]
 80071c6:	6165      	str	r5, [r4, #20]
 80071c8:	443e      	add	r6, r7
 80071ca:	1bed      	subs	r5, r5, r7
 80071cc:	6026      	str	r6, [r4, #0]
 80071ce:	60a5      	str	r5, [r4, #8]
 80071d0:	464e      	mov	r6, r9
 80071d2:	454e      	cmp	r6, r9
 80071d4:	d900      	bls.n	80071d8 <__ssputs_r+0x84>
 80071d6:	464e      	mov	r6, r9
 80071d8:	4632      	mov	r2, r6
 80071da:	4641      	mov	r1, r8
 80071dc:	6820      	ldr	r0, [r4, #0]
 80071de:	f000 fa9e 	bl	800771e <memmove>
 80071e2:	68a3      	ldr	r3, [r4, #8]
 80071e4:	1b9b      	subs	r3, r3, r6
 80071e6:	60a3      	str	r3, [r4, #8]
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	441e      	add	r6, r3
 80071ec:	6026      	str	r6, [r4, #0]
 80071ee:	2000      	movs	r0, #0
 80071f0:	e7dc      	b.n	80071ac <__ssputs_r+0x58>
 80071f2:	462a      	mov	r2, r5
 80071f4:	f000 fb54 	bl	80078a0 <_realloc_r>
 80071f8:	4606      	mov	r6, r0
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d1e2      	bne.n	80071c4 <__ssputs_r+0x70>
 80071fe:	6921      	ldr	r1, [r4, #16]
 8007200:	4650      	mov	r0, sl
 8007202:	f000 faa5 	bl	8007750 <_free_r>
 8007206:	e7c8      	b.n	800719a <__ssputs_r+0x46>

08007208 <_svfiprintf_r>:
 8007208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	461d      	mov	r5, r3
 800720e:	898b      	ldrh	r3, [r1, #12]
 8007210:	061f      	lsls	r7, r3, #24
 8007212:	b09d      	sub	sp, #116	; 0x74
 8007214:	4680      	mov	r8, r0
 8007216:	460c      	mov	r4, r1
 8007218:	4616      	mov	r6, r2
 800721a:	d50f      	bpl.n	800723c <_svfiprintf_r+0x34>
 800721c:	690b      	ldr	r3, [r1, #16]
 800721e:	b96b      	cbnz	r3, 800723c <_svfiprintf_r+0x34>
 8007220:	2140      	movs	r1, #64	; 0x40
 8007222:	f000 fae3 	bl	80077ec <_malloc_r>
 8007226:	6020      	str	r0, [r4, #0]
 8007228:	6120      	str	r0, [r4, #16]
 800722a:	b928      	cbnz	r0, 8007238 <_svfiprintf_r+0x30>
 800722c:	230c      	movs	r3, #12
 800722e:	f8c8 3000 	str.w	r3, [r8]
 8007232:	f04f 30ff 	mov.w	r0, #4294967295
 8007236:	e0c8      	b.n	80073ca <_svfiprintf_r+0x1c2>
 8007238:	2340      	movs	r3, #64	; 0x40
 800723a:	6163      	str	r3, [r4, #20]
 800723c:	2300      	movs	r3, #0
 800723e:	9309      	str	r3, [sp, #36]	; 0x24
 8007240:	2320      	movs	r3, #32
 8007242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007246:	2330      	movs	r3, #48	; 0x30
 8007248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800724c:	9503      	str	r5, [sp, #12]
 800724e:	f04f 0b01 	mov.w	fp, #1
 8007252:	4637      	mov	r7, r6
 8007254:	463d      	mov	r5, r7
 8007256:	f815 3b01 	ldrb.w	r3, [r5], #1
 800725a:	b10b      	cbz	r3, 8007260 <_svfiprintf_r+0x58>
 800725c:	2b25      	cmp	r3, #37	; 0x25
 800725e:	d13e      	bne.n	80072de <_svfiprintf_r+0xd6>
 8007260:	ebb7 0a06 	subs.w	sl, r7, r6
 8007264:	d00b      	beq.n	800727e <_svfiprintf_r+0x76>
 8007266:	4653      	mov	r3, sl
 8007268:	4632      	mov	r2, r6
 800726a:	4621      	mov	r1, r4
 800726c:	4640      	mov	r0, r8
 800726e:	f7ff ff71 	bl	8007154 <__ssputs_r>
 8007272:	3001      	adds	r0, #1
 8007274:	f000 80a4 	beq.w	80073c0 <_svfiprintf_r+0x1b8>
 8007278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800727a:	4453      	add	r3, sl
 800727c:	9309      	str	r3, [sp, #36]	; 0x24
 800727e:	783b      	ldrb	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 809d 	beq.w	80073c0 <_svfiprintf_r+0x1b8>
 8007286:	2300      	movs	r3, #0
 8007288:	f04f 32ff 	mov.w	r2, #4294967295
 800728c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007290:	9304      	str	r3, [sp, #16]
 8007292:	9307      	str	r3, [sp, #28]
 8007294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007298:	931a      	str	r3, [sp, #104]	; 0x68
 800729a:	462f      	mov	r7, r5
 800729c:	2205      	movs	r2, #5
 800729e:	f817 1b01 	ldrb.w	r1, [r7], #1
 80072a2:	4850      	ldr	r0, [pc, #320]	; (80073e4 <_svfiprintf_r+0x1dc>)
 80072a4:	f7f8 ff9c 	bl	80001e0 <memchr>
 80072a8:	9b04      	ldr	r3, [sp, #16]
 80072aa:	b9d0      	cbnz	r0, 80072e2 <_svfiprintf_r+0xda>
 80072ac:	06d9      	lsls	r1, r3, #27
 80072ae:	bf44      	itt	mi
 80072b0:	2220      	movmi	r2, #32
 80072b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80072b6:	071a      	lsls	r2, r3, #28
 80072b8:	bf44      	itt	mi
 80072ba:	222b      	movmi	r2, #43	; 0x2b
 80072bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80072c0:	782a      	ldrb	r2, [r5, #0]
 80072c2:	2a2a      	cmp	r2, #42	; 0x2a
 80072c4:	d015      	beq.n	80072f2 <_svfiprintf_r+0xea>
 80072c6:	9a07      	ldr	r2, [sp, #28]
 80072c8:	462f      	mov	r7, r5
 80072ca:	2000      	movs	r0, #0
 80072cc:	250a      	movs	r5, #10
 80072ce:	4639      	mov	r1, r7
 80072d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072d4:	3b30      	subs	r3, #48	; 0x30
 80072d6:	2b09      	cmp	r3, #9
 80072d8:	d94d      	bls.n	8007376 <_svfiprintf_r+0x16e>
 80072da:	b1b8      	cbz	r0, 800730c <_svfiprintf_r+0x104>
 80072dc:	e00f      	b.n	80072fe <_svfiprintf_r+0xf6>
 80072de:	462f      	mov	r7, r5
 80072e0:	e7b8      	b.n	8007254 <_svfiprintf_r+0x4c>
 80072e2:	4a40      	ldr	r2, [pc, #256]	; (80073e4 <_svfiprintf_r+0x1dc>)
 80072e4:	1a80      	subs	r0, r0, r2
 80072e6:	fa0b f000 	lsl.w	r0, fp, r0
 80072ea:	4318      	orrs	r0, r3
 80072ec:	9004      	str	r0, [sp, #16]
 80072ee:	463d      	mov	r5, r7
 80072f0:	e7d3      	b.n	800729a <_svfiprintf_r+0x92>
 80072f2:	9a03      	ldr	r2, [sp, #12]
 80072f4:	1d11      	adds	r1, r2, #4
 80072f6:	6812      	ldr	r2, [r2, #0]
 80072f8:	9103      	str	r1, [sp, #12]
 80072fa:	2a00      	cmp	r2, #0
 80072fc:	db01      	blt.n	8007302 <_svfiprintf_r+0xfa>
 80072fe:	9207      	str	r2, [sp, #28]
 8007300:	e004      	b.n	800730c <_svfiprintf_r+0x104>
 8007302:	4252      	negs	r2, r2
 8007304:	f043 0302 	orr.w	r3, r3, #2
 8007308:	9207      	str	r2, [sp, #28]
 800730a:	9304      	str	r3, [sp, #16]
 800730c:	783b      	ldrb	r3, [r7, #0]
 800730e:	2b2e      	cmp	r3, #46	; 0x2e
 8007310:	d10c      	bne.n	800732c <_svfiprintf_r+0x124>
 8007312:	787b      	ldrb	r3, [r7, #1]
 8007314:	2b2a      	cmp	r3, #42	; 0x2a
 8007316:	d133      	bne.n	8007380 <_svfiprintf_r+0x178>
 8007318:	9b03      	ldr	r3, [sp, #12]
 800731a:	1d1a      	adds	r2, r3, #4
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	9203      	str	r2, [sp, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	bfb8      	it	lt
 8007324:	f04f 33ff 	movlt.w	r3, #4294967295
 8007328:	3702      	adds	r7, #2
 800732a:	9305      	str	r3, [sp, #20]
 800732c:	4d2e      	ldr	r5, [pc, #184]	; (80073e8 <_svfiprintf_r+0x1e0>)
 800732e:	7839      	ldrb	r1, [r7, #0]
 8007330:	2203      	movs	r2, #3
 8007332:	4628      	mov	r0, r5
 8007334:	f7f8 ff54 	bl	80001e0 <memchr>
 8007338:	b138      	cbz	r0, 800734a <_svfiprintf_r+0x142>
 800733a:	2340      	movs	r3, #64	; 0x40
 800733c:	1b40      	subs	r0, r0, r5
 800733e:	fa03 f000 	lsl.w	r0, r3, r0
 8007342:	9b04      	ldr	r3, [sp, #16]
 8007344:	4303      	orrs	r3, r0
 8007346:	3701      	adds	r7, #1
 8007348:	9304      	str	r3, [sp, #16]
 800734a:	7839      	ldrb	r1, [r7, #0]
 800734c:	4827      	ldr	r0, [pc, #156]	; (80073ec <_svfiprintf_r+0x1e4>)
 800734e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007352:	2206      	movs	r2, #6
 8007354:	1c7e      	adds	r6, r7, #1
 8007356:	f7f8 ff43 	bl	80001e0 <memchr>
 800735a:	2800      	cmp	r0, #0
 800735c:	d038      	beq.n	80073d0 <_svfiprintf_r+0x1c8>
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <_svfiprintf_r+0x1e8>)
 8007360:	bb13      	cbnz	r3, 80073a8 <_svfiprintf_r+0x1a0>
 8007362:	9b03      	ldr	r3, [sp, #12]
 8007364:	3307      	adds	r3, #7
 8007366:	f023 0307 	bic.w	r3, r3, #7
 800736a:	3308      	adds	r3, #8
 800736c:	9303      	str	r3, [sp, #12]
 800736e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007370:	444b      	add	r3, r9
 8007372:	9309      	str	r3, [sp, #36]	; 0x24
 8007374:	e76d      	b.n	8007252 <_svfiprintf_r+0x4a>
 8007376:	fb05 3202 	mla	r2, r5, r2, r3
 800737a:	2001      	movs	r0, #1
 800737c:	460f      	mov	r7, r1
 800737e:	e7a6      	b.n	80072ce <_svfiprintf_r+0xc6>
 8007380:	2300      	movs	r3, #0
 8007382:	3701      	adds	r7, #1
 8007384:	9305      	str	r3, [sp, #20]
 8007386:	4619      	mov	r1, r3
 8007388:	250a      	movs	r5, #10
 800738a:	4638      	mov	r0, r7
 800738c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007390:	3a30      	subs	r2, #48	; 0x30
 8007392:	2a09      	cmp	r2, #9
 8007394:	d903      	bls.n	800739e <_svfiprintf_r+0x196>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0c8      	beq.n	800732c <_svfiprintf_r+0x124>
 800739a:	9105      	str	r1, [sp, #20]
 800739c:	e7c6      	b.n	800732c <_svfiprintf_r+0x124>
 800739e:	fb05 2101 	mla	r1, r5, r1, r2
 80073a2:	2301      	movs	r3, #1
 80073a4:	4607      	mov	r7, r0
 80073a6:	e7f0      	b.n	800738a <_svfiprintf_r+0x182>
 80073a8:	ab03      	add	r3, sp, #12
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	4622      	mov	r2, r4
 80073ae:	4b11      	ldr	r3, [pc, #68]	; (80073f4 <_svfiprintf_r+0x1ec>)
 80073b0:	a904      	add	r1, sp, #16
 80073b2:	4640      	mov	r0, r8
 80073b4:	f3af 8000 	nop.w
 80073b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80073bc:	4681      	mov	r9, r0
 80073be:	d1d6      	bne.n	800736e <_svfiprintf_r+0x166>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	065b      	lsls	r3, r3, #25
 80073c4:	f53f af35 	bmi.w	8007232 <_svfiprintf_r+0x2a>
 80073c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073ca:	b01d      	add	sp, #116	; 0x74
 80073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d0:	ab03      	add	r3, sp, #12
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	4622      	mov	r2, r4
 80073d6:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <_svfiprintf_r+0x1ec>)
 80073d8:	a904      	add	r1, sp, #16
 80073da:	4640      	mov	r0, r8
 80073dc:	f000 f882 	bl	80074e4 <_printf_i>
 80073e0:	e7ea      	b.n	80073b8 <_svfiprintf_r+0x1b0>
 80073e2:	bf00      	nop
 80073e4:	080079d0 	.word	0x080079d0
 80073e8:	080079d6 	.word	0x080079d6
 80073ec:	080079da 	.word	0x080079da
 80073f0:	00000000 	.word	0x00000000
 80073f4:	08007155 	.word	0x08007155

080073f8 <_printf_common>:
 80073f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	4691      	mov	r9, r2
 80073fe:	461f      	mov	r7, r3
 8007400:	688a      	ldr	r2, [r1, #8]
 8007402:	690b      	ldr	r3, [r1, #16]
 8007404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007408:	4293      	cmp	r3, r2
 800740a:	bfb8      	it	lt
 800740c:	4613      	movlt	r3, r2
 800740e:	f8c9 3000 	str.w	r3, [r9]
 8007412:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007416:	4606      	mov	r6, r0
 8007418:	460c      	mov	r4, r1
 800741a:	b112      	cbz	r2, 8007422 <_printf_common+0x2a>
 800741c:	3301      	adds	r3, #1
 800741e:	f8c9 3000 	str.w	r3, [r9]
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	0699      	lsls	r1, r3, #26
 8007426:	bf42      	ittt	mi
 8007428:	f8d9 3000 	ldrmi.w	r3, [r9]
 800742c:	3302      	addmi	r3, #2
 800742e:	f8c9 3000 	strmi.w	r3, [r9]
 8007432:	6825      	ldr	r5, [r4, #0]
 8007434:	f015 0506 	ands.w	r5, r5, #6
 8007438:	d107      	bne.n	800744a <_printf_common+0x52>
 800743a:	f104 0a19 	add.w	sl, r4, #25
 800743e:	68e3      	ldr	r3, [r4, #12]
 8007440:	f8d9 2000 	ldr.w	r2, [r9]
 8007444:	1a9b      	subs	r3, r3, r2
 8007446:	42ab      	cmp	r3, r5
 8007448:	dc28      	bgt.n	800749c <_printf_common+0xa4>
 800744a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800744e:	6822      	ldr	r2, [r4, #0]
 8007450:	3300      	adds	r3, #0
 8007452:	bf18      	it	ne
 8007454:	2301      	movne	r3, #1
 8007456:	0692      	lsls	r2, r2, #26
 8007458:	d42d      	bmi.n	80074b6 <_printf_common+0xbe>
 800745a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800745e:	4639      	mov	r1, r7
 8007460:	4630      	mov	r0, r6
 8007462:	47c0      	blx	r8
 8007464:	3001      	adds	r0, #1
 8007466:	d020      	beq.n	80074aa <_printf_common+0xb2>
 8007468:	6823      	ldr	r3, [r4, #0]
 800746a:	68e5      	ldr	r5, [r4, #12]
 800746c:	f8d9 2000 	ldr.w	r2, [r9]
 8007470:	f003 0306 	and.w	r3, r3, #6
 8007474:	2b04      	cmp	r3, #4
 8007476:	bf08      	it	eq
 8007478:	1aad      	subeq	r5, r5, r2
 800747a:	68a3      	ldr	r3, [r4, #8]
 800747c:	6922      	ldr	r2, [r4, #16]
 800747e:	bf0c      	ite	eq
 8007480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007484:	2500      	movne	r5, #0
 8007486:	4293      	cmp	r3, r2
 8007488:	bfc4      	itt	gt
 800748a:	1a9b      	subgt	r3, r3, r2
 800748c:	18ed      	addgt	r5, r5, r3
 800748e:	f04f 0900 	mov.w	r9, #0
 8007492:	341a      	adds	r4, #26
 8007494:	454d      	cmp	r5, r9
 8007496:	d11a      	bne.n	80074ce <_printf_common+0xd6>
 8007498:	2000      	movs	r0, #0
 800749a:	e008      	b.n	80074ae <_printf_common+0xb6>
 800749c:	2301      	movs	r3, #1
 800749e:	4652      	mov	r2, sl
 80074a0:	4639      	mov	r1, r7
 80074a2:	4630      	mov	r0, r6
 80074a4:	47c0      	blx	r8
 80074a6:	3001      	adds	r0, #1
 80074a8:	d103      	bne.n	80074b2 <_printf_common+0xba>
 80074aa:	f04f 30ff 	mov.w	r0, #4294967295
 80074ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b2:	3501      	adds	r5, #1
 80074b4:	e7c3      	b.n	800743e <_printf_common+0x46>
 80074b6:	18e1      	adds	r1, r4, r3
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	2030      	movs	r0, #48	; 0x30
 80074bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074c0:	4422      	add	r2, r4
 80074c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074ca:	3302      	adds	r3, #2
 80074cc:	e7c5      	b.n	800745a <_printf_common+0x62>
 80074ce:	2301      	movs	r3, #1
 80074d0:	4622      	mov	r2, r4
 80074d2:	4639      	mov	r1, r7
 80074d4:	4630      	mov	r0, r6
 80074d6:	47c0      	blx	r8
 80074d8:	3001      	adds	r0, #1
 80074da:	d0e6      	beq.n	80074aa <_printf_common+0xb2>
 80074dc:	f109 0901 	add.w	r9, r9, #1
 80074e0:	e7d8      	b.n	8007494 <_printf_common+0x9c>
	...

080074e4 <_printf_i>:
 80074e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80074ec:	460c      	mov	r4, r1
 80074ee:	7e09      	ldrb	r1, [r1, #24]
 80074f0:	b085      	sub	sp, #20
 80074f2:	296e      	cmp	r1, #110	; 0x6e
 80074f4:	4617      	mov	r7, r2
 80074f6:	4606      	mov	r6, r0
 80074f8:	4698      	mov	r8, r3
 80074fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074fc:	f000 80b3 	beq.w	8007666 <_printf_i+0x182>
 8007500:	d822      	bhi.n	8007548 <_printf_i+0x64>
 8007502:	2963      	cmp	r1, #99	; 0x63
 8007504:	d036      	beq.n	8007574 <_printf_i+0x90>
 8007506:	d80a      	bhi.n	800751e <_printf_i+0x3a>
 8007508:	2900      	cmp	r1, #0
 800750a:	f000 80b9 	beq.w	8007680 <_printf_i+0x19c>
 800750e:	2958      	cmp	r1, #88	; 0x58
 8007510:	f000 8083 	beq.w	800761a <_printf_i+0x136>
 8007514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007518:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800751c:	e032      	b.n	8007584 <_printf_i+0xa0>
 800751e:	2964      	cmp	r1, #100	; 0x64
 8007520:	d001      	beq.n	8007526 <_printf_i+0x42>
 8007522:	2969      	cmp	r1, #105	; 0x69
 8007524:	d1f6      	bne.n	8007514 <_printf_i+0x30>
 8007526:	6820      	ldr	r0, [r4, #0]
 8007528:	6813      	ldr	r3, [r2, #0]
 800752a:	0605      	lsls	r5, r0, #24
 800752c:	f103 0104 	add.w	r1, r3, #4
 8007530:	d52a      	bpl.n	8007588 <_printf_i+0xa4>
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6011      	str	r1, [r2, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	da03      	bge.n	8007542 <_printf_i+0x5e>
 800753a:	222d      	movs	r2, #45	; 0x2d
 800753c:	425b      	negs	r3, r3
 800753e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007542:	486f      	ldr	r0, [pc, #444]	; (8007700 <_printf_i+0x21c>)
 8007544:	220a      	movs	r2, #10
 8007546:	e039      	b.n	80075bc <_printf_i+0xd8>
 8007548:	2973      	cmp	r1, #115	; 0x73
 800754a:	f000 809d 	beq.w	8007688 <_printf_i+0x1a4>
 800754e:	d808      	bhi.n	8007562 <_printf_i+0x7e>
 8007550:	296f      	cmp	r1, #111	; 0x6f
 8007552:	d020      	beq.n	8007596 <_printf_i+0xb2>
 8007554:	2970      	cmp	r1, #112	; 0x70
 8007556:	d1dd      	bne.n	8007514 <_printf_i+0x30>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	f043 0320 	orr.w	r3, r3, #32
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	e003      	b.n	800756a <_printf_i+0x86>
 8007562:	2975      	cmp	r1, #117	; 0x75
 8007564:	d017      	beq.n	8007596 <_printf_i+0xb2>
 8007566:	2978      	cmp	r1, #120	; 0x78
 8007568:	d1d4      	bne.n	8007514 <_printf_i+0x30>
 800756a:	2378      	movs	r3, #120	; 0x78
 800756c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007570:	4864      	ldr	r0, [pc, #400]	; (8007704 <_printf_i+0x220>)
 8007572:	e055      	b.n	8007620 <_printf_i+0x13c>
 8007574:	6813      	ldr	r3, [r2, #0]
 8007576:	1d19      	adds	r1, r3, #4
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6011      	str	r1, [r2, #0]
 800757c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007584:	2301      	movs	r3, #1
 8007586:	e08c      	b.n	80076a2 <_printf_i+0x1be>
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6011      	str	r1, [r2, #0]
 800758c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007590:	bf18      	it	ne
 8007592:	b21b      	sxthne	r3, r3
 8007594:	e7cf      	b.n	8007536 <_printf_i+0x52>
 8007596:	6813      	ldr	r3, [r2, #0]
 8007598:	6825      	ldr	r5, [r4, #0]
 800759a:	1d18      	adds	r0, r3, #4
 800759c:	6010      	str	r0, [r2, #0]
 800759e:	0628      	lsls	r0, r5, #24
 80075a0:	d501      	bpl.n	80075a6 <_printf_i+0xc2>
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	e002      	b.n	80075ac <_printf_i+0xc8>
 80075a6:	0668      	lsls	r0, r5, #25
 80075a8:	d5fb      	bpl.n	80075a2 <_printf_i+0xbe>
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	4854      	ldr	r0, [pc, #336]	; (8007700 <_printf_i+0x21c>)
 80075ae:	296f      	cmp	r1, #111	; 0x6f
 80075b0:	bf14      	ite	ne
 80075b2:	220a      	movne	r2, #10
 80075b4:	2208      	moveq	r2, #8
 80075b6:	2100      	movs	r1, #0
 80075b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075bc:	6865      	ldr	r5, [r4, #4]
 80075be:	60a5      	str	r5, [r4, #8]
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	f2c0 8095 	blt.w	80076f0 <_printf_i+0x20c>
 80075c6:	6821      	ldr	r1, [r4, #0]
 80075c8:	f021 0104 	bic.w	r1, r1, #4
 80075cc:	6021      	str	r1, [r4, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d13d      	bne.n	800764e <_printf_i+0x16a>
 80075d2:	2d00      	cmp	r5, #0
 80075d4:	f040 808e 	bne.w	80076f4 <_printf_i+0x210>
 80075d8:	4665      	mov	r5, ip
 80075da:	2a08      	cmp	r2, #8
 80075dc:	d10b      	bne.n	80075f6 <_printf_i+0x112>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	07db      	lsls	r3, r3, #31
 80075e2:	d508      	bpl.n	80075f6 <_printf_i+0x112>
 80075e4:	6923      	ldr	r3, [r4, #16]
 80075e6:	6862      	ldr	r2, [r4, #4]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	bfde      	ittt	le
 80075ec:	2330      	movle	r3, #48	; 0x30
 80075ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075f6:	ebac 0305 	sub.w	r3, ip, r5
 80075fa:	6123      	str	r3, [r4, #16]
 80075fc:	f8cd 8000 	str.w	r8, [sp]
 8007600:	463b      	mov	r3, r7
 8007602:	aa03      	add	r2, sp, #12
 8007604:	4621      	mov	r1, r4
 8007606:	4630      	mov	r0, r6
 8007608:	f7ff fef6 	bl	80073f8 <_printf_common>
 800760c:	3001      	adds	r0, #1
 800760e:	d14d      	bne.n	80076ac <_printf_i+0x1c8>
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	b005      	add	sp, #20
 8007616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800761a:	4839      	ldr	r0, [pc, #228]	; (8007700 <_printf_i+0x21c>)
 800761c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007620:	6813      	ldr	r3, [r2, #0]
 8007622:	6821      	ldr	r1, [r4, #0]
 8007624:	1d1d      	adds	r5, r3, #4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6015      	str	r5, [r2, #0]
 800762a:	060a      	lsls	r2, r1, #24
 800762c:	d50b      	bpl.n	8007646 <_printf_i+0x162>
 800762e:	07ca      	lsls	r2, r1, #31
 8007630:	bf44      	itt	mi
 8007632:	f041 0120 	orrmi.w	r1, r1, #32
 8007636:	6021      	strmi	r1, [r4, #0]
 8007638:	b91b      	cbnz	r3, 8007642 <_printf_i+0x15e>
 800763a:	6822      	ldr	r2, [r4, #0]
 800763c:	f022 0220 	bic.w	r2, r2, #32
 8007640:	6022      	str	r2, [r4, #0]
 8007642:	2210      	movs	r2, #16
 8007644:	e7b7      	b.n	80075b6 <_printf_i+0xd2>
 8007646:	064d      	lsls	r5, r1, #25
 8007648:	bf48      	it	mi
 800764a:	b29b      	uxthmi	r3, r3
 800764c:	e7ef      	b.n	800762e <_printf_i+0x14a>
 800764e:	4665      	mov	r5, ip
 8007650:	fbb3 f1f2 	udiv	r1, r3, r2
 8007654:	fb02 3311 	mls	r3, r2, r1, r3
 8007658:	5cc3      	ldrb	r3, [r0, r3]
 800765a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800765e:	460b      	mov	r3, r1
 8007660:	2900      	cmp	r1, #0
 8007662:	d1f5      	bne.n	8007650 <_printf_i+0x16c>
 8007664:	e7b9      	b.n	80075da <_printf_i+0xf6>
 8007666:	6813      	ldr	r3, [r2, #0]
 8007668:	6825      	ldr	r5, [r4, #0]
 800766a:	6961      	ldr	r1, [r4, #20]
 800766c:	1d18      	adds	r0, r3, #4
 800766e:	6010      	str	r0, [r2, #0]
 8007670:	0628      	lsls	r0, r5, #24
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	d501      	bpl.n	800767a <_printf_i+0x196>
 8007676:	6019      	str	r1, [r3, #0]
 8007678:	e002      	b.n	8007680 <_printf_i+0x19c>
 800767a:	066a      	lsls	r2, r5, #25
 800767c:	d5fb      	bpl.n	8007676 <_printf_i+0x192>
 800767e:	8019      	strh	r1, [r3, #0]
 8007680:	2300      	movs	r3, #0
 8007682:	6123      	str	r3, [r4, #16]
 8007684:	4665      	mov	r5, ip
 8007686:	e7b9      	b.n	80075fc <_printf_i+0x118>
 8007688:	6813      	ldr	r3, [r2, #0]
 800768a:	1d19      	adds	r1, r3, #4
 800768c:	6011      	str	r1, [r2, #0]
 800768e:	681d      	ldr	r5, [r3, #0]
 8007690:	6862      	ldr	r2, [r4, #4]
 8007692:	2100      	movs	r1, #0
 8007694:	4628      	mov	r0, r5
 8007696:	f7f8 fda3 	bl	80001e0 <memchr>
 800769a:	b108      	cbz	r0, 80076a0 <_printf_i+0x1bc>
 800769c:	1b40      	subs	r0, r0, r5
 800769e:	6060      	str	r0, [r4, #4]
 80076a0:	6863      	ldr	r3, [r4, #4]
 80076a2:	6123      	str	r3, [r4, #16]
 80076a4:	2300      	movs	r3, #0
 80076a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076aa:	e7a7      	b.n	80075fc <_printf_i+0x118>
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	462a      	mov	r2, r5
 80076b0:	4639      	mov	r1, r7
 80076b2:	4630      	mov	r0, r6
 80076b4:	47c0      	blx	r8
 80076b6:	3001      	adds	r0, #1
 80076b8:	d0aa      	beq.n	8007610 <_printf_i+0x12c>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	079b      	lsls	r3, r3, #30
 80076be:	d413      	bmi.n	80076e8 <_printf_i+0x204>
 80076c0:	68e0      	ldr	r0, [r4, #12]
 80076c2:	9b03      	ldr	r3, [sp, #12]
 80076c4:	4298      	cmp	r0, r3
 80076c6:	bfb8      	it	lt
 80076c8:	4618      	movlt	r0, r3
 80076ca:	e7a3      	b.n	8007614 <_printf_i+0x130>
 80076cc:	2301      	movs	r3, #1
 80076ce:	464a      	mov	r2, r9
 80076d0:	4639      	mov	r1, r7
 80076d2:	4630      	mov	r0, r6
 80076d4:	47c0      	blx	r8
 80076d6:	3001      	adds	r0, #1
 80076d8:	d09a      	beq.n	8007610 <_printf_i+0x12c>
 80076da:	3501      	adds	r5, #1
 80076dc:	68e3      	ldr	r3, [r4, #12]
 80076de:	9a03      	ldr	r2, [sp, #12]
 80076e0:	1a9b      	subs	r3, r3, r2
 80076e2:	42ab      	cmp	r3, r5
 80076e4:	dcf2      	bgt.n	80076cc <_printf_i+0x1e8>
 80076e6:	e7eb      	b.n	80076c0 <_printf_i+0x1dc>
 80076e8:	2500      	movs	r5, #0
 80076ea:	f104 0919 	add.w	r9, r4, #25
 80076ee:	e7f5      	b.n	80076dc <_printf_i+0x1f8>
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1ac      	bne.n	800764e <_printf_i+0x16a>
 80076f4:	7803      	ldrb	r3, [r0, #0]
 80076f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076fe:	e76c      	b.n	80075da <_printf_i+0xf6>
 8007700:	080079e1 	.word	0x080079e1
 8007704:	080079f2 	.word	0x080079f2

08007708 <memcpy>:
 8007708:	b510      	push	{r4, lr}
 800770a:	1e43      	subs	r3, r0, #1
 800770c:	440a      	add	r2, r1
 800770e:	4291      	cmp	r1, r2
 8007710:	d100      	bne.n	8007714 <memcpy+0xc>
 8007712:	bd10      	pop	{r4, pc}
 8007714:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800771c:	e7f7      	b.n	800770e <memcpy+0x6>

0800771e <memmove>:
 800771e:	4288      	cmp	r0, r1
 8007720:	b510      	push	{r4, lr}
 8007722:	eb01 0302 	add.w	r3, r1, r2
 8007726:	d807      	bhi.n	8007738 <memmove+0x1a>
 8007728:	1e42      	subs	r2, r0, #1
 800772a:	4299      	cmp	r1, r3
 800772c:	d00a      	beq.n	8007744 <memmove+0x26>
 800772e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007732:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007736:	e7f8      	b.n	800772a <memmove+0xc>
 8007738:	4283      	cmp	r3, r0
 800773a:	d9f5      	bls.n	8007728 <memmove+0xa>
 800773c:	1881      	adds	r1, r0, r2
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	42d3      	cmn	r3, r2
 8007742:	d100      	bne.n	8007746 <memmove+0x28>
 8007744:	bd10      	pop	{r4, pc}
 8007746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800774a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800774e:	e7f7      	b.n	8007740 <memmove+0x22>

08007750 <_free_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4605      	mov	r5, r0
 8007754:	2900      	cmp	r1, #0
 8007756:	d045      	beq.n	80077e4 <_free_r+0x94>
 8007758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800775c:	1f0c      	subs	r4, r1, #4
 800775e:	2b00      	cmp	r3, #0
 8007760:	bfb8      	it	lt
 8007762:	18e4      	addlt	r4, r4, r3
 8007764:	f000 f8d2 	bl	800790c <__malloc_lock>
 8007768:	4a1f      	ldr	r2, [pc, #124]	; (80077e8 <_free_r+0x98>)
 800776a:	6813      	ldr	r3, [r2, #0]
 800776c:	4610      	mov	r0, r2
 800776e:	b933      	cbnz	r3, 800777e <_free_r+0x2e>
 8007770:	6063      	str	r3, [r4, #4]
 8007772:	6014      	str	r4, [r2, #0]
 8007774:	4628      	mov	r0, r5
 8007776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800777a:	f000 b8c8 	b.w	800790e <__malloc_unlock>
 800777e:	42a3      	cmp	r3, r4
 8007780:	d90c      	bls.n	800779c <_free_r+0x4c>
 8007782:	6821      	ldr	r1, [r4, #0]
 8007784:	1862      	adds	r2, r4, r1
 8007786:	4293      	cmp	r3, r2
 8007788:	bf04      	itt	eq
 800778a:	681a      	ldreq	r2, [r3, #0]
 800778c:	685b      	ldreq	r3, [r3, #4]
 800778e:	6063      	str	r3, [r4, #4]
 8007790:	bf04      	itt	eq
 8007792:	1852      	addeq	r2, r2, r1
 8007794:	6022      	streq	r2, [r4, #0]
 8007796:	6004      	str	r4, [r0, #0]
 8007798:	e7ec      	b.n	8007774 <_free_r+0x24>
 800779a:	4613      	mov	r3, r2
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	b10a      	cbz	r2, 80077a4 <_free_r+0x54>
 80077a0:	42a2      	cmp	r2, r4
 80077a2:	d9fa      	bls.n	800779a <_free_r+0x4a>
 80077a4:	6819      	ldr	r1, [r3, #0]
 80077a6:	1858      	adds	r0, r3, r1
 80077a8:	42a0      	cmp	r0, r4
 80077aa:	d10b      	bne.n	80077c4 <_free_r+0x74>
 80077ac:	6820      	ldr	r0, [r4, #0]
 80077ae:	4401      	add	r1, r0
 80077b0:	1858      	adds	r0, r3, r1
 80077b2:	4282      	cmp	r2, r0
 80077b4:	6019      	str	r1, [r3, #0]
 80077b6:	d1dd      	bne.n	8007774 <_free_r+0x24>
 80077b8:	6810      	ldr	r0, [r2, #0]
 80077ba:	6852      	ldr	r2, [r2, #4]
 80077bc:	605a      	str	r2, [r3, #4]
 80077be:	4401      	add	r1, r0
 80077c0:	6019      	str	r1, [r3, #0]
 80077c2:	e7d7      	b.n	8007774 <_free_r+0x24>
 80077c4:	d902      	bls.n	80077cc <_free_r+0x7c>
 80077c6:	230c      	movs	r3, #12
 80077c8:	602b      	str	r3, [r5, #0]
 80077ca:	e7d3      	b.n	8007774 <_free_r+0x24>
 80077cc:	6820      	ldr	r0, [r4, #0]
 80077ce:	1821      	adds	r1, r4, r0
 80077d0:	428a      	cmp	r2, r1
 80077d2:	bf04      	itt	eq
 80077d4:	6811      	ldreq	r1, [r2, #0]
 80077d6:	6852      	ldreq	r2, [r2, #4]
 80077d8:	6062      	str	r2, [r4, #4]
 80077da:	bf04      	itt	eq
 80077dc:	1809      	addeq	r1, r1, r0
 80077de:	6021      	streq	r1, [r4, #0]
 80077e0:	605c      	str	r4, [r3, #4]
 80077e2:	e7c7      	b.n	8007774 <_free_r+0x24>
 80077e4:	bd38      	pop	{r3, r4, r5, pc}
 80077e6:	bf00      	nop
 80077e8:	20000434 	.word	0x20000434

080077ec <_malloc_r>:
 80077ec:	b570      	push	{r4, r5, r6, lr}
 80077ee:	1ccd      	adds	r5, r1, #3
 80077f0:	f025 0503 	bic.w	r5, r5, #3
 80077f4:	3508      	adds	r5, #8
 80077f6:	2d0c      	cmp	r5, #12
 80077f8:	bf38      	it	cc
 80077fa:	250c      	movcc	r5, #12
 80077fc:	2d00      	cmp	r5, #0
 80077fe:	4606      	mov	r6, r0
 8007800:	db01      	blt.n	8007806 <_malloc_r+0x1a>
 8007802:	42a9      	cmp	r1, r5
 8007804:	d903      	bls.n	800780e <_malloc_r+0x22>
 8007806:	230c      	movs	r3, #12
 8007808:	6033      	str	r3, [r6, #0]
 800780a:	2000      	movs	r0, #0
 800780c:	bd70      	pop	{r4, r5, r6, pc}
 800780e:	f000 f87d 	bl	800790c <__malloc_lock>
 8007812:	4a21      	ldr	r2, [pc, #132]	; (8007898 <_malloc_r+0xac>)
 8007814:	6814      	ldr	r4, [r2, #0]
 8007816:	4621      	mov	r1, r4
 8007818:	b991      	cbnz	r1, 8007840 <_malloc_r+0x54>
 800781a:	4c20      	ldr	r4, [pc, #128]	; (800789c <_malloc_r+0xb0>)
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	b91b      	cbnz	r3, 8007828 <_malloc_r+0x3c>
 8007820:	4630      	mov	r0, r6
 8007822:	f000 f863 	bl	80078ec <_sbrk_r>
 8007826:	6020      	str	r0, [r4, #0]
 8007828:	4629      	mov	r1, r5
 800782a:	4630      	mov	r0, r6
 800782c:	f000 f85e 	bl	80078ec <_sbrk_r>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d124      	bne.n	800787e <_malloc_r+0x92>
 8007834:	230c      	movs	r3, #12
 8007836:	6033      	str	r3, [r6, #0]
 8007838:	4630      	mov	r0, r6
 800783a:	f000 f868 	bl	800790e <__malloc_unlock>
 800783e:	e7e4      	b.n	800780a <_malloc_r+0x1e>
 8007840:	680b      	ldr	r3, [r1, #0]
 8007842:	1b5b      	subs	r3, r3, r5
 8007844:	d418      	bmi.n	8007878 <_malloc_r+0x8c>
 8007846:	2b0b      	cmp	r3, #11
 8007848:	d90f      	bls.n	800786a <_malloc_r+0x7e>
 800784a:	600b      	str	r3, [r1, #0]
 800784c:	50cd      	str	r5, [r1, r3]
 800784e:	18cc      	adds	r4, r1, r3
 8007850:	4630      	mov	r0, r6
 8007852:	f000 f85c 	bl	800790e <__malloc_unlock>
 8007856:	f104 000b 	add.w	r0, r4, #11
 800785a:	1d23      	adds	r3, r4, #4
 800785c:	f020 0007 	bic.w	r0, r0, #7
 8007860:	1ac3      	subs	r3, r0, r3
 8007862:	d0d3      	beq.n	800780c <_malloc_r+0x20>
 8007864:	425a      	negs	r2, r3
 8007866:	50e2      	str	r2, [r4, r3]
 8007868:	e7d0      	b.n	800780c <_malloc_r+0x20>
 800786a:	428c      	cmp	r4, r1
 800786c:	684b      	ldr	r3, [r1, #4]
 800786e:	bf16      	itet	ne
 8007870:	6063      	strne	r3, [r4, #4]
 8007872:	6013      	streq	r3, [r2, #0]
 8007874:	460c      	movne	r4, r1
 8007876:	e7eb      	b.n	8007850 <_malloc_r+0x64>
 8007878:	460c      	mov	r4, r1
 800787a:	6849      	ldr	r1, [r1, #4]
 800787c:	e7cc      	b.n	8007818 <_malloc_r+0x2c>
 800787e:	1cc4      	adds	r4, r0, #3
 8007880:	f024 0403 	bic.w	r4, r4, #3
 8007884:	42a0      	cmp	r0, r4
 8007886:	d005      	beq.n	8007894 <_malloc_r+0xa8>
 8007888:	1a21      	subs	r1, r4, r0
 800788a:	4630      	mov	r0, r6
 800788c:	f000 f82e 	bl	80078ec <_sbrk_r>
 8007890:	3001      	adds	r0, #1
 8007892:	d0cf      	beq.n	8007834 <_malloc_r+0x48>
 8007894:	6025      	str	r5, [r4, #0]
 8007896:	e7db      	b.n	8007850 <_malloc_r+0x64>
 8007898:	20000434 	.word	0x20000434
 800789c:	20000438 	.word	0x20000438

080078a0 <_realloc_r>:
 80078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a2:	4607      	mov	r7, r0
 80078a4:	4614      	mov	r4, r2
 80078a6:	460e      	mov	r6, r1
 80078a8:	b921      	cbnz	r1, 80078b4 <_realloc_r+0x14>
 80078aa:	4611      	mov	r1, r2
 80078ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078b0:	f7ff bf9c 	b.w	80077ec <_malloc_r>
 80078b4:	b922      	cbnz	r2, 80078c0 <_realloc_r+0x20>
 80078b6:	f7ff ff4b 	bl	8007750 <_free_r>
 80078ba:	4625      	mov	r5, r4
 80078bc:	4628      	mov	r0, r5
 80078be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c0:	f000 f826 	bl	8007910 <_malloc_usable_size_r>
 80078c4:	42a0      	cmp	r0, r4
 80078c6:	d20f      	bcs.n	80078e8 <_realloc_r+0x48>
 80078c8:	4621      	mov	r1, r4
 80078ca:	4638      	mov	r0, r7
 80078cc:	f7ff ff8e 	bl	80077ec <_malloc_r>
 80078d0:	4605      	mov	r5, r0
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d0f2      	beq.n	80078bc <_realloc_r+0x1c>
 80078d6:	4631      	mov	r1, r6
 80078d8:	4622      	mov	r2, r4
 80078da:	f7ff ff15 	bl	8007708 <memcpy>
 80078de:	4631      	mov	r1, r6
 80078e0:	4638      	mov	r0, r7
 80078e2:	f7ff ff35 	bl	8007750 <_free_r>
 80078e6:	e7e9      	b.n	80078bc <_realloc_r+0x1c>
 80078e8:	4635      	mov	r5, r6
 80078ea:	e7e7      	b.n	80078bc <_realloc_r+0x1c>

080078ec <_sbrk_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4c06      	ldr	r4, [pc, #24]	; (8007908 <_sbrk_r+0x1c>)
 80078f0:	2300      	movs	r3, #0
 80078f2:	4605      	mov	r5, r0
 80078f4:	4608      	mov	r0, r1
 80078f6:	6023      	str	r3, [r4, #0]
 80078f8:	f7f8 fef4 	bl	80006e4 <_sbrk>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_sbrk_r+0x1a>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	b103      	cbz	r3, 8007906 <_sbrk_r+0x1a>
 8007904:	602b      	str	r3, [r5, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	20001384 	.word	0x20001384

0800790c <__malloc_lock>:
 800790c:	4770      	bx	lr

0800790e <__malloc_unlock>:
 800790e:	4770      	bx	lr

08007910 <_malloc_usable_size_r>:
 8007910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007914:	1f18      	subs	r0, r3, #4
 8007916:	2b00      	cmp	r3, #0
 8007918:	bfbc      	itt	lt
 800791a:	580b      	ldrlt	r3, [r1, r0]
 800791c:	18c0      	addlt	r0, r0, r3
 800791e:	4770      	bx	lr

08007920 <_init>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	bf00      	nop
 8007924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007926:	bc08      	pop	{r3}
 8007928:	469e      	mov	lr, r3
 800792a:	4770      	bx	lr

0800792c <_fini>:
 800792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792e:	bf00      	nop
 8007930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007932:	bc08      	pop	{r3}
 8007934:	469e      	mov	lr, r3
 8007936:	4770      	bx	lr
