
IMUDummy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08007c48  08007c48  00017c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d14  08007d14  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08007d14  08007d14  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d14  08007d14  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d14  08007d14  00017d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d18  08007d18  00017d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08007d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001198  200001f0  08007f0c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001388  08007f0c  00021388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ead  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032d0  00000000  00000000  000380cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f68  00000000  00000000  0003b3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de0  00000000  00000000  0003c308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024d03  00000000  00000000  0003d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fb70  00000000  00000000  00061deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce82a  00000000  00000000  0007195b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140185  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004074  00000000  00000000  00140200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c30 	.word	0x08007c30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08007c30 	.word	0x08007c30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fab6 	bl	80007f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f839 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f8f7 	bl	8000480 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000292:	f000 f8b7 	bl	8000404 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000296:	f006 faff 	bl	8006898 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t configured = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	71fb      	strb	r3, [r7, #7]
//				//HAL_Delay(1);
//				//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
//			}
//			configured = 1;
//		}
		HAL_Delay(100);
 800029e:	2064      	movs	r0, #100	; 0x64
 80002a0:	f000 fb1a 	bl	80008d8 <HAL_Delay>


		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2110      	movs	r1, #16
 80002a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ac:	f000 fe02 	bl	8000eb4 <HAL_GPIO_WritePin>
		uint8_t powermanagmentread[1] = { 0 };
 80002b0:	2300      	movs	r3, #0
 80002b2:	713b      	strb	r3, [r7, #4]
		powermanagmentread[0] = (1 << 7 | 0x75);
 80002b4:	23f5      	movs	r3, #245	; 0xf5
 80002b6:	713b      	strb	r3, [r7, #4]
		uint8_t powermanagmentreadrx[1] = { 0 };
 80002b8:	2300      	movs	r3, #0
 80002ba:	703b      	strb	r3, [r7, #0]
		//HAL_SPI_TransmitReceive(&hspi1, powermanagmentread, powermanagmentreadrx, 2, 10000000);
		HAL_SPI_Transmit(&hspi1, powermanagmentread, 1, 10000000);
 80002bc:	1d39      	adds	r1, r7, #4
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <main+0x70>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	480c      	ldr	r0, [pc, #48]	; (80002f4 <main+0x74>)
 80002c4:	f002 ff44 	bl	8003150 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, powermanagmentreadrx, 1, 1000000);
 80002c8:	4639      	mov	r1, r7
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <main+0x78>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	4809      	ldr	r0, [pc, #36]	; (80002f4 <main+0x74>)
 80002d0:	f003 f8a4 	bl	800341c <HAL_SPI_Receive>
		//HAL_Delay(1);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f000 fdea 	bl	8000eb4 <HAL_GPIO_WritePin>
		UsbPrint("Tx: %x; Rx: %x\n", powermanagmentread[0],  powermanagmentreadrx[0]);
 80002e0:	793b      	ldrb	r3, [r7, #4]
 80002e2:	4619      	mov	r1, r3
 80002e4:	783b      	ldrb	r3, [r7, #0]
 80002e6:	461a      	mov	r2, r3
 80002e8:	4804      	ldr	r0, [pc, #16]	; (80002fc <main+0x7c>)
 80002ea:	f000 f8f9 	bl	80004e0 <UsbPrint>
	{
 80002ee:	e7d6      	b.n	800029e <main+0x1e>
 80002f0:	00989680 	.word	0x00989680
 80002f4:	2000043c 	.word	0x2000043c
 80002f8:	000f4240 	.word	0x000f4240
 80002fc:	08007c48 	.word	0x08007c48

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b0ae      	sub	sp, #184	; 0xb8
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800030a:	2244      	movs	r2, #68	; 0x44
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f007 f866 	bl	80073e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000324:	463b      	mov	r3, r7
 8000326:	2260      	movs	r2, #96	; 0x60
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f007 f858 	bl	80073e0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000330:	2310      	movs	r3, #16
 8000332:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000334:	2301      	movs	r3, #1
 8000336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000340:	2360      	movs	r3, #96	; 0x60
 8000342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000346:	2302      	movs	r3, #2
 8000348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800034c:	2301      	movs	r3, #1
 800034e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000352:	2301      	movs	r3, #1
 8000354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000358:	2328      	movs	r3, #40	; 0x28
 800035a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800035e:	2307      	movs	r3, #7
 8000360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000364:	2302      	movs	r3, #2
 8000366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800036a:	2302      	movs	r3, #2
 800036c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000374:	4618      	mov	r0, r3
 8000376:	f001 fd73 	bl	8001e60 <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000380:	f000 f8f6 	bl	8000570 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	2303      	movs	r3, #3
 800038a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000398:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800039c:	2104      	movs	r1, #4
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 f94c 	bl	800263c <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003aa:	f000 f8e1 	bl	8000570 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80003b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80003b8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80003ba:	2301      	movs	r3, #1
 80003bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80003be:	2301      	movs	r3, #1
 80003c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80003c2:	2318      	movs	r3, #24
 80003c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80003c6:	2307      	movs	r3, #7
 80003c8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003ca:	2302      	movs	r3, #2
 80003cc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80003d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003d6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d8:	463b      	mov	r3, r7
 80003da:	4618      	mov	r0, r3
 80003dc:	f002 fafa 	bl	80029d4 <HAL_RCCEx_PeriphCLKConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0xea>
  {
    Error_Handler();
 80003e6:	f000 f8c3 	bl	8000570 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ee:	f001 fcd1 	bl	8001d94 <HAL_PWREx_ControlVoltageScaling>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80003f8:	f000 f8ba 	bl	8000570 <Error_Handler>
  }
}
 80003fc:	bf00      	nop
 80003fe:	37b8      	adds	r7, #184	; 0xb8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <MX_SPI1_Init+0x74>)
 800040a:	4a1c      	ldr	r2, [pc, #112]	; (800047c <MX_SPI1_Init+0x78>)
 800040c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800040e:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <MX_SPI1_Init+0x74>)
 8000410:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000414:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000416:	4b18      	ldr	r3, [pc, #96]	; (8000478 <MX_SPI1_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <MX_SPI1_Init+0x74>)
 800041e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000422:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_SPI1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <MX_SPI1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_SPI1_Init+0x74>)
 8000432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000436:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_SPI1_Init+0x74>)
 800043a:	2220      	movs	r2, #32
 800043c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_SPI1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_SPI1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_SPI1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_SPI1_Init+0x74>)
 8000452:	2207      	movs	r2, #7
 8000454:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_SPI1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_SPI1_Init+0x74>)
 800045e:	2208      	movs	r2, #8
 8000460:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_SPI1_Init+0x74>)
 8000464:	f002 fdea 	bl	800303c <HAL_SPI_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800046e:	f000 f87f 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	2000043c 	.word	0x2000043c
 800047c:	40013000 	.word	0x40013000

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
 8000492:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_GPIO_Init+0x5c>)
 8000496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000498:	4a10      	ldr	r2, [pc, #64]	; (80004dc <MX_GPIO_Init+0x5c>)
 800049a:	f043 0301 	orr.w	r3, r3, #1
 800049e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_GPIO_Init+0x5c>)
 80004a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a4:	f003 0301 	and.w	r3, r3, #1
 80004a8:	603b      	str	r3, [r7, #0]
 80004aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2110      	movs	r1, #16
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b4:	f000 fcfe 	bl	8000eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004b8:	2310      	movs	r3, #16
 80004ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	2301      	movs	r3, #1
 80004be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	2300      	movs	r3, #0
 80004c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	4619      	mov	r1, r3
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d0:	f000 fb76 	bl	8000bc0 <HAL_GPIO_Init>

}
 80004d4:	bf00      	nop
 80004d6:	3718      	adds	r7, #24
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40021000 	.word	0x40021000

080004e0 <UsbPrint>:

/* USER CODE BEGIN 4 */
void UsbPrint(const char *format, ...) {
 80004e0:	b40f      	push	{r0, r1, r2, r3}
 80004e2:	b5b0      	push	{r4, r5, r7, lr}
 80004e4:	b084      	sub	sp, #16
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	466b      	mov	r3, sp
 80004ea:	461d      	mov	r5, r3
	int PRINT_BUFFER_LEN = 200;
 80004ec:	23c8      	movs	r3, #200	; 0xc8
 80004ee:	60fb      	str	r3, [r7, #12]
	char print_buffer[PRINT_BUFFER_LEN];
 80004f0:	68f8      	ldr	r0, [r7, #12]
 80004f2:	1e43      	subs	r3, r0, #1
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	4603      	mov	r3, r0
 80004f8:	4619      	mov	r1, r3
 80004fa:	f04f 0200 	mov.w	r2, #0
 80004fe:	f04f 0300 	mov.w	r3, #0
 8000502:	f04f 0400 	mov.w	r4, #0
 8000506:	00d4      	lsls	r4, r2, #3
 8000508:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800050c:	00cb      	lsls	r3, r1, #3
 800050e:	4603      	mov	r3, r0
 8000510:	4619      	mov	r1, r3
 8000512:	f04f 0200 	mov.w	r2, #0
 8000516:	f04f 0300 	mov.w	r3, #0
 800051a:	f04f 0400 	mov.w	r4, #0
 800051e:	00d4      	lsls	r4, r2, #3
 8000520:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000524:	00cb      	lsls	r3, r1, #3
 8000526:	4603      	mov	r3, r0
 8000528:	3307      	adds	r3, #7
 800052a:	08db      	lsrs	r3, r3, #3
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	ebad 0d03 	sub.w	sp, sp, r3
 8000532:	466b      	mov	r3, sp
 8000534:	3300      	adds	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
	va_list argptr;
	va_start(argptr, format);
 8000538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053c:	603b      	str	r3, [r7, #0]
	vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	68f9      	ldr	r1, [r7, #12]
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	6a3a      	ldr	r2, [r7, #32]
 8000546:	f006 ff7f 	bl	8007448 <vsniprintf>
	va_end(argptr);
	CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 800054a:	687c      	ldr	r4, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff fe3e 	bl	80001d0 <strlen>
 8000554:	4603      	mov	r3, r0
 8000556:	b29b      	uxth	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	4620      	mov	r0, r4
 800055c:	f006 fa5a 	bl	8006a14 <CDC_Transmit_FS>
 8000560:	46ad      	mov	sp, r5
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800056c:	b004      	add	sp, #16
 800056e:	4770      	bx	lr

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_MspInit+0x44>)
 8000588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <HAL_MspInit+0x44>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6613      	str	r3, [r2, #96]	; 0x60
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_MspInit+0x44>)
 8000594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_MspInit+0x44>)
 80005a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a2:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <HAL_MspInit+0x44>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a8:	6593      	str	r3, [r2, #88]	; 0x58
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_MspInit+0x44>)
 80005ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <HAL_SPI_MspInit+0x8c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d130      	bne.n	800064c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <HAL_SPI_MspInit+0x90>)
 80005ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ee:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <HAL_SPI_MspInit+0x90>)
 80005f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005f4:	6613      	str	r3, [r2, #96]	; 0x60
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <HAL_SPI_MspInit+0x90>)
 80005f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_SPI_MspInit+0x90>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a14      	ldr	r2, [pc, #80]	; (8000658 <HAL_SPI_MspInit+0x90>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_SPI_MspInit+0x90>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800061a:	23c2      	movs	r3, #194	; 0xc2
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061e:	2302      	movs	r3, #2
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000626:	2303      	movs	r3, #3
 8000628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800062a:	2305      	movs	r3, #5
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f000 fac2 	bl	8000bc0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	2100      	movs	r1, #0
 8000640:	2023      	movs	r0, #35	; 0x23
 8000642:	f000 fa46 	bl	8000ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000646:	2023      	movs	r0, #35	; 0x23
 8000648:	f000 fa5f 	bl	8000b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40013000 	.word	0x40013000
 8000658:	40021000 	.word	0x40021000

0800065c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler+0x4>

08000676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <BusFault_Handler+0x4>

0800067c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <UsageFault_Handler+0x4>

08000682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b0:	f000 f8f4 	bl	800089c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <SPI1_IRQHandler+0x10>)
 80006be:	f003 f9e9 	bl	8003a94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2000043c 	.word	0x2000043c

080006cc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <USB_IRQHandler+0x10>)
 80006d2:	f000 fd11 	bl	80010f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20001110 	.word	0x20001110

080006e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <_sbrk+0x50>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d102      	bne.n	80006f6 <_sbrk+0x16>
		heap_end = &end;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <_sbrk+0x50>)
 80006f2:	4a10      	ldr	r2, [pc, #64]	; (8000734 <_sbrk+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <_sbrk+0x50>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <_sbrk+0x50>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	466a      	mov	r2, sp
 8000706:	4293      	cmp	r3, r2
 8000708:	d907      	bls.n	800071a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800070a:	f006 fe3f 	bl	800738c <__errno>
 800070e:	4602      	mov	r2, r0
 8000710:	230c      	movs	r3, #12
 8000712:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	e006      	b.n	8000728 <_sbrk+0x48>
	}

	heap_end += incr;
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <_sbrk+0x50>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	4a03      	ldr	r2, [pc, #12]	; (8000730 <_sbrk+0x50>)
 8000724:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000726:	68fb      	ldr	r3, [r7, #12]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000020c 	.word	0x2000020c
 8000734:	20001388 	.word	0x20001388

08000738 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <SystemInit+0x64>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <SystemInit+0x64>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <SystemInit+0x68>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <SystemInit+0x68>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <SystemInit+0x68>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <SystemInit+0x68>)
 8000764:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000768:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800076c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <SystemInit+0x68>)
 8000770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000774:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <SystemInit+0x68>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <SystemInit+0x68>)
 800077c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000780:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <SystemInit+0x68>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <SystemInit+0x64>)
 800078a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078e:	609a      	str	r2, [r3, #8]
#endif
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	40021000 	.word	0x40021000

080007a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007aa:	e003      	b.n	80007b4 <LoopCopyDataInit>

080007ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007b2:	3104      	adds	r1, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007bc:	d3f6      	bcc.n	80007ac <CopyDataInit>
	ldr	r2, =_sbss
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80007c0:	e002      	b.n	80007c8 <LoopFillZerobss>

080007c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007c4:	f842 3b04 	str.w	r3, [r2], #4

080007c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <LoopForever+0x16>)
	cmp	r2, r3
 80007ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007cc:	d3f9      	bcc.n	80007c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ce:	f7ff ffb3 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d2:	f006 fde1 	bl	8007398 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007d6:	f7ff fd53 	bl	8000280 <main>

080007da <LoopForever>:

LoopForever:
    b LoopForever
 80007da:	e7fe      	b.n	80007da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007dc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80007e0:	08007d1c 	.word	0x08007d1c
	ldr	r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007e8:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 80007ec:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 80007f0:	20001388 	.word	0x20001388

080007f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC1_IRQHandler>

080007f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007fc:	2300      	movs	r3, #0
 80007fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000800:	2003      	movs	r0, #3
 8000802:	f000 f95b 	bl	8000abc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000806:	2000      	movs	r0, #0
 8000808:	f000 f80e 	bl	8000828 <HAL_InitTick>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	e001      	b.n	800081c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000818:	f7ff feb2 	bl	8000580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800081c:	79fb      	ldrb	r3, [r7, #7]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <HAL_InitTick+0x68>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d022      	beq.n	8000882 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_InitTick+0x6c>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <HAL_InitTick+0x68>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000848:	fbb1 f3f3 	udiv	r3, r1, r3
 800084c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f968 	bl	8000b26 <HAL_SYSTICK_Config>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d10f      	bne.n	800087c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b0f      	cmp	r3, #15
 8000860:	d809      	bhi.n	8000876 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000862:	2200      	movs	r2, #0
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	f04f 30ff 	mov.w	r0, #4294967295
 800086a:	f000 f932 	bl	8000ad2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <HAL_InitTick+0x70>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	e007      	b.n	8000886 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	e004      	b.n	8000886 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e001      	b.n	8000886 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000886:	7bfb      	ldrb	r3, [r7, #15]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000008 	.word	0x20000008
 8000894:	20000000 	.word	0x20000000
 8000898:	20000004 	.word	0x20000004

0800089c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_IncTick+0x1c>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x20>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a03      	ldr	r2, [pc, #12]	; (80008b8 <HAL_IncTick+0x1c>)
 80008ac:	6013      	str	r3, [r2, #0]
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	200004a0 	.word	0x200004a0
 80008bc:	20000008 	.word	0x20000008

080008c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return uwTick;
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <HAL_GetTick+0x14>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	200004a0 	.word	0x200004a0

080008d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e0:	f7ff ffee 	bl	80008c0 <HAL_GetTick>
 80008e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f0:	d004      	beq.n	80008fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_Delay+0x40>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	4413      	add	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008fc:	bf00      	nop
 80008fe:	f7ff ffdf 	bl	80008c0 <HAL_GetTick>
 8000902:	4602      	mov	r2, r0
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	429a      	cmp	r2, r3
 800090c:	d8f7      	bhi.n	80008fe <HAL_Delay+0x26>
  {
  }
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000008 	.word	0x20000008

0800091c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <__NVIC_SetPriorityGrouping+0x44>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000938:	4013      	ands	r3, r2
 800093a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800094e:	4a04      	ldr	r2, [pc, #16]	; (8000960 <__NVIC_SetPriorityGrouping+0x44>)
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	60d3      	str	r3, [r2, #12]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <__NVIC_GetPriorityGrouping+0x18>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	f003 0307 	and.w	r3, r3, #7
}
 8000972:	4618      	mov	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	2b00      	cmp	r3, #0
 8000990:	db0b      	blt.n	80009aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f003 021f 	and.w	r2, r3, #31
 8000998:	4907      	ldr	r1, [pc, #28]	; (80009b8 <__NVIC_EnableIRQ+0x38>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	095b      	lsrs	r3, r3, #5
 80009a0:	2001      	movs	r0, #1
 80009a2:	fa00 f202 	lsl.w	r2, r0, r2
 80009a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000e100 	.word	0xe000e100

080009bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	db0a      	blt.n	80009e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	490c      	ldr	r1, [pc, #48]	; (8000a08 <__NVIC_SetPriority+0x4c>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	0112      	lsls	r2, r2, #4
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	440b      	add	r3, r1
 80009e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e4:	e00a      	b.n	80009fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4908      	ldr	r1, [pc, #32]	; (8000a0c <__NVIC_SetPriority+0x50>)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	3b04      	subs	r3, #4
 80009f4:	0112      	lsls	r2, r2, #4
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	440b      	add	r3, r1
 80009fa:	761a      	strb	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b089      	sub	sp, #36	; 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f1c3 0307 	rsb	r3, r3, #7
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	bf28      	it	cs
 8000a2e:	2304      	movcs	r3, #4
 8000a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3304      	adds	r3, #4
 8000a36:	2b06      	cmp	r3, #6
 8000a38:	d902      	bls.n	8000a40 <NVIC_EncodePriority+0x30>
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3b03      	subs	r3, #3
 8000a3e:	e000      	b.n	8000a42 <NVIC_EncodePriority+0x32>
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	f04f 32ff 	mov.w	r2, #4294967295
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	401a      	ands	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43d9      	mvns	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	4313      	orrs	r3, r2
         );
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3724      	adds	r7, #36	; 0x24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a88:	d301      	bcc.n	8000a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00f      	b.n	8000aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <SysTick_Config+0x40>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a96:	210f      	movs	r1, #15
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f7ff ff8e 	bl	80009bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <SysTick_Config+0x40>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <SysTick_Config+0x40>)
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	e000e010 	.word	0xe000e010

08000abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ff29 	bl	800091c <__NVIC_SetPriorityGrouping>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae4:	f7ff ff3e 	bl	8000964 <__NVIC_GetPriorityGrouping>
 8000ae8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	6978      	ldr	r0, [r7, #20]
 8000af0:	f7ff ff8e 	bl	8000a10 <NVIC_EncodePriority>
 8000af4:	4602      	mov	r2, r0
 8000af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afa:	4611      	mov	r1, r2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff5d 	bl	80009bc <__NVIC_SetPriority>
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff31 	bl	8000980 <__NVIC_EnableIRQ>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ffa2 	bl	8000a78 <SysTick_Config>
 8000b34:	4603      	mov	r3, r0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d005      	beq.n	8000b62 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2204      	movs	r2, #4
 8000b5a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e029      	b.n	8000bb6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 020e 	bic.w	r2, r2, #14
 8000b70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 0201 	bic.w	r2, r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f003 021c 	and.w	r2, r3, #28
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fa01 f202 	lsl.w	r2, r1, r2
 8000b94:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	4798      	blx	r3
    }
  }
  return status;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bce:	e154      	b.n	8000e7a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 8146 	beq.w	8000e74 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x38>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b12      	cmp	r3, #18
 8000bf6:	d123      	bne.n	8000c40 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	08da      	lsrs	r2, r3, #3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3208      	adds	r2, #8
 8000c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f003 0307 	and.w	r3, r3, #7
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	220f      	movs	r2, #15
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	691a      	ldr	r2, [r3, #16]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	08da      	lsrs	r2, r3, #3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3208      	adds	r2, #8
 8000c3a:	6939      	ldr	r1, [r7, #16]
 8000c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 0203 	and.w	r2, r3, #3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d00b      	beq.n	8000c94 <HAL_GPIO_Init+0xd4>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d007      	beq.n	8000c94 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c88:	2b11      	cmp	r3, #17
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b12      	cmp	r3, #18
 8000c92:	d130      	bne.n	8000cf6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cca:	2201      	movs	r2, #1
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	091b      	lsrs	r3, r3, #4
 8000ce0:	f003 0201 	and.w	r2, r3, #1
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 80a0 	beq.w	8000e74 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d34:	4b58      	ldr	r3, [pc, #352]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d38:	4a57      	ldr	r2, [pc, #348]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6613      	str	r3, [r2, #96]	; 0x60
 8000d40:	4b55      	ldr	r3, [pc, #340]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d4c:	4a53      	ldr	r2, [pc, #332]	; (8000e9c <HAL_GPIO_Init+0x2dc>)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	220f      	movs	r2, #15
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d76:	d019      	beq.n	8000dac <HAL_GPIO_Init+0x1ec>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a49      	ldr	r2, [pc, #292]	; (8000ea0 <HAL_GPIO_Init+0x2e0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d013      	beq.n	8000da8 <HAL_GPIO_Init+0x1e8>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a48      	ldr	r2, [pc, #288]	; (8000ea4 <HAL_GPIO_Init+0x2e4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d00d      	beq.n	8000da4 <HAL_GPIO_Init+0x1e4>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a47      	ldr	r2, [pc, #284]	; (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d007      	beq.n	8000da0 <HAL_GPIO_Init+0x1e0>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a46      	ldr	r2, [pc, #280]	; (8000eac <HAL_GPIO_Init+0x2ec>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d101      	bne.n	8000d9c <HAL_GPIO_Init+0x1dc>
 8000d98:	2304      	movs	r3, #4
 8000d9a:	e008      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000d9c:	2307      	movs	r3, #7
 8000d9e:	e006      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da0:	2303      	movs	r3, #3
 8000da2:	e004      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da4:	2302      	movs	r3, #2
 8000da6:	e002      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000dac:	2300      	movs	r3, #0
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	f002 0203 	and.w	r2, r2, #3
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	4093      	lsls	r3, r2
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dbe:	4937      	ldr	r1, [pc, #220]	; (8000e9c <HAL_GPIO_Init+0x2dc>)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dcc:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000df0:	4a2f      	ldr	r2, [pc, #188]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000df6:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e1a:	4a25      	ldr	r2, [pc, #148]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e44:	4a1a      	ldr	r2, [pc, #104]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f47f aea3 	bne.w	8000bd0 <HAL_GPIO_Init+0x10>
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	371c      	adds	r7, #28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	48000800 	.word	0x48000800
 8000ea8:	48000c00 	.word	0x48000c00
 8000eac:	48001000 	.word	0x48001000
 8000eb0:	40010400 	.word	0x40010400

08000eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec4:	787b      	ldrb	r3, [r7, #1]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	b08b      	sub	sp, #44	; 0x2c
 8000ee8:	af06      	add	r7, sp, #24
 8000eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e0da      	b.n	80010ac <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d106      	bne.n	8000f10 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f005 fec8 	bl	8006ca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2203      	movs	r2, #3
 8000f14:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f003 f876 	bl	800400e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	687e      	ldr	r6, [r7, #4]
 8000f2a:	466d      	mov	r5, sp
 8000f2c:	f106 0410 	add.w	r4, r6, #16
 8000f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	602b      	str	r3, [r5, #0]
 8000f38:	1d33      	adds	r3, r6, #4
 8000f3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f003 f83d 	bl	8003fbc <USB_CoreInit>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e0ab      	b.n	80010ac <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 f874 	bl	8004048 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	e035      	b.n	8000fd2 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	015b      	lsls	r3, r3, #5
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3329      	adds	r3, #41	; 0x29
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	015b      	lsls	r3, r3, #5
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3328      	adds	r3, #40	; 0x28
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	b291      	uxth	r1, r2
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	015b      	lsls	r3, r3, #5
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3336      	adds	r3, #54	; 0x36
 8000f90:	460a      	mov	r2, r1
 8000f92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	015b      	lsls	r3, r3, #5
 8000f9a:	4413      	add	r3, r2
 8000f9c:	332b      	adds	r3, #43	; 0x2b
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	015b      	lsls	r3, r3, #5
 8000fa8:	4413      	add	r3, r2
 8000faa:	3338      	adds	r3, #56	; 0x38
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	015b      	lsls	r3, r3, #5
 8000fb6:	4413      	add	r3, r2
 8000fb8:	333c      	adds	r3, #60	; 0x3c
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	015b      	lsls	r3, r3, #5
 8000fc6:	4413      	add	r3, r2
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3c4      	bcc.n	8000f66 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e031      	b.n	8001046 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	015b      	lsls	r3, r3, #5
 8000fe8:	4413      	add	r3, r2
 8000fea:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	015b      	lsls	r3, r3, #5
 8001008:	4413      	add	r3, r2
 800100a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	015b      	lsls	r3, r3, #5
 8001018:	4413      	add	r3, r2
 800101a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	4413      	add	r3, r2
 800102a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	330a      	adds	r3, #10
 8001038:	015b      	lsls	r3, r3, #5
 800103a:	4413      	add	r3, r2
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	3301      	adds	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3c8      	bcc.n	8000fe2 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	687e      	ldr	r6, [r7, #4]
 8001058:	466d      	mov	r5, sp
 800105a:	f106 0410 	add.w	r4, r6, #16
 800105e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	602b      	str	r3, [r5, #0]
 8001066:	1d33      	adds	r3, r6, #4
 8001068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800106a:	6838      	ldr	r0, [r7, #0]
 800106c:	f002 fff9 	bl	8004062 <USB_DevInit>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2202      	movs	r2, #2
 800107a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e014      	b.n	80010ac <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d102      	bne.n	80010a0 <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 fe41 	bl	8001d22 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 f82e 	bl	8005106 <USB_DevDisconnect>

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d101      	bne.n	80010ca <HAL_PCD_Start+0x16>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e012      	b.n	80010f0 <HAL_PCD_Start+0x3c>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fffe 	bl	80050d8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 ff7c 	bl	8003fde <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f004 f813 	bl	8005130 <USB_ReadInterrupts>
 800110a:	4603      	mov	r3, r0
 800110c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001114:	d102      	bne.n	800111c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 fb3e 	bl	8001798 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f004 f805 	bl	8005130 <USB_ReadInterrupts>
 8001126:	4603      	mov	r3, r0
 8001128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001130:	d112      	bne.n	8001158 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800113a:	b29a      	uxth	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001144:	b292      	uxth	r2, r2
 8001146:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f005 fe1d 	bl	8006d8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001150:	2100      	movs	r1, #0
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f929 	bl	80013aa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f003 ffe7 	bl	8005130 <USB_ReadInterrupts>
 8001162:	4603      	mov	r3, r0
 8001164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800116c:	d10b      	bne.n	8001186 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001176:	b29a      	uxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001180:	b292      	uxth	r2, r2
 8001182:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f003 ffd0 	bl	8005130 <USB_ReadInterrupts>
 8001190:	4603      	mov	r3, r0
 8001192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800119a:	d10b      	bne.n	80011b4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011ae:	b292      	uxth	r2, r2
 80011b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 ffb9 	bl	8005130 <USB_ReadInterrupts>
 80011be:	4603      	mov	r3, r0
 80011c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011c8:	d133      	bne.n	8001232 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0204 	bic.w	r2, r2, #4
 80011dc:	b292      	uxth	r2, r2
 80011de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0208 	bic.w	r2, r2, #8
 80011f4:	b292      	uxth	r2, r2
 80011f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8001200:	2b01      	cmp	r3, #1
 8001202:	d107      	bne.n	8001214 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800120c:	2100      	movs	r1, #0
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f006 f868 	bl	80072e4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f005 fdf1 	bl	8006dfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001222:	b29a      	uxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800122c:	b292      	uxth	r2, r2
 800122e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f003 ff7a 	bl	8005130 <USB_ReadInterrupts>
 800123c:	4603      	mov	r3, r0
 800123e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001246:	d131      	bne.n	80012ac <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001250:	b29a      	uxth	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0208 	orr.w	r2, r2, #8
 800125a:	b292      	uxth	r2, r2
 800125c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001272:	b292      	uxth	r2, r2
 8001274:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001280:	b29a      	uxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0204 	orr.w	r2, r2, #4
 800128a:	b292      	uxth	r2, r2
 800128c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f003 ff4b 	bl	8005130 <USB_ReadInterrupts>
 800129a:	4603      	mov	r3, r0
 800129c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012a4:	d002      	beq.n	80012ac <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f005 fd8e 	bl	8006dc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 ff3d 	bl	8005130 <USB_ReadInterrupts>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012bc:	2b80      	cmp	r3, #128	; 0x80
 80012be:	d13f      	bne.n	8001340 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012d2:	b292      	uxth	r2, r2
 80012d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d12b      	bne.n	800133a <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 0204 	orr.w	r2, r2, #4
 80012f4:	b292      	uxth	r2, r2
 80012f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001302:	b29a      	uxth	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0208 	orr.w	r2, r2, #8
 800130c:	b292      	uxth	r2, r2
 800130e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001322:	b29b      	uxth	r3, r3
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001330:	2101      	movs	r1, #1
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f005 ffd6 	bl	80072e4 <HAL_PCDEx_LPM_Callback>
 8001338:	e002      	b.n	8001340 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f005 fd44 	bl	8006dc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f003 fef3 	bl	8005130 <USB_ReadInterrupts>
 800134a:	4603      	mov	r3, r0
 800134c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001354:	d10e      	bne.n	8001374 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800135e:	b29a      	uxth	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001368:	b292      	uxth	r2, r2
 800136a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f005 fcfd 	bl	8006d6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f003 fed9 	bl	8005130 <USB_ReadInterrupts>
 800137e:	4603      	mov	r3, r0
 8001380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001388:	d10b      	bne.n	80013a2 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001392:	b29a      	uxth	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800139c:	b292      	uxth	r2, r2
 800139e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <HAL_PCD_SetAddress+0x1a>
 80013c0:	2302      	movs	r3, #2
 80013c2:	e013      	b.n	80013ec <HAL_PCD_SetAddress+0x42>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	78fa      	ldrb	r2, [r7, #3]
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	78fa      	ldrb	r2, [r7, #3]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fe67 	bl	80050b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	4608      	mov	r0, r1
 80013fe:	4611      	mov	r1, r2
 8001400:	461a      	mov	r2, r3
 8001402:	4603      	mov	r3, r0
 8001404:	70fb      	strb	r3, [r7, #3]
 8001406:	460b      	mov	r3, r1
 8001408:	803b      	strh	r3, [r7, #0]
 800140a:	4613      	mov	r3, r2
 800140c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001416:	2b00      	cmp	r3, #0
 8001418:	da0b      	bge.n	8001432 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	015b      	lsls	r3, r3, #5
 8001422:	3328      	adds	r3, #40	; 0x28
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2201      	movs	r2, #1
 800142e:	705a      	strb	r2, [r3, #1]
 8001430:	e00b      	b.n	800144a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	015b      	lsls	r3, r3, #5
 800143a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	b2da      	uxtb	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001456:	883a      	ldrh	r2, [r7, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	78ba      	ldrb	r2, [r7, #2]
 8001460:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	785b      	ldrb	r3, [r3, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d004      	beq.n	8001474 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b29a      	uxth	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001474:	78bb      	ldrb	r3, [r7, #2]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d102      	bne.n	8001480 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_PCD_EP_Open+0x9a>
 800148a:	2302      	movs	r3, #2
 800148c:	e00e      	b.n	80014ac <HAL_PCD_EP_Open+0xb8>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68f9      	ldr	r1, [r7, #12]
 800149c:	4618      	mov	r0, r3
 800149e:	f002 fe05 	bl	80040ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80014aa:	7afb      	ldrb	r3, [r7, #11]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	da0b      	bge.n	80014e0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	015b      	lsls	r3, r3, #5
 80014d0:	3328      	adds	r3, #40	; 0x28
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	705a      	strb	r2, [r3, #1]
 80014de:	e00b      	b.n	80014f8 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	015b      	lsls	r3, r3, #5
 80014e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	4413      	add	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800150a:	2b01      	cmp	r3, #1
 800150c:	d101      	bne.n	8001512 <HAL_PCD_EP_Close+0x5e>
 800150e:	2302      	movs	r3, #2
 8001510:	e00e      	b.n	8001530 <HAL_PCD_EP_Close+0x7c>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68f9      	ldr	r1, [r7, #12]
 8001520:	4618      	mov	r0, r3
 8001522:	f003 f8ad 	bl	8004680 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	460b      	mov	r3, r1
 8001546:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001548:	7afb      	ldrb	r3, [r7, #11]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	015b      	lsls	r3, r3, #5
 8001550:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2200      	movs	r2, #0
 8001570:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001572:	7afb      	ldrb	r3, [r7, #11]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	b2da      	uxtb	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	2b00      	cmp	r3, #0
 8001586:	d106      	bne.n	8001596 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6979      	ldr	r1, [r7, #20]
 800158e:	4618      	mov	r0, r3
 8001590:	f003 fa0c 	bl	80049ac <USB_EPStartXfer>
 8001594:	e005      	b.n	80015a2 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6979      	ldr	r1, [r7, #20]
 800159c:	4618      	mov	r0, r3
 800159e:	f003 fa05 	bl	80049ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	330a      	adds	r3, #10
 80015c2:	015b      	lsls	r3, r3, #5
 80015c4:	4413      	add	r3, r2
 80015c6:	3304      	adds	r3, #4
 80015c8:	681b      	ldr	r3, [r3, #0]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	460b      	mov	r3, r1
 80015e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	015b      	lsls	r3, r3, #5
 80015ee:	3328      	adds	r3, #40	; 0x28
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2201      	movs	r2, #1
 800160c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800160e:	7afb      	ldrb	r3, [r7, #11]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	b2da      	uxtb	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800161a:	7afb      	ldrb	r3, [r7, #11]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	2b00      	cmp	r3, #0
 8001622:	d106      	bne.n	8001632 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6979      	ldr	r1, [r7, #20]
 800162a:	4618      	mov	r0, r3
 800162c:	f003 f9be 	bl	80049ac <USB_EPStartXfer>
 8001630:	e005      	b.n	800163e <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6979      	ldr	r1, [r7, #20]
 8001638:	4618      	mov	r0, r3
 800163a:	f003 f9b7 	bl	80049ac <USB_EPStartXfer>
  }

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	f003 0207 	and.w	r2, r3, #7
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	d901      	bls.n	8001666 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e046      	b.n	80016f4 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800166a:	2b00      	cmp	r3, #0
 800166c:	da0b      	bge.n	8001686 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	015b      	lsls	r3, r3, #5
 8001676:	3328      	adds	r3, #40	; 0x28
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2201      	movs	r2, #1
 8001682:	705a      	strb	r2, [r3, #1]
 8001684:	e009      	b.n	800169a <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	015b      	lsls	r3, r3, #5
 800168a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2201      	movs	r2, #1
 800169e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_PCD_EP_SetStall+0x72>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e01c      	b.n	80016f4 <HAL_PCD_EP_SetStall+0xac>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68f9      	ldr	r1, [r7, #12]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fc1b 	bl	8004f04 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d108      	bne.n	80016ea <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f003 fd33 	bl	8005150 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	f003 020f 	and.w	r2, r3, #15
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	d901      	bls.n	800171a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e03a      	b.n	8001790 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800171a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800171e:	2b00      	cmp	r3, #0
 8001720:	da0b      	bge.n	800173a <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	015b      	lsls	r3, r3, #5
 800172a:	3328      	adds	r3, #40	; 0x28
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2201      	movs	r2, #1
 8001736:	705a      	strb	r2, [r3, #1]
 8001738:	e00b      	b.n	8001752 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	015b      	lsls	r3, r3, #5
 8001742:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	b2da      	uxtb	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800176a:	2b01      	cmp	r3, #1
 800176c:	d101      	bne.n	8001772 <HAL_PCD_EP_ClrStall+0x76>
 800176e:	2302      	movs	r3, #2
 8001770:	e00e      	b.n	8001790 <HAL_PCD_EP_ClrStall+0x94>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68f9      	ldr	r1, [r7, #12]
 8001780:	4618      	mov	r0, r3
 8001782:	f003 fc01 	bl	8004f88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017a0:	e26f      	b.n	8001c82 <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017aa:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80017ac:	8afb      	ldrh	r3, [r7, #22]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80017b6:	7d7b      	ldrb	r3, [r7, #21]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 8137 	bne.w	8001a2c <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80017be:	8afb      	ldrh	r3, [r7, #22]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d14f      	bne.n	8001868 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80017d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017d8:	b29c      	uxth	r4, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80017e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3328      	adds	r3, #40	; 0x28
 80017ee:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4413      	add	r3, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	4413      	add	r3, r2
 800180a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	441a      	add	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001826:	2100      	movs	r1, #0
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f005 fa89 	bl	8006d40 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8223 	beq.w	8001c82 <PCD_EP_ISR_Handler+0x4ea>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	f040 821e 	bne.w	8001c82 <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001852:	b2da      	uxtb	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	b292      	uxth	r2, r2
 800185a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001866:	e20c      	b.n	8001c82 <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800186e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001878:	8a7b      	ldrh	r3, [r7, #18]
 800187a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800187e:	2b00      	cmp	r3, #0
 8001880:	d031      	beq.n	80018e6 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800188a:	b29b      	uxth	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	4413      	add	r3, r2
 800189c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018bc:	b29b      	uxth	r3, r3
 80018be:	f003 fc94 	bl	80051ea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018ce:	4013      	ands	r3, r2
 80018d0:	b29c      	uxth	r4, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80018da:	b292      	uxth	r2, r2
 80018dc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f005 fa04 	bl	8006cec <HAL_PCD_SetupStageCallback>
 80018e4:	e1cd      	b.n	8001c82 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f280 81c9 	bge.w	8001c82 <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018fc:	4013      	ands	r3, r2
 80018fe:	b29c      	uxth	r4, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001908:	b292      	uxth	r2, r2
 800190a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001914:	b29b      	uxth	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	4413      	add	r3, r2
 8001926:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d019      	beq.n	8001970 <PCD_EP_ISR_Handler+0x1d8>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d015      	beq.n	8001970 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6959      	ldr	r1, [r3, #20]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001954:	b29b      	uxth	r3, r3
 8001956:	f003 fc48 	bl	80051ea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	441a      	add	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001968:	2100      	movs	r1, #0
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f005 f9d0 	bl	8006d10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	461c      	mov	r4, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800197e:	b29b      	uxth	r3, r3
 8001980:	441c      	add	r4, r3
 8001982:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d110      	bne.n	80019b2 <PCD_EP_ISR_Handler+0x21a>
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001998:	b29a      	uxth	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	801a      	strh	r2, [r3, #0]
 80019b0:	e026      	b.n	8001a00 <PCD_EP_ISR_Handler+0x268>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b3d      	cmp	r3, #61	; 0x3d
 80019b8:	d813      	bhi.n	80019e2 <PCD_EP_ISR_Handler+0x24a>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	085b      	lsrs	r3, r3, #1
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <PCD_EP_ISR_Handler+0x23c>
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	029b      	lsls	r3, r3, #10
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	801a      	strh	r2, [r3, #0]
 80019e0:	e00e      	b.n	8001a00 <PCD_EP_ISR_Handler+0x268>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	029b      	lsls	r3, r3, #10
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a10:	b29c      	uxth	r4, r3
 8001a12:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001a16:	b29c      	uxth	r4, r3
 8001a18:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001a1c:	b29c      	uxth	r4, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b9f      	ldr	r3, [pc, #636]	; (8001ca0 <PCD_EP_ISR_Handler+0x508>)
 8001a24:	4323      	orrs	r3, r4
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	8013      	strh	r3, [r2, #0]
 8001a2a:	e12a      	b.n	8001c82 <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	7d7b      	ldrb	r3, [r7, #21]
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f280 80cb 	bge.w	8001bdc <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	7d7b      	ldrb	r3, [r7, #21]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	b29c      	uxth	r4, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	7d7b      	ldrb	r3, [r7, #21]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001a6e:	b292      	uxth	r2, r2
 8001a70:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a72:	7d7b      	ldrb	r3, [r7, #21]
 8001a74:	015b      	lsls	r3, r3, #5
 8001a76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	7b1b      	ldrb	r3, [r3, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d11f      	bne.n	8001ac8 <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aac:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001aae:	8bfb      	ldrh	r3, [r7, #30]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d06e      	beq.n	8001b92 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6959      	ldr	r1, [r3, #20]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	88da      	ldrh	r2, [r3, #6]
 8001ac0:	8bfb      	ldrh	r3, [r7, #30]
 8001ac2:	f003 fb92 	bl	80051ea <USB_ReadPMA>
 8001ac6:	e064      	b.n	8001b92 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d01f      	beq.n	8001b22 <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b06:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001b08:	8bfb      	ldrh	r3, [r7, #30]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d028      	beq.n	8001b60 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6959      	ldr	r1, [r3, #20]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	891a      	ldrh	r2, [r3, #8]
 8001b1a:	8bfb      	ldrh	r3, [r7, #30]
 8001b1c:	f003 fb65 	bl	80051ea <USB_ReadPMA>
 8001b20:	e01e      	b.n	8001b60 <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b46:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001b48:	8bfb      	ldrh	r3, [r7, #30]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d008      	beq.n	8001b60 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6959      	ldr	r1, [r3, #20]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	895a      	ldrh	r2, [r3, #10]
 8001b5a:	8bfb      	ldrh	r3, [r7, #30]
 8001b5c:	f003 fb45 	bl	80051ea <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b7a:	b29c      	uxth	r4, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	441a      	add	r2, r3
 8001b8a:	4b46      	ldr	r3, [pc, #280]	; (8001ca4 <PCD_EP_ISR_Handler+0x50c>)
 8001b8c:	4323      	orrs	r3, r4
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	69da      	ldr	r2, [r3, #28]
 8001b96:	8bfb      	ldrh	r3, [r7, #30]
 8001b98:	441a      	add	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	8bfb      	ldrh	r3, [r7, #30]
 8001ba4:	441a      	add	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <PCD_EP_ISR_Handler+0x424>
 8001bb2:	8bfa      	ldrh	r2, [r7, #30]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d206      	bcs.n	8001bca <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f005 f8a4 	bl	8006d10 <HAL_PCD_DataOutStageCallback>
 8001bc8:	e008      	b.n	8001bdc <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	7819      	ldrb	r1, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff fcae 	bl	8001538 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bdc:	8a7b      	ldrh	r3, [r7, #18]
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d04d      	beq.n	8001c82 <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 8001be6:	7d7b      	ldrb	r3, [r7, #21]
 8001be8:	015b      	lsls	r3, r3, #5
 8001bea:	3328      	adds	r3, #40	; 0x28
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	7d7b      	ldrb	r3, [r7, #21]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0a:	b29c      	uxth	r4, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	7d7b      	ldrb	r3, [r7, #21]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	441a      	add	r2, r3
 8001c18:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	441a      	add	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f005 f869 	bl	8006d40 <HAL_PCD_DataInStageCallback>
 8001c6e:	e008      	b.n	8001c82 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	7819      	ldrb	r1, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff fcaa 	bl	80015d6 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f6ff ad87 	blt.w	80017a2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	; 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	ffff8080 	.word	0xffff8080
 8001ca4:	ffff80c0 	.word	0xffff80c0

08001ca8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	817b      	strh	r3, [r7, #10]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001cba:	897b      	ldrh	r3, [r7, #10]
 8001cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d008      	beq.n	8001cd8 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	015b      	lsls	r3, r3, #5
 8001cce:	3328      	adds	r3, #40	; 0x28
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e006      	b.n	8001ce6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cd8:	897b      	ldrh	r3, [r7, #10]
 8001cda:	015b      	lsls	r3, r3, #5
 8001cdc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001ce6:	893b      	ldrh	r3, [r7, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	80da      	strh	r2, [r3, #6]
 8001cfa:	e00b      	b.n	8001d14 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	0c1b      	lsrs	r3, r3, #16
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40007000 	.word	0x40007000

08001d94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da2:	d130      	bne.n	8001e06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da4:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db0:	d038      	beq.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dba:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2232      	movs	r2, #50	; 0x32
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	0c9b      	lsrs	r3, r3, #18
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dd8:	e002      	b.n	8001de0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dec:	d102      	bne.n	8001df4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f2      	bne.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e00:	d110      	bne.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e00f      	b.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e12:	d007      	beq.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e1c:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40007000 	.word	0x40007000
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	431bde83 	.word	0x431bde83

08001e40 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4e:	6053      	str	r3, [r2, #4]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40007000 	.word	0x40007000

08001e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e3db      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e72:	4ba4      	ldr	r3, [pc, #656]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e7c:	4ba1      	ldr	r3, [pc, #644]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80e1 	beq.w	8002056 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <HAL_RCC_OscConfig+0x4a>
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b0c      	cmp	r3, #12
 8001e9e:	f040 8088 	bne.w	8001fb2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	f040 8084 	bne.w	8001fb2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eaa:	4b96      	ldr	r3, [pc, #600]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x62>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e3b3      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1a      	ldr	r2, [r3, #32]
 8001ec6:	4b8f      	ldr	r3, [pc, #572]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <HAL_RCC_OscConfig+0x7c>
 8001ed2:	4b8c      	ldr	r3, [pc, #560]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eda:	e005      	b.n	8001ee8 <HAL_RCC_OscConfig+0x88>
 8001edc:	4b89      	ldr	r3, [pc, #548]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d223      	bcs.n	8001f34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fd0f 	bl	8002914 <RCC_SetFlashLatencyFromMSIRange>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e394      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f00:	4b80      	ldr	r3, [pc, #512]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a7f      	ldr	r2, [pc, #508]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b7d      	ldr	r3, [pc, #500]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	497a      	ldr	r1, [pc, #488]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f1e:	4b79      	ldr	r3, [pc, #484]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	4975      	ldr	r1, [pc, #468]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	604b      	str	r3, [r1, #4]
 8001f32:	e022      	b.n	8001f7a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f34:	4b73      	ldr	r3, [pc, #460]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a72      	ldr	r2, [pc, #456]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001f3a:	f043 0308 	orr.w	r3, r3, #8
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b70      	ldr	r3, [pc, #448]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	496d      	ldr	r1, [pc, #436]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f52:	4b6c      	ldr	r3, [pc, #432]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	4968      	ldr	r1, [pc, #416]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fcd2 	bl	8002914 <RCC_SetFlashLatencyFromMSIRange>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e357      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f7a:	f000 fc41 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 8001f7e:	4601      	mov	r1, r0
 8001f80:	4b60      	ldr	r3, [pc, #384]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	4a5f      	ldr	r2, [pc, #380]	; (8002108 <HAL_RCC_OscConfig+0x2a8>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	fa21 f303 	lsr.w	r3, r1, r3
 8001f96:	4a5d      	ldr	r2, [pc, #372]	; (800210c <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f9a:	4b5d      	ldr	r3, [pc, #372]	; (8002110 <HAL_RCC_OscConfig+0x2b0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fc42 	bl	8000828 <HAL_InitTick>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d052      	beq.n	8002054 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	e33b      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d032      	beq.n	8002020 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fba:	4b52      	ldr	r3, [pc, #328]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a51      	ldr	r2, [pc, #324]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fc7b 	bl	80008c0 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fce:	f7fe fc77 	bl	80008c0 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e324      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fe0:	4b48      	ldr	r3, [pc, #288]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fec:	4b45      	ldr	r3, [pc, #276]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a44      	ldr	r2, [pc, #272]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001ff2:	f043 0308 	orr.w	r3, r3, #8
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b42      	ldr	r3, [pc, #264]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	493f      	ldr	r1, [pc, #252]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800200a:	4b3e      	ldr	r3, [pc, #248]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	493a      	ldr	r1, [pc, #232]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
 800201e:	e01a      	b.n	8002056 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002020:	4b38      	ldr	r3, [pc, #224]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a37      	ldr	r2, [pc, #220]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800202c:	f7fe fc48 	bl	80008c0 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002034:	f7fe fc44 	bl	80008c0 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e2f1      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002046:	4b2f      	ldr	r3, [pc, #188]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x1d4>
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002054:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d074      	beq.n	800214c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b08      	cmp	r3, #8
 8002066:	d005      	beq.n	8002074 <HAL_RCC_OscConfig+0x214>
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d10e      	bne.n	800208c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d10b      	bne.n	800208c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	4b23      	ldr	r3, [pc, #140]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d064      	beq.n	800214a <HAL_RCC_OscConfig+0x2ea>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d160      	bne.n	800214a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e2ce      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002094:	d106      	bne.n	80020a4 <HAL_RCC_OscConfig+0x244>
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e01d      	b.n	80020e0 <HAL_RCC_OscConfig+0x280>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x268>
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a14      	ldr	r2, [pc, #80]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a11      	ldr	r2, [pc, #68]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0x280>
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 80020ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_RCC_OscConfig+0x2a4>)
 80020da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01c      	beq.n	8002122 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7fe fbea 	bl	80008c0 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ee:	e011      	b.n	8002114 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f0:	f7fe fbe6 	bl	80008c0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d90a      	bls.n	8002114 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e293      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	08007ca0 	.word	0x08007ca0
 800210c:	20000000 	.word	0x20000000
 8002110:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002114:	4bae      	ldr	r3, [pc, #696]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0e7      	beq.n	80020f0 <HAL_RCC_OscConfig+0x290>
 8002120:	e014      	b.n	800214c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7fe fbcd 	bl	80008c0 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800212a:	f7fe fbc9 	bl	80008c0 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b64      	cmp	r3, #100	; 0x64
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e276      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800213c:	4ba4      	ldr	r3, [pc, #656]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x2ca>
 8002148:	e000      	b.n	800214c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d060      	beq.n	800221a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2b04      	cmp	r3, #4
 800215c:	d005      	beq.n	800216a <HAL_RCC_OscConfig+0x30a>
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	2b0c      	cmp	r3, #12
 8002162:	d119      	bne.n	8002198 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d116      	bne.n	8002198 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216a:	4b99      	ldr	r3, [pc, #612]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x322>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e253      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002182:	4b93      	ldr	r3, [pc, #588]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	061b      	lsls	r3, r3, #24
 8002190:	498f      	ldr	r1, [pc, #572]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002196:	e040      	b.n	800221a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d023      	beq.n	80021e8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a0:	4b8b      	ldr	r3, [pc, #556]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a8a      	ldr	r2, [pc, #552]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 80021a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe fb88 	bl	80008c0 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b4:	f7fe fb84 	bl	80008c0 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e231      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c6:	4b82      	ldr	r3, [pc, #520]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b7f      	ldr	r3, [pc, #508]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	061b      	lsls	r3, r3, #24
 80021e0:	497b      	ldr	r1, [pc, #492]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
 80021e6:	e018      	b.n	800221a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e8:	4b79      	ldr	r3, [pc, #484]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a78      	ldr	r2, [pc, #480]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 80021ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe fb64 	bl	80008c0 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fc:	f7fe fb60 	bl	80008c0 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e20d      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800220e:	4b70      	ldr	r3, [pc, #448]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d03c      	beq.n	80022a0 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01c      	beq.n	8002268 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222e:	4b68      	ldr	r3, [pc, #416]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002234:	4a66      	ldr	r2, [pc, #408]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223e:	f7fe fb3f 	bl	80008c0 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002246:	f7fe fb3b 	bl	80008c0 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e1e8      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002258:	4b5d      	ldr	r3, [pc, #372]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 800225a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0ef      	beq.n	8002246 <HAL_RCC_OscConfig+0x3e6>
 8002266:	e01b      	b.n	80022a0 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002268:	4b59      	ldr	r3, [pc, #356]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 800226a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226e:	4a58      	ldr	r2, [pc, #352]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7fe fb22 	bl	80008c0 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002280:	f7fe fb1e 	bl	80008c0 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e1cb      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002292:	4b4f      	ldr	r3, [pc, #316]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ef      	bne.n	8002280 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80a5 	beq.w	80023f8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022b2:	4b47      	ldr	r3, [pc, #284]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10d      	bne.n	80022da <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	4b44      	ldr	r3, [pc, #272]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	4a43      	ldr	r2, [pc, #268]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ca:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d6:	2301      	movs	r3, #1
 80022d8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022da:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <HAL_RCC_OscConfig+0x574>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d118      	bne.n	8002318 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_RCC_OscConfig+0x574>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a3a      	ldr	r2, [pc, #232]	; (80023d4 <HAL_RCC_OscConfig+0x574>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7fe fae5 	bl	80008c0 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fa:	f7fe fae1 	bl	80008c0 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e18e      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230c:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <HAL_RCC_OscConfig+0x574>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d108      	bne.n	8002332 <HAL_RCC_OscConfig+0x4d2>
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002330:	e024      	b.n	800237c <HAL_RCC_OscConfig+0x51c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d110      	bne.n	800235c <HAL_RCC_OscConfig+0x4fc>
 800233a:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	4a23      	ldr	r2, [pc, #140]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800234a:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 800234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002350:	4a1f      	ldr	r2, [pc, #124]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800235a:	e00f      	b.n	800237c <HAL_RCC_OscConfig+0x51c>
 800235c:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	4a17      	ldr	r2, [pc, #92]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 8002374:	f023 0304 	bic.w	r3, r3, #4
 8002378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d016      	beq.n	80023b2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7fe fa9c 	bl	80008c0 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7fe fa98 	bl	80008c0 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e143      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_OscConfig+0x570>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ed      	beq.n	800238c <HAL_RCC_OscConfig+0x52c>
 80023b0:	e019      	b.n	80023e6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7fe fa85 	bl	80008c0 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b8:	e00e      	b.n	80023d8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe fa81 	bl	80008c0 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d905      	bls.n	80023d8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e12c      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d8:	4b96      	ldr	r3, [pc, #600]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1e9      	bne.n	80023ba <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e6:	7ffb      	ldrb	r3, [r7, #31]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d105      	bne.n	80023f8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ec:	4b91      	ldr	r3, [pc, #580]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	4a90      	ldr	r2, [pc, #576]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 80023f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d03c      	beq.n	800247e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01c      	beq.n	8002446 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800240c:	4b89      	ldr	r3, [pc, #548]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 800240e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002412:	4a88      	ldr	r2, [pc, #544]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7fe fa50 	bl	80008c0 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002424:	f7fe fa4c 	bl	80008c0 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e0f9      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 8002438:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ef      	beq.n	8002424 <HAL_RCC_OscConfig+0x5c4>
 8002444:	e01b      	b.n	800247e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002446:	4b7b      	ldr	r3, [pc, #492]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 8002448:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800244c:	4a79      	ldr	r2, [pc, #484]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7fe fa33 	bl	80008c0 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800245e:	f7fe fa2f 	bl	80008c0 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0dc      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002470:	4b70      	ldr	r3, [pc, #448]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 8002472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1ef      	bne.n	800245e <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80d0 	beq.w	8002628 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	f000 808d 	beq.w	80025aa <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	2b02      	cmp	r3, #2
 8002496:	d15a      	bne.n	800254e <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002498:	4b66      	ldr	r3, [pc, #408]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a65      	ldr	r2, [pc, #404]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 800249e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fa0c 	bl	80008c0 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ac:	f7fe fa08 	bl	80008c0 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e0b5      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024be:	4b5d      	ldr	r3, [pc, #372]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ca:	4b5a      	ldr	r3, [pc, #360]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	4b5a      	ldr	r3, [pc, #360]	; (8002638 <HAL_RCC_OscConfig+0x7d8>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024da:	3a01      	subs	r2, #1
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	4311      	orrs	r1, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024e4:	0212      	lsls	r2, r2, #8
 80024e6:	4311      	orrs	r1, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024ec:	0852      	lsrs	r2, r2, #1
 80024ee:	3a01      	subs	r2, #1
 80024f0:	0552      	lsls	r2, r2, #21
 80024f2:	4311      	orrs	r1, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024f8:	0852      	lsrs	r2, r2, #1
 80024fa:	3a01      	subs	r2, #1
 80024fc:	0652      	lsls	r2, r2, #25
 80024fe:	4311      	orrs	r1, r2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002504:	06d2      	lsls	r2, r2, #27
 8002506:	430a      	orrs	r2, r1
 8002508:	494a      	ldr	r1, [pc, #296]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250e:	4b49      	ldr	r3, [pc, #292]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a48      	ldr	r2, [pc, #288]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 8002514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002518:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800251a:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4a45      	ldr	r2, [pc, #276]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 8002520:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002524:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe f9cb 	bl	80008c0 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252e:	f7fe f9c7 	bl	80008c0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e074      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002540:	4b3c      	ldr	r3, [pc, #240]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x6ce>
 800254c:	e06c      	b.n	8002628 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b39      	ldr	r3, [pc, #228]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a38      	ldr	r2, [pc, #224]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 8002554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002558:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800255a:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d105      	bne.n	8002572 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002566:	4b33      	ldr	r3, [pc, #204]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4a32      	ldr	r2, [pc, #200]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 800256c:	f023 0303 	bic.w	r3, r3, #3
 8002570:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002572:	4b30      	ldr	r3, [pc, #192]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	4a2f      	ldr	r2, [pc, #188]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 8002578:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800257c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002580:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe f99d 	bl	80008c0 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe f999 	bl	80008c0 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e046      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x72a>
 80025a8:	e03e      	b.n	8002628 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e039      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80025b6:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <HAL_RCC_OscConfig+0x7d4>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0203 	and.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d12c      	bne.n	8002624 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	3b01      	subs	r3, #1
 80025d6:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d123      	bne.n	8002624 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e6:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d11b      	bne.n	8002624 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d113      	bne.n	8002624 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	3b01      	subs	r3, #1
 800260a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d109      	bne.n	8002624 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	085b      	lsrs	r3, r3, #1
 800261c:	3b01      	subs	r3, #1
 800261e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	019d808c 	.word	0x019d808c

0800263c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0c8      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002650:	4b66      	ldr	r3, [pc, #408]	; (80027ec <HAL_RCC_ClockConfig+0x1b0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d910      	bls.n	8002680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCC_ClockConfig+0x1b0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 0207 	bic.w	r2, r3, #7
 8002666:	4961      	ldr	r1, [pc, #388]	; (80027ec <HAL_RCC_ClockConfig+0x1b0>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b5f      	ldr	r3, [pc, #380]	; (80027ec <HAL_RCC_ClockConfig+0x1b0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0b0      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d04c      	beq.n	8002726 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d107      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002694:	4b56      	ldr	r3, [pc, #344]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d121      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e09e      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ac:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d115      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e092      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026c4:	4b4a      	ldr	r3, [pc, #296]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e086      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d4:	4b46      	ldr	r3, [pc, #280]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e07e      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026e4:	4b42      	ldr	r3, [pc, #264]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 0203 	bic.w	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	493f      	ldr	r1, [pc, #252]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f6:	f7fe f8e3 	bl	80008c0 <HAL_GetTick>
 80026fa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fe:	f7fe f8df 	bl	80008c0 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e066      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 020c 	and.w	r2, r3, #12
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	429a      	cmp	r2, r3
 8002724:	d1eb      	bne.n	80026fe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002732:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	492c      	ldr	r1, [pc, #176]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002744:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_RCC_ClockConfig+0x1b0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d210      	bcs.n	8002774 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b26      	ldr	r3, [pc, #152]	; (80027ec <HAL_RCC_ClockConfig+0x1b0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0207 	bic.w	r2, r3, #7
 800275a:	4924      	ldr	r1, [pc, #144]	; (80027ec <HAL_RCC_ClockConfig+0x1b0>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b22      	ldr	r3, [pc, #136]	; (80027ec <HAL_RCC_ClockConfig+0x1b0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e036      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4918      	ldr	r1, [pc, #96]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4910      	ldr	r1, [pc, #64]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027b2:	f000 f825 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 80027b6:	4601      	mov	r1, r0
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_RCC_ClockConfig+0x1b4>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	4a0c      	ldr	r2, [pc, #48]	; (80027f4 <HAL_RCC_ClockConfig+0x1b8>)
 80027c4:	5cd3      	ldrb	r3, [r2, r3]
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	fa21 f303 	lsr.w	r3, r1, r3
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe f826 	bl	8000828 <HAL_InitTick>
 80027dc:	4603      	mov	r3, r0
 80027de:	72fb      	strb	r3, [r7, #11]

  return status;
 80027e0:	7afb      	ldrb	r3, [r7, #11]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40021000 	.word	0x40021000
 80027f4:	08007ca0 	.word	0x08007ca0
 80027f8:	20000000 	.word	0x20000000
 80027fc:	20000004 	.word	0x20000004

08002800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280e:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <HAL_RCC_GetSysClockFreq+0x104>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002818:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <HAL_RCC_GetSysClockFreq+0x104>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x34>
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d121      	bne.n	8002872 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d11e      	bne.n	8002872 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002834:	4b33      	ldr	r3, [pc, #204]	; (8002904 <HAL_RCC_GetSysClockFreq+0x104>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002840:	4b30      	ldr	r3, [pc, #192]	; (8002904 <HAL_RCC_GetSysClockFreq+0x104>)
 8002842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002846:	0a1b      	lsrs	r3, r3, #8
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	e005      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002850:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <HAL_RCC_GetSysClockFreq+0x104>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800285c:	4a2a      	ldr	r2, [pc, #168]	; (8002908 <HAL_RCC_GetSysClockFreq+0x108>)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002864:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10d      	bne.n	8002888 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002870:	e00a      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b04      	cmp	r3, #4
 8002876:	d102      	bne.n	800287e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_GetSysClockFreq+0x10c>)
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	e004      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d101      	bne.n	8002888 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002884:	4b22      	ldr	r3, [pc, #136]	; (8002910 <HAL_RCC_GetSysClockFreq+0x110>)
 8002886:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d133      	bne.n	80028f6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_RCC_GetSysClockFreq+0x104>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d002      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0xa4>
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0xaa>
 80028a2:	e005      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_RCC_GetSysClockFreq+0x10c>)
 80028a6:	617b      	str	r3, [r7, #20]
      break;
 80028a8:	e005      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028aa:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_RCC_GetSysClockFreq+0x110>)
 80028ac:	617b      	str	r3, [r7, #20]
      break;
 80028ae:	e002      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	617b      	str	r3, [r7, #20]
      break;
 80028b4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_RCC_GetSysClockFreq+0x104>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	3301      	adds	r3, #1
 80028c2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <HAL_RCC_GetSysClockFreq+0x104>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	fb02 f203 	mul.w	r2, r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_RCC_GetSysClockFreq+0x104>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0e5b      	lsrs	r3, r3, #25
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	3301      	adds	r3, #1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028f6:	69bb      	ldr	r3, [r7, #24]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3724      	adds	r7, #36	; 0x24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40021000 	.word	0x40021000
 8002908:	08007cb0 	.word	0x08007cb0
 800290c:	00f42400 	.word	0x00f42400
 8002910:	007a1200 	.word	0x007a1200

08002914 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800291c:	2300      	movs	r3, #0
 800291e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002920:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800292c:	f7ff fa24 	bl	8001d78 <HAL_PWREx_GetVoltageRange>
 8002930:	6178      	str	r0, [r7, #20]
 8002932:	e014      	b.n	800295e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002934:	4b25      	ldr	r3, [pc, #148]	; (80029cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	4a24      	ldr	r2, [pc, #144]	; (80029cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293e:	6593      	str	r3, [r2, #88]	; 0x58
 8002940:	4b22      	ldr	r3, [pc, #136]	; (80029cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800294c:	f7ff fa14 	bl	8001d78 <HAL_PWREx_GetVoltageRange>
 8002950:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002964:	d10b      	bne.n	800297e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b80      	cmp	r3, #128	; 0x80
 800296a:	d919      	bls.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2ba0      	cmp	r3, #160	; 0xa0
 8002970:	d902      	bls.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002972:	2302      	movs	r3, #2
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	e013      	b.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002978:	2301      	movs	r3, #1
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	e010      	b.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b80      	cmp	r3, #128	; 0x80
 8002982:	d902      	bls.n	800298a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002984:	2303      	movs	r3, #3
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	e00a      	b.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b80      	cmp	r3, #128	; 0x80
 800298e:	d102      	bne.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002990:	2302      	movs	r3, #2
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	e004      	b.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b70      	cmp	r3, #112	; 0x70
 800299a:	d101      	bne.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800299c:	2301      	movs	r3, #1
 800299e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 0207 	bic.w	r2, r3, #7
 80029a8:	4909      	ldr	r1, [pc, #36]	; (80029d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d001      	beq.n	80029c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40022000 	.word	0x40022000

080029d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029dc:	2300      	movs	r3, #0
 80029de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029e0:	2300      	movs	r3, #0
 80029e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d02f      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029f8:	d005      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80029fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029fe:	d015      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002a04:	e00f      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002a06:	4b5d      	ldr	r3, [pc, #372]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	4a5c      	ldr	r2, [pc, #368]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a12:	e00c      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fa1e 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a24:	e003      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	74fb      	strb	r3, [r7, #19]
      break;
 8002a2a:	e000      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2e:	7cfb      	ldrb	r3, [r7, #19]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10b      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a34:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	494e      	ldr	r1, [pc, #312]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a4a:	e001      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 809e 	beq.w	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a62:	4b46      	ldr	r3, [pc, #280]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00d      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b40      	ldr	r3, [pc, #256]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	4a3f      	ldr	r2, [pc, #252]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a82:	6593      	str	r3, [r2, #88]	; 0x58
 8002a84:	4b3d      	ldr	r3, [pc, #244]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a90:	2301      	movs	r3, #1
 8002a92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a94:	4b3a      	ldr	r3, [pc, #232]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a39      	ldr	r2, [pc, #228]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aa0:	f7fd ff0e 	bl	80008c0 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aa6:	e009      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa8:	f7fd ff0a 	bl	80008c0 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	74fb      	strb	r3, [r7, #19]
        break;
 8002aba:	e005      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002abc:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ef      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d15a      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ace:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01e      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d019      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afc:	4a1f      	ldr	r2, [pc, #124]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	4a1b      	ldr	r2, [pc, #108]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b16:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d016      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fd feca 	bl	80008c0 <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b30:	f7fd fec6 	bl	80008c0 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d902      	bls.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	74fb      	strb	r3, [r7, #19]
            break;
 8002b46:	e006      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0ec      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	4904      	ldr	r1, [pc, #16]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b72:	e009      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	74bb      	strb	r3, [r7, #18]
 8002b78:	e006      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b88:	7c7b      	ldrb	r3, [r7, #17]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d105      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8e:	4bb2      	ldr	r3, [pc, #712]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	4ab1      	ldr	r2, [pc, #708]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ba6:	4bac      	ldr	r3, [pc, #688]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	f023 0203 	bic.w	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	49a8      	ldr	r1, [pc, #672]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bc8:	4ba3      	ldr	r3, [pc, #652]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f023 020c 	bic.w	r2, r3, #12
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	49a0      	ldr	r1, [pc, #640]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bea:	4b9b      	ldr	r3, [pc, #620]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	4997      	ldr	r1, [pc, #604]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c0c:	4b92      	ldr	r3, [pc, #584]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	498f      	ldr	r1, [pc, #572]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c2e:	4b8a      	ldr	r3, [pc, #552]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3c:	4986      	ldr	r1, [pc, #536]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c50:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	497e      	ldr	r1, [pc, #504]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c72:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	4975      	ldr	r1, [pc, #468]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c94:	4b70      	ldr	r3, [pc, #448]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca2:	496d      	ldr	r1, [pc, #436]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cb6:	4b68      	ldr	r3, [pc, #416]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	4964      	ldr	r1, [pc, #400]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d028      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd8:	4b5f      	ldr	r3, [pc, #380]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce6:	495c      	ldr	r1, [pc, #368]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf6:	d106      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf8:	4b57      	ldr	r3, [pc, #348]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a56      	ldr	r2, [pc, #344]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d02:	60d3      	str	r3, [r2, #12]
 8002d04:	e011      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d0e:	d10c      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	2101      	movs	r1, #1
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f8a0 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8002d26:	7cfb      	ldrb	r3, [r7, #19]
 8002d28:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d028      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d36:	4b48      	ldr	r3, [pc, #288]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d44:	4944      	ldr	r1, [pc, #272]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d54:	d106      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d56:	4b40      	ldr	r3, [pc, #256]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	4a3f      	ldr	r2, [pc, #252]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d60:	60d3      	str	r3, [r2, #12]
 8002d62:	e011      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2101      	movs	r1, #1
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 f871 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d7e:	7cfb      	ldrb	r3, [r7, #19]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d028      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d94:	4b30      	ldr	r3, [pc, #192]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da2:	492d      	ldr	r1, [pc, #180]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4a27      	ldr	r2, [pc, #156]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dbe:	60d3      	str	r3, [r2, #12]
 8002dc0:	e011      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dca:	d10c      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f842 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01c      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	4915      	ldr	r1, [pc, #84]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2102      	movs	r1, #2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 f81f 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e38:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	4904      	ldr	r1, [pc, #16]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000

08002e5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e6a:	4b73      	ldr	r3, [pc, #460]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d018      	beq.n	8002ea8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e76:	4b70      	ldr	r3, [pc, #448]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0203 	and.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d10d      	bne.n	8002ea2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
       ||
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e8e:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d044      	beq.n	8002f2c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
 8002ea6:	e041      	b.n	8002f2c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d00c      	beq.n	8002eca <RCCEx_PLLSAI1_Config+0x6e>
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d013      	beq.n	8002edc <RCCEx_PLLSAI1_Config+0x80>
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d120      	bne.n	8002efa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eb8:	4b5f      	ldr	r3, [pc, #380]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d11d      	bne.n	8002f00 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec8:	e01a      	b.n	8002f00 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002eca:	4b5b      	ldr	r3, [pc, #364]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d116      	bne.n	8002f04 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eda:	e013      	b.n	8002f04 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002edc:	4b56      	ldr	r3, [pc, #344]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10f      	bne.n	8002f08 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ee8:	4b53      	ldr	r3, [pc, #332]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ef8:	e006      	b.n	8002f08 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      break;
 8002efe:	e004      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f00:	bf00      	nop
 8002f02:	e002      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f04:	bf00      	nop
 8002f06:	e000      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f08:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10d      	bne.n	8002f2c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f10:	4b49      	ldr	r3, [pc, #292]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6819      	ldr	r1, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	430b      	orrs	r3, r1
 8002f26:	4944      	ldr	r1, [pc, #272]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d17c      	bne.n	800302c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a40      	ldr	r2, [pc, #256]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f3e:	f7fd fcbf 	bl	80008c0 <HAL_GetTick>
 8002f42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f44:	e009      	b.n	8002f5a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f46:	f7fd fcbb 	bl	80008c0 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d902      	bls.n	8002f5a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	73fb      	strb	r3, [r7, #15]
        break;
 8002f58:	e005      	b.n	8002f66 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f5a:	4b37      	ldr	r3, [pc, #220]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ef      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d15f      	bne.n	800302c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d110      	bne.n	8002f94 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f72:	4b31      	ldr	r3, [pc, #196]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002f7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6892      	ldr	r2, [r2, #8]
 8002f82:	0211      	lsls	r1, r2, #8
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	68d2      	ldr	r2, [r2, #12]
 8002f88:	06d2      	lsls	r2, r2, #27
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	492a      	ldr	r1, [pc, #168]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	610b      	str	r3, [r1, #16]
 8002f92:	e027      	b.n	8002fe4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d112      	bne.n	8002fc0 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f9a:	4b27      	ldr	r3, [pc, #156]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fa2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6892      	ldr	r2, [r2, #8]
 8002faa:	0211      	lsls	r1, r2, #8
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6912      	ldr	r2, [r2, #16]
 8002fb0:	0852      	lsrs	r2, r2, #1
 8002fb2:	3a01      	subs	r2, #1
 8002fb4:	0552      	lsls	r2, r2, #21
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	491f      	ldr	r1, [pc, #124]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	610b      	str	r3, [r1, #16]
 8002fbe:	e011      	b.n	8002fe4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6892      	ldr	r2, [r2, #8]
 8002fd0:	0211      	lsls	r1, r2, #8
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6952      	ldr	r2, [r2, #20]
 8002fd6:	0852      	lsrs	r2, r2, #1
 8002fd8:	3a01      	subs	r2, #1
 8002fda:	0652      	lsls	r2, r2, #25
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	4916      	ldr	r1, [pc, #88]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fe4:	4b14      	ldr	r3, [pc, #80]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a13      	ldr	r2, [pc, #76]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fd fc66 	bl	80008c0 <HAL_GetTick>
 8002ff4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ff6:	e009      	b.n	800300c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ff8:	f7fd fc62 	bl	80008c0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d902      	bls.n	800300c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	73fb      	strb	r3, [r7, #15]
          break;
 800300a:	e005      	b.n	8003018 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ef      	beq.n	8002ff8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	4904      	ldr	r1, [pc, #16]	; (8003038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800302c:	7bfb      	ldrb	r3, [r7, #15]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000

0800303c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e07c      	b.n	8003148 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7fd faad 	bl	80005c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003084:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800308e:	d902      	bls.n	8003096 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e002      	b.n	800309c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800309a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030a4:	d007      	beq.n	80030b6 <HAL_SPI_Init+0x7a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030ae:	d002      	beq.n	80030b6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030c6:	d903      	bls.n	80030d0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
 80030ce:	e002      	b.n	80030d6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	ea42 0103 	orr.w	r1, r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	0c1b      	lsrs	r3, r3, #16
 8003116:	f003 0204 	and.w	r2, r3, #4
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	ea42 0103 	orr.w	r1, r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_SPI_Transmit+0x22>
 800316e:	2302      	movs	r3, #2
 8003170:	e150      	b.n	8003414 <HAL_SPI_Transmit+0x2c4>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800317a:	f7fd fba1 	bl	80008c0 <HAL_GetTick>
 800317e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d002      	beq.n	8003196 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003190:	2302      	movs	r3, #2
 8003192:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003194:	e135      	b.n	8003402 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_SPI_Transmit+0x52>
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031a6:	e12c      	b.n	8003402 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2203      	movs	r2, #3
 80031ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	88fa      	ldrh	r2, [r7, #6]
 80031c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f2:	d107      	bne.n	8003204 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003202:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d007      	beq.n	8003222 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003220:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800322a:	d94b      	bls.n	80032c4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_SPI_Transmit+0xea>
 8003234:	8afb      	ldrh	r3, [r7, #22]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d13e      	bne.n	80032b8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	1c9a      	adds	r2, r3, #2
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800325e:	e02b      	b.n	80032b8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d112      	bne.n	8003294 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	881a      	ldrh	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	1c9a      	adds	r2, r3, #2
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003292:	e011      	b.n	80032b8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003294:	f7fd fb14 	bl	80008c0 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d803      	bhi.n	80032ac <HAL_SPI_Transmit+0x15c>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d102      	bne.n	80032b2 <HAL_SPI_Transmit+0x162>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d102      	bne.n	80032b8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032b6:	e0a4      	b.n	8003402 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ce      	bne.n	8003260 <HAL_SPI_Transmit+0x110>
 80032c2:	e07c      	b.n	80033be <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_SPI_Transmit+0x182>
 80032cc:	8afb      	ldrh	r3, [r7, #22]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d170      	bne.n	80033b4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d912      	bls.n	8003302 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	881a      	ldrh	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	1c9a      	adds	r2, r3, #2
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b02      	subs	r3, #2
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003300:	e058      	b.n	80033b4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	330c      	adds	r3, #12
 800330c:	7812      	ldrb	r2, [r2, #0]
 800330e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003328:	e044      	b.n	80033b4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b02      	cmp	r3, #2
 8003336:	d12b      	bne.n	8003390 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d912      	bls.n	8003368 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	881a      	ldrh	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	1c9a      	adds	r2, r3, #2
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b02      	subs	r3, #2
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003366:	e025      	b.n	80033b4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	330c      	adds	r3, #12
 8003372:	7812      	ldrb	r2, [r2, #0]
 8003374:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800338e:	e011      	b.n	80033b4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003390:	f7fd fa96 	bl	80008c0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d803      	bhi.n	80033a8 <HAL_SPI_Transmit+0x258>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a6:	d102      	bne.n	80033ae <HAL_SPI_Transmit+0x25e>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033b2:	e026      	b.n	8003402 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1b5      	bne.n	800332a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	6839      	ldr	r1, [r7, #0]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 fdb4 	bl	8003f30 <SPI_EndRxTxTransaction>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	e000      	b.n	8003402 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003400:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003412:	7ffb      	ldrb	r3, [r7, #31]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003438:	d112      	bne.n	8003460 <HAL_SPI_Receive+0x44>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10e      	bne.n	8003460 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2204      	movs	r2, #4
 8003446:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800344a:	88fa      	ldrh	r2, [r7, #6]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f908 	bl	800366c <HAL_SPI_TransmitReceive>
 800345c:	4603      	mov	r3, r0
 800345e:	e101      	b.n	8003664 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_SPI_Receive+0x52>
 800346a:	2302      	movs	r3, #2
 800346c:	e0fa      	b.n	8003664 <HAL_SPI_Receive+0x248>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003476:	f7fd fa23 	bl	80008c0 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d002      	beq.n	800348e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003488:	2302      	movs	r3, #2
 800348a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800348c:	e0e1      	b.n	8003652 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_SPI_Receive+0x7e>
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800349e:	e0d8      	b.n	8003652 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2204      	movs	r2, #4
 80034a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	88fa      	ldrh	r2, [r7, #6]
 80034b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	88fa      	ldrh	r2, [r7, #6]
 80034c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ea:	d908      	bls.n	80034fe <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	e007      	b.n	800350e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800350c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003516:	d107      	bne.n	8003528 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003526:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d007      	beq.n	8003546 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003544:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800354e:	d867      	bhi.n	8003620 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003550:	e030      	b.n	80035b4 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d117      	bne.n	8003590 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f103 020c 	add.w	r2, r3, #12
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	7812      	ldrb	r2, [r2, #0]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800358e:	e011      	b.n	80035b4 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003590:	f7fd f996 	bl	80008c0 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d803      	bhi.n	80035a8 <HAL_SPI_Receive+0x18c>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d102      	bne.n	80035ae <HAL_SPI_Receive+0x192>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035b2:	e04e      	b.n	8003652 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1c8      	bne.n	8003552 <HAL_SPI_Receive+0x136>
 80035c0:	e034      	b.n	800362c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d115      	bne.n	80035fc <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	b292      	uxth	r2, r2
 80035dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	1c9a      	adds	r2, r3, #2
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80035fa:	e011      	b.n	8003620 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035fc:	f7fd f960 	bl	80008c0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d803      	bhi.n	8003614 <HAL_SPI_Receive+0x1f8>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003612:	d102      	bne.n	800361a <HAL_SPI_Receive+0x1fe>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800361e:	e018      	b.n	8003652 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ca      	bne.n	80035c2 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	6839      	ldr	r1, [r7, #0]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fc25 	bl	8003e80 <SPI_EndRxTransaction>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	75fb      	strb	r3, [r7, #23]
 800364e:	e000      	b.n	8003652 <HAL_SPI_Receive+0x236>
  }

error :
 8003650:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003662:	7dfb      	ldrb	r3, [r7, #23]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800367a:	2301      	movs	r3, #1
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_SPI_TransmitReceive+0x26>
 800368e:	2302      	movs	r3, #2
 8003690:	e1fb      	b.n	8003a8a <HAL_SPI_TransmitReceive+0x41e>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800369a:	f7fd f911 	bl	80008c0 <HAL_GetTick>
 800369e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036a6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80036b2:	887b      	ldrh	r3, [r7, #2]
 80036b4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036b6:	7efb      	ldrb	r3, [r7, #27]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d00e      	beq.n	80036da <HAL_SPI_TransmitReceive+0x6e>
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036c2:	d106      	bne.n	80036d2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <HAL_SPI_TransmitReceive+0x66>
 80036cc:	7efb      	ldrb	r3, [r7, #27]
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d003      	beq.n	80036da <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
 80036d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036d8:	e1cd      	b.n	8003a76 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_SPI_TransmitReceive+0x80>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_SPI_TransmitReceive+0x80>
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d103      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036f2:	e1c0      	b.n	8003a76 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d003      	beq.n	8003708 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2205      	movs	r2, #5
 8003704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	887a      	ldrh	r2, [r7, #2]
 800372e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800374a:	d802      	bhi.n	8003752 <HAL_SPI_TransmitReceive+0xe6>
 800374c:	8a3b      	ldrh	r3, [r7, #16]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d908      	bls.n	8003764 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	e007      	b.n	8003774 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003772:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d007      	beq.n	8003792 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003790:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800379a:	d97c      	bls.n	8003896 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <HAL_SPI_TransmitReceive+0x13e>
 80037a4:	8a7b      	ldrh	r3, [r7, #18]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d169      	bne.n	800387e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	1c9a      	adds	r2, r3, #2
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ce:	e056      	b.n	800387e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d11b      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x1aa>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d016      	beq.n	8003816 <HAL_SPI_TransmitReceive+0x1aa>
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d113      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	881a      	ldrh	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	1c9a      	adds	r2, r3, #2
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b01      	cmp	r3, #1
 8003822:	d11c      	bne.n	800385e <HAL_SPI_TransmitReceive+0x1f2>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d016      	beq.n	800385e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	b292      	uxth	r2, r2
 800383c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	1c9a      	adds	r2, r3, #2
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800385a:	2301      	movs	r3, #1
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800385e:	f7fd f82f 	bl	80008c0 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800386a:	429a      	cmp	r2, r3
 800386c:	d807      	bhi.n	800387e <HAL_SPI_TransmitReceive+0x212>
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d003      	beq.n	800387e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800387c:	e0fb      	b.n	8003a76 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1a3      	bne.n	80037d0 <HAL_SPI_TransmitReceive+0x164>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d19d      	bne.n	80037d0 <HAL_SPI_TransmitReceive+0x164>
 8003894:	e0df      	b.n	8003a56 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_SPI_TransmitReceive+0x23a>
 800389e:	8a7b      	ldrh	r3, [r7, #18]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	f040 80cb 	bne.w	8003a3c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d912      	bls.n	80038d6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	881a      	ldrh	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	1c9a      	adds	r2, r3, #2
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b02      	subs	r3, #2
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038d4:	e0b2      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	330c      	adds	r3, #12
 80038e0:	7812      	ldrb	r2, [r2, #0]
 80038e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038fc:	e09e      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b02      	cmp	r3, #2
 800390a:	d134      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x30a>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d02f      	beq.n	8003976 <HAL_SPI_TransmitReceive+0x30a>
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	2b01      	cmp	r3, #1
 800391a:	d12c      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b01      	cmp	r3, #1
 8003924:	d912      	bls.n	800394c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	881a      	ldrh	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	1c9a      	adds	r2, r3, #2
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b02      	subs	r3, #2
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	87da      	strh	r2, [r3, #62]	; 0x3e
 800394a:	e012      	b.n	8003972 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	330c      	adds	r3, #12
 8003956:	7812      	ldrb	r2, [r2, #0]
 8003958:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d148      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x3aa>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d042      	beq.n	8003a16 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d923      	bls.n	80039e4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	b292      	uxth	r2, r2
 80039a8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	1c9a      	adds	r2, r3, #2
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b02      	subs	r3, #2
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d81f      	bhi.n	8003a12 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	e016      	b.n	8003a12 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f103 020c 	add.w	r2, r3, #12
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a12:	2301      	movs	r3, #1
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a16:	f7fc ff53 	bl	80008c0 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d803      	bhi.n	8003a2e <HAL_SPI_TransmitReceive+0x3c2>
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d102      	bne.n	8003a34 <HAL_SPI_TransmitReceive+0x3c8>
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d103      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a3a:	e01c      	b.n	8003a76 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f47f af5b 	bne.w	80038fe <HAL_SPI_TransmitReceive+0x292>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f47f af54 	bne.w	80038fe <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fa68 	bl	8003f30 <SPI_EndRxTxTransaction>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	661a      	str	r2, [r3, #96]	; 0x60
 8003a72:	e000      	b.n	8003a76 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003a74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3728      	adds	r7, #40	; 0x28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	099b      	lsrs	r3, r3, #6
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10f      	bne.n	8003ad8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	099b      	lsrs	r3, r3, #6
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	4798      	blx	r3
    return;
 8003ad6:	e0d8      	b.n	8003c8a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_SPI_IRQHandler+0x66>
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	09db      	lsrs	r3, r3, #7
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
    return;
 8003af8:	e0c7      	b.n	8003c8a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10c      	bne.n	8003b20 <HAL_SPI_IRQHandler+0x8c>
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	099b      	lsrs	r3, r3, #6
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_SPI_IRQHandler+0x8c>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80b5 	beq.w	8003c8a <HAL_SPI_IRQHandler+0x1f6>
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80ae 	beq.w	8003c8a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	099b      	lsrs	r3, r3, #6
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d023      	beq.n	8003b82 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d011      	beq.n	8003b6a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4a:	f043 0204 	orr.w	r2, r3, #4
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	e00b      	b.n	8003b82 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	693b      	ldr	r3, [r7, #16]
        return;
 8003b80:	e083      	b.n	8003c8a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d014      	beq.n	8003bb8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b92:	f043 0201 	orr.w	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00c      	beq.n	8003bde <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc8:	f043 0208 	orr.w	r2, r3, #8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d050      	beq.n	8003c88 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bf4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d104      	bne.n	8003c12 <HAL_SPI_IRQHandler+0x17e>
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d034      	beq.n	8003c7c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0203 	bic.w	r2, r2, #3
 8003c20:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d011      	beq.n	8003c4e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	4a18      	ldr	r2, [pc, #96]	; (8003c90 <HAL_SPI_IRQHandler+0x1fc>)
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fc ff81 	bl	8000b3e <HAL_DMA_Abort_IT>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d016      	beq.n	8003c84 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <HAL_SPI_IRQHandler+0x1fc>)
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fc ff6b 	bl	8000b3e <HAL_DMA_Abort_IT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003c7a:	e003      	b.n	8003c84 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f809 	bl	8003c94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003c82:	e000      	b.n	8003c86 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003c84:	bf00      	nop
    return;
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
  }
}
 8003c8a:	3720      	adds	r7, #32
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	08003ca9 	.word	0x08003ca9

08003c94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f7ff ffe5 	bl	8003c94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	603b      	str	r3, [r7, #0]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ce2:	e04c      	b.n	8003d7e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	d048      	beq.n	8003d7e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003cec:	f7fc fde8 	bl	80008c0 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d902      	bls.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d13d      	bne.n	8003d7e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1a:	d111      	bne.n	8003d40 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d24:	d004      	beq.n	8003d30 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2e:	d107      	bne.n	8003d40 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d48:	d10f      	bne.n	8003d6a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e00f      	b.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4013      	ands	r3, r2
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2301      	moveq	r3, #1
 8003d90:	2300      	movne	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d1a3      	bne.n	8003ce4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003db4:	e057      	b.n	8003e66 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003dbc:	d106      	bne.n	8003dcc <SPI_WaitFifoStateUntilTimeout+0x26>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d103      	bne.n	8003dcc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d048      	beq.n	8003e66 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003dd4:	f7fc fd74 	bl	80008c0 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d902      	bls.n	8003dea <SPI_WaitFifoStateUntilTimeout+0x44>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d13d      	bne.n	8003e66 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003df8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e02:	d111      	bne.n	8003e28 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0c:	d004      	beq.n	8003e18 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e16:	d107      	bne.n	8003e28 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e30:	d10f      	bne.n	8003e52 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e008      	b.n	8003e78 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d19f      	bne.n	8003db6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e94:	d111      	bne.n	8003eba <SPI_EndRxTransaction+0x3a>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e9e:	d004      	beq.n	8003eaa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea8:	d107      	bne.n	8003eba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2180      	movs	r1, #128	; 0x80
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff ff04 	bl	8003cd2 <SPI_WaitFlagStateUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed4:	f043 0220 	orr.w	r2, r3, #32
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e023      	b.n	8003f28 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee8:	d11d      	bne.n	8003f26 <SPI_EndRxTransaction+0xa6>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef2:	d004      	beq.n	8003efe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efc:	d113      	bne.n	8003f26 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff ff4b 	bl	8003da6 <SPI_WaitFifoStateUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e000      	b.n	8003f28 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff ff2c 	bl	8003da6 <SPI_WaitFifoStateUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f58:	f043 0220 	orr.w	r2, r3, #32
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e027      	b.n	8003fb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2180      	movs	r1, #128	; 0x80
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff feaf 	bl	8003cd2 <SPI_WaitFlagStateUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7e:	f043 0220 	orr.w	r2, r3, #32
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e014      	b.n	8003fb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff ff05 	bl	8003da6 <SPI_WaitFifoStateUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa6:	f043 0220 	orr.w	r2, r3, #32
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e000      	b.n	8003fb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	f107 0014 	add.w	r0, r7, #20
 8003fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	b004      	add	sp, #16
 8003fdc:	4770      	bx	lr

08003fde <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fe6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003fea:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	89fb      	ldrh	r3, [r7, #14]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004016:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800401a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004022:	b29b      	uxth	r3, r3
 8004024:	b21a      	sxth	r2, r3
 8004026:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800402a:	43db      	mvns	r3, r3
 800402c:	b21b      	sxth	r3, r3
 800402e:	4013      	ands	r3, r2
 8004030:	b21b      	sxth	r3, r3
 8004032:	b29a      	uxth	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004062:	b084      	sub	sp, #16
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	f107 0014 	add.w	r0, r7, #20
 8004070:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff ffa2 	bl	8003fde <USB_EnableGlobalInt>

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a6:	b004      	add	sp, #16
 80040a8:	4770      	bx	lr
	...

080040ac <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040ac:	b490      	push	{r4, r7}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80040cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d0:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	78db      	ldrb	r3, [r3, #3]
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d819      	bhi.n	800410e <USB_ActivateEndpoint+0x62>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <USB_ActivateEndpoint+0x34>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	080040f1 	.word	0x080040f1
 80040e4:	08004105 	.word	0x08004105
 80040e8:	08004115 	.word	0x08004115
 80040ec:	080040fb 	.word	0x080040fb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040f0:	8abb      	ldrh	r3, [r7, #20]
 80040f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040f6:	82bb      	strh	r3, [r7, #20]
      break;
 80040f8:	e00d      	b.n	8004116 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80040fa:	8abb      	ldrh	r3, [r7, #20]
 80040fc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004100:	82bb      	strh	r3, [r7, #20]
      break;
 8004102:	e008      	b.n	8004116 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004104:	8abb      	ldrh	r3, [r7, #20]
 8004106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800410a:	82bb      	strh	r3, [r7, #20]
      break;
 800410c:	e003      	b.n	8004116 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	75fb      	strb	r3, [r7, #23]
      break;
 8004112:	e000      	b.n	8004116 <USB_ActivateEndpoint+0x6a>
      break;
 8004114:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	441a      	add	r2, r3
 8004120:	8abb      	ldrh	r3, [r7, #20]
 8004122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800412a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004132:	b29b      	uxth	r3, r3
 8004134:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	b21b      	sxth	r3, r3
 8004146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	b21a      	sxth	r2, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b21b      	sxth	r3, r3
 8004156:	4313      	orrs	r3, r2
 8004158:	b21b      	sxth	r3, r3
 800415a:	b29c      	uxth	r4, r3
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	441a      	add	r2, r3
 8004166:	4b87      	ldr	r3, [pc, #540]	; (8004384 <USB_ActivateEndpoint+0x2d8>)
 8004168:	4323      	orrs	r3, r4
 800416a:	b29b      	uxth	r3, r3
 800416c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	7b1b      	ldrb	r3, [r3, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 810c 	bne.w	8004390 <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	785b      	ldrb	r3, [r3, #1]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d067      	beq.n	8004250 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004180:	687c      	ldr	r4, [r7, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004188:	b29b      	uxth	r3, r3
 800418a:	441c      	add	r4, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4423      	add	r3, r4
 8004194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004198:	461c      	mov	r4, r3
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	88db      	ldrh	r3, [r3, #6]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b29c      	uxth	r4, r3
 80041b6:	4623      	mov	r3, r4
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d014      	beq.n	80041ea <USB_ActivateEndpoint+0x13e>
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	b29c      	uxth	r4, r3
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	441a      	add	r2, r3
 80041e2:	4b69      	ldr	r3, [pc, #420]	; (8004388 <USB_ActivateEndpoint+0x2dc>)
 80041e4:	4323      	orrs	r3, r4
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	78db      	ldrb	r3, [r3, #3]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d018      	beq.n	8004224 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004208:	b29c      	uxth	r4, r3
 800420a:	f084 0320 	eor.w	r3, r4, #32
 800420e:	b29c      	uxth	r4, r3
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	441a      	add	r2, r3
 800421a:	4b5a      	ldr	r3, [pc, #360]	; (8004384 <USB_ActivateEndpoint+0x2d8>)
 800421c:	4323      	orrs	r3, r4
 800421e:	b29b      	uxth	r3, r3
 8004220:	8013      	strh	r3, [r2, #0]
 8004222:	e225      	b.n	8004670 <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29b      	uxth	r3, r3
 8004232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800423a:	b29c      	uxth	r4, r3
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	441a      	add	r2, r3
 8004246:	4b4f      	ldr	r3, [pc, #316]	; (8004384 <USB_ActivateEndpoint+0x2d8>)
 8004248:	4323      	orrs	r3, r4
 800424a:	b29b      	uxth	r3, r3
 800424c:	8013      	strh	r3, [r2, #0]
 800424e:	e20f      	b.n	8004670 <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004250:	687c      	ldr	r4, [r7, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004258:	b29b      	uxth	r3, r3
 800425a:	441c      	add	r4, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4423      	add	r3, r4
 8004264:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004268:	461c      	mov	r4, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	88db      	ldrh	r3, [r3, #6]
 800426e:	085b      	lsrs	r3, r3, #1
 8004270:	b29b      	uxth	r3, r3
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	b29b      	uxth	r3, r3
 8004276:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004278:	687c      	ldr	r4, [r7, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004280:	b29b      	uxth	r3, r3
 8004282:	441c      	add	r4, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4423      	add	r3, r4
 800428c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d110      	bne.n	80042bc <USB_ActivateEndpoint+0x210>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	801a      	strh	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	801a      	strh	r2, [r3, #0]
 80042ba:	e026      	b.n	800430a <USB_ActivateEndpoint+0x25e>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b3d      	cmp	r3, #61	; 0x3d
 80042c2:	d813      	bhi.n	80042ec <USB_ActivateEndpoint+0x240>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <USB_ActivateEndpoint+0x232>
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	3301      	adds	r3, #1
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	029b      	lsls	r3, r3, #10
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	801a      	strh	r2, [r3, #0]
 80042ea:	e00e      	b.n	800430a <USB_ActivateEndpoint+0x25e>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	029b      	lsls	r3, r3, #10
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	b29c      	uxth	r4, r3
 8004318:	4623      	mov	r3, r4
 800431a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d014      	beq.n	800434c <USB_ActivateEndpoint+0x2a0>
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004338:	b29c      	uxth	r4, r3
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	441a      	add	r2, r3
 8004344:	4b11      	ldr	r3, [pc, #68]	; (800438c <USB_ActivateEndpoint+0x2e0>)
 8004346:	4323      	orrs	r3, r4
 8004348:	b29b      	uxth	r3, r3
 800434a:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	b29c      	uxth	r4, r3
 8004364:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004368:	b29c      	uxth	r4, r3
 800436a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800436e:	b29c      	uxth	r4, r3
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	441a      	add	r2, r3
 800437a:	4b02      	ldr	r3, [pc, #8]	; (8004384 <USB_ActivateEndpoint+0x2d8>)
 800437c:	4323      	orrs	r3, r4
 800437e:	b29b      	uxth	r3, r3
 8004380:	8013      	strh	r3, [r2, #0]
 8004382:	e175      	b.n	8004670 <USB_ActivateEndpoint+0x5c4>
 8004384:	ffff8080 	.word	0xffff8080
 8004388:	ffff80c0 	.word	0xffff80c0
 800438c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b29b      	uxth	r3, r3
 800439e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a6:	b29c      	uxth	r4, r3
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	441a      	add	r2, r3
 80043b2:	4b96      	ldr	r3, [pc, #600]	; (800460c <USB_ActivateEndpoint+0x560>)
 80043b4:	4323      	orrs	r3, r4
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80043ba:	687c      	ldr	r4, [r7, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	441c      	add	r4, r3
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4423      	add	r3, r4
 80043ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043d2:	461c      	mov	r4, r3
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	891b      	ldrh	r3, [r3, #8]
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	b29b      	uxth	r3, r3
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	b29b      	uxth	r3, r3
 80043e0:	8023      	strh	r3, [r4, #0]
 80043e2:	687c      	ldr	r4, [r7, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	441c      	add	r4, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4423      	add	r3, r4
 80043f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043fa:	461c      	mov	r4, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	895b      	ldrh	r3, [r3, #10]
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	b29b      	uxth	r3, r3
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	b29b      	uxth	r3, r3
 8004408:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	785b      	ldrb	r3, [r3, #1]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f040 8088 	bne.w	8004524 <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29c      	uxth	r4, r3
 8004422:	4623      	mov	r3, r4
 8004424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d014      	beq.n	8004456 <USB_ActivateEndpoint+0x3aa>
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	b29c      	uxth	r4, r3
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	441a      	add	r2, r3
 800444e:	4b70      	ldr	r3, [pc, #448]	; (8004610 <USB_ActivateEndpoint+0x564>)
 8004450:	4323      	orrs	r3, r4
 8004452:	b29b      	uxth	r3, r3
 8004454:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29c      	uxth	r4, r3
 8004464:	4623      	mov	r3, r4
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d014      	beq.n	8004498 <USB_ActivateEndpoint+0x3ec>
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004484:	b29c      	uxth	r4, r3
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	441a      	add	r2, r3
 8004490:	4b60      	ldr	r3, [pc, #384]	; (8004614 <USB_ActivateEndpoint+0x568>)
 8004492:	4323      	orrs	r3, r4
 8004494:	b29b      	uxth	r3, r3
 8004496:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	b29c      	uxth	r4, r3
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	441a      	add	r2, r3
 80044ba:	4b56      	ldr	r3, [pc, #344]	; (8004614 <USB_ActivateEndpoint+0x568>)
 80044bc:	4323      	orrs	r3, r4
 80044be:	b29b      	uxth	r3, r3
 80044c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d8:	b29c      	uxth	r4, r3
 80044da:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80044de:	b29c      	uxth	r4, r3
 80044e0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80044e4:	b29c      	uxth	r4, r3
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	441a      	add	r2, r3
 80044f0:	4b49      	ldr	r3, [pc, #292]	; (8004618 <USB_ActivateEndpoint+0x56c>)
 80044f2:	4323      	orrs	r3, r4
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450e:	b29c      	uxth	r4, r3
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <USB_ActivateEndpoint+0x56c>)
 800451c:	4323      	orrs	r3, r4
 800451e:	b29b      	uxth	r3, r3
 8004520:	8013      	strh	r3, [r2, #0]
 8004522:	e0a5      	b.n	8004670 <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	b29c      	uxth	r4, r3
 8004532:	4623      	mov	r3, r4
 8004534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d014      	beq.n	8004566 <USB_ActivateEndpoint+0x4ba>
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800454e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004552:	b29c      	uxth	r4, r3
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	441a      	add	r2, r3
 800455e:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <USB_ActivateEndpoint+0x564>)
 8004560:	4323      	orrs	r3, r4
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29c      	uxth	r4, r3
 8004574:	4623      	mov	r3, r4
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d014      	beq.n	80045a8 <USB_ActivateEndpoint+0x4fc>
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29b      	uxth	r3, r3
 800458c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004594:	b29c      	uxth	r4, r3
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	441a      	add	r2, r3
 80045a0:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <USB_ActivateEndpoint+0x568>)
 80045a2:	4323      	orrs	r3, r4
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	b29c      	uxth	r4, r3
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	441a      	add	r2, r3
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <USB_ActivateEndpoint+0x564>)
 80045cc:	4323      	orrs	r3, r4
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	78db      	ldrb	r3, [r3, #3]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d020      	beq.n	800461c <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f0:	b29c      	uxth	r4, r3
 80045f2:	f084 0320 	eor.w	r3, r4, #32
 80045f6:	b29c      	uxth	r4, r3
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <USB_ActivateEndpoint+0x56c>)
 8004604:	4323      	orrs	r3, r4
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]
 800460a:	e01c      	b.n	8004646 <USB_ActivateEndpoint+0x59a>
 800460c:	ffff8180 	.word	0xffff8180
 8004610:	ffffc080 	.word	0xffffc080
 8004614:	ffff80c0 	.word	0xffff80c0
 8004618:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004632:	b29c      	uxth	r4, r3
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	4b0f      	ldr	r3, [pc, #60]	; (800467c <USB_ActivateEndpoint+0x5d0>)
 8004640:	4323      	orrs	r3, r4
 8004642:	b29b      	uxth	r3, r3
 8004644:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465c:	b29c      	uxth	r4, r3
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	441a      	add	r2, r3
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <USB_ActivateEndpoint+0x5d0>)
 800466a:	4323      	orrs	r3, r4
 800466c:	b29b      	uxth	r3, r3
 800466e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004670:	7dfb      	ldrb	r3, [r7, #23]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bc90      	pop	{r4, r7}
 800467a:	4770      	bx	lr
 800467c:	ffff8080 	.word	0xffff8080

08004680 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004680:	b490      	push	{r4, r7}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	7b1b      	ldrb	r3, [r3, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d171      	bne.n	8004776 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d036      	beq.n	8004708 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29c      	uxth	r4, r3
 80046a8:	4623      	mov	r3, r4
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d014      	beq.n	80046dc <USB_DeactivateEndpoint+0x5c>
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c8:	b29c      	uxth	r4, r3
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	441a      	add	r2, r3
 80046d4:	4b6b      	ldr	r3, [pc, #428]	; (8004884 <USB_DeactivateEndpoint+0x204>)
 80046d6:	4323      	orrs	r3, r4
 80046d8:	b29b      	uxth	r3, r3
 80046da:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f2:	b29c      	uxth	r4, r3
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	441a      	add	r2, r3
 80046fe:	4b62      	ldr	r3, [pc, #392]	; (8004888 <USB_DeactivateEndpoint+0x208>)
 8004700:	4323      	orrs	r3, r4
 8004702:	b29b      	uxth	r3, r3
 8004704:	8013      	strh	r3, [r2, #0]
 8004706:	e144      	b.n	8004992 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	b29c      	uxth	r4, r3
 8004716:	4623      	mov	r3, r4
 8004718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d014      	beq.n	800474a <USB_DeactivateEndpoint+0xca>
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	b29c      	uxth	r4, r3
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	441a      	add	r2, r3
 8004742:	4b52      	ldr	r3, [pc, #328]	; (800488c <USB_DeactivateEndpoint+0x20c>)
 8004744:	4323      	orrs	r3, r4
 8004746:	b29b      	uxth	r3, r3
 8004748:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800475c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004760:	b29c      	uxth	r4, r3
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	441a      	add	r2, r3
 800476c:	4b46      	ldr	r3, [pc, #280]	; (8004888 <USB_DeactivateEndpoint+0x208>)
 800476e:	4323      	orrs	r3, r4
 8004770:	b29b      	uxth	r3, r3
 8004772:	8013      	strh	r3, [r2, #0]
 8004774:	e10d      	b.n	8004992 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 8088 	bne.w	8004890 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29c      	uxth	r4, r3
 800478e:	4623      	mov	r3, r4
 8004790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d014      	beq.n	80047c2 <USB_DeactivateEndpoint+0x142>
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	b29c      	uxth	r4, r3
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	4b34      	ldr	r3, [pc, #208]	; (800488c <USB_DeactivateEndpoint+0x20c>)
 80047bc:	4323      	orrs	r3, r4
 80047be:	b29b      	uxth	r3, r3
 80047c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29c      	uxth	r4, r3
 80047d0:	4623      	mov	r3, r4
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d014      	beq.n	8004804 <USB_DeactivateEndpoint+0x184>
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f0:	b29c      	uxth	r4, r3
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	441a      	add	r2, r3
 80047fc:	4b21      	ldr	r3, [pc, #132]	; (8004884 <USB_DeactivateEndpoint+0x204>)
 80047fe:	4323      	orrs	r3, r4
 8004800:	b29b      	uxth	r3, r3
 8004802:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481a:	b29c      	uxth	r4, r3
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	4b17      	ldr	r3, [pc, #92]	; (8004884 <USB_DeactivateEndpoint+0x204>)
 8004828:	4323      	orrs	r3, r4
 800482a:	b29b      	uxth	r3, r3
 800482c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004844:	b29c      	uxth	r4, r3
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	441a      	add	r2, r3
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <USB_DeactivateEndpoint+0x208>)
 8004852:	4323      	orrs	r3, r4
 8004854:	b29b      	uxth	r3, r3
 8004856:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486e:	b29c      	uxth	r4, r3
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	4b03      	ldr	r3, [pc, #12]	; (8004888 <USB_DeactivateEndpoint+0x208>)
 800487c:	4323      	orrs	r3, r4
 800487e:	b29b      	uxth	r3, r3
 8004880:	8013      	strh	r3, [r2, #0]
 8004882:	e086      	b.n	8004992 <USB_DeactivateEndpoint+0x312>
 8004884:	ffff80c0 	.word	0xffff80c0
 8004888:	ffff8080 	.word	0xffff8080
 800488c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29c      	uxth	r4, r3
 800489e:	4623      	mov	r3, r4
 80048a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d014      	beq.n	80048d2 <USB_DeactivateEndpoint+0x252>
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	b29c      	uxth	r4, r3
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	441a      	add	r2, r3
 80048ca:	4b35      	ldr	r3, [pc, #212]	; (80049a0 <USB_DeactivateEndpoint+0x320>)
 80048cc:	4323      	orrs	r3, r4
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29c      	uxth	r4, r3
 80048e0:	4623      	mov	r3, r4
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d014      	beq.n	8004914 <USB_DeactivateEndpoint+0x294>
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004900:	b29c      	uxth	r4, r3
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	441a      	add	r2, r3
 800490c:	4b25      	ldr	r3, [pc, #148]	; (80049a4 <USB_DeactivateEndpoint+0x324>)
 800490e:	4323      	orrs	r3, r4
 8004910:	b29b      	uxth	r3, r3
 8004912:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	b29c      	uxth	r4, r3
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	441a      	add	r2, r3
 8004936:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <USB_DeactivateEndpoint+0x320>)
 8004938:	4323      	orrs	r3, r4
 800493a:	b29b      	uxth	r3, r3
 800493c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	b29b      	uxth	r3, r3
 800494c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004954:	b29c      	uxth	r4, r3
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	441a      	add	r2, r3
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <USB_DeactivateEndpoint+0x328>)
 8004962:	4323      	orrs	r3, r4
 8004964:	b29b      	uxth	r3, r3
 8004966:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	b29c      	uxth	r4, r3
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <USB_DeactivateEndpoint+0x328>)
 800498c:	4323      	orrs	r3, r4
 800498e:	b29b      	uxth	r3, r3
 8004990:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bc90      	pop	{r4, r7}
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	ffffc080 	.word	0xffffc080
 80049a4:	ffff80c0 	.word	0xffff80c0
 80049a8:	ffff8080 	.word	0xffff8080

080049ac <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049ac:	b590      	push	{r4, r7, lr}
 80049ae:	b095      	sub	sp, #84	; 0x54
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	f040 815d 	bne.w	8004c7a <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	699a      	ldr	r2, [r3, #24]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d909      	bls.n	80049e0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	699a      	ldr	r2, [r3, #24]
 80049d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d8:	1ad2      	subs	r2, r2, r3
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	619a      	str	r2, [r3, #24]
 80049de:	e005      	b.n	80049ec <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2200      	movs	r2, #0
 80049ea:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	7b1b      	ldrb	r3, [r3, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11a      	bne.n	8004a2a <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6959      	ldr	r1, [r3, #20]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	88da      	ldrh	r2, [r3, #6]
 80049fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fbb1 	bl	8005168 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a06:	687c      	ldr	r4, [r7, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	441c      	add	r4, r3
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4423      	add	r3, r4
 8004a1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	e10b      	b.n	8004c42 <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d062      	beq.n	8004b06 <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a40:	687c      	ldr	r4, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	785b      	ldrb	r3, [r3, #1]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d144      	bne.n	8004ad4 <USB_EPStartXfer+0x128>
 8004a4a:	687c      	ldr	r4, [r7, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	441c      	add	r4, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4423      	add	r3, r4
 8004a5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d110      	bne.n	8004a8c <USB_EPStartXfer+0xe0>
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	801a      	strh	r2, [r3, #0]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	801a      	strh	r2, [r3, #0]
 8004a8a:	e037      	b.n	8004afc <USB_EPStartXfer+0x150>
 8004a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8e:	2b3d      	cmp	r3, #61	; 0x3d
 8004a90:	d811      	bhi.n	8004ab6 <USB_EPStartXfer+0x10a>
 8004a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	647b      	str	r3, [r7, #68]	; 0x44
 8004a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <USB_EPStartXfer+0xfc>
 8004aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	029b      	lsls	r3, r3, #10
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	801a      	strh	r2, [r3, #0]
 8004ab4:	e022      	b.n	8004afc <USB_EPStartXfer+0x150>
 8004ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	647b      	str	r3, [r7, #68]	; 0x44
 8004abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	029b      	lsls	r3, r3, #10
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	801a      	strh	r2, [r3, #0]
 8004ad2:	e013      	b.n	8004afc <USB_EPStartXfer+0x150>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	785b      	ldrb	r3, [r3, #1]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d10f      	bne.n	8004afc <USB_EPStartXfer+0x150>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	441c      	add	r4, r3
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	4423      	add	r3, r4
 8004aee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	895b      	ldrh	r3, [r3, #10]
 8004b00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b04:	e061      	b.n	8004bca <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	785b      	ldrb	r3, [r3, #1]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d144      	bne.n	8004b98 <USB_EPStartXfer+0x1ec>
 8004b0e:	687c      	ldr	r4, [r7, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	441c      	add	r4, r3
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4423      	add	r3, r4
 8004b22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b26:	61bb      	str	r3, [r7, #24]
 8004b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d110      	bne.n	8004b50 <USB_EPStartXfer+0x1a4>
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	801a      	strh	r2, [r3, #0]
 8004b4e:	e038      	b.n	8004bc2 <USB_EPStartXfer+0x216>
 8004b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b52:	2b3d      	cmp	r3, #61	; 0x3d
 8004b54:	d811      	bhi.n	8004b7a <USB_EPStartXfer+0x1ce>
 8004b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8004b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <USB_EPStartXfer+0x1c0>
 8004b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b68:	3301      	adds	r3, #1
 8004b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8004b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	029b      	lsls	r3, r3, #10
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	801a      	strh	r2, [r3, #0]
 8004b78:	e023      	b.n	8004bc2 <USB_EPStartXfer+0x216>
 8004b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	029b      	lsls	r3, r3, #10
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	801a      	strh	r2, [r3, #0]
 8004b96:	e014      	b.n	8004bc2 <USB_EPStartXfer+0x216>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	785b      	ldrb	r3, [r3, #1]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d110      	bne.n	8004bc2 <USB_EPStartXfer+0x216>
 8004ba0:	687c      	ldr	r4, [r7, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	441c      	add	r4, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	4423      	add	r3, r4
 8004bb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	891b      	ldrh	r3, [r3, #8]
 8004bc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6959      	ldr	r1, [r3, #20]
 8004bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fac6 	bl	8005168 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d115      	bne.n	8004c10 <USB_EPStartXfer+0x264>
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	b29c      	uxth	r4, r3
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	441a      	add	r2, r3
 8004c06:	4b99      	ldr	r3, [pc, #612]	; (8004e6c <USB_EPStartXfer+0x4c0>)
 8004c08:	4323      	orrs	r3, r4
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	8013      	strh	r3, [r2, #0]
 8004c0e:	e018      	b.n	8004c42 <USB_EPStartXfer+0x296>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	785b      	ldrb	r3, [r3, #1]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d114      	bne.n	8004c42 <USB_EPStartXfer+0x296>
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	b29c      	uxth	r4, r3
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	4b8d      	ldr	r3, [pc, #564]	; (8004e70 <USB_EPStartXfer+0x4c4>)
 8004c3c:	4323      	orrs	r3, r4
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c58:	b29c      	uxth	r4, r3
 8004c5a:	f084 0310 	eor.w	r3, r4, #16
 8004c5e:	b29c      	uxth	r4, r3
 8004c60:	f084 0320 	eor.w	r3, r4, #32
 8004c64:	b29c      	uxth	r4, r3
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	441a      	add	r2, r3
 8004c70:	4b80      	ldr	r3, [pc, #512]	; (8004e74 <USB_EPStartXfer+0x4c8>)
 8004c72:	4323      	orrs	r3, r4
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8013      	strh	r3, [r2, #0]
 8004c78:	e13c      	b.n	8004ef4 <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d909      	bls.n	8004c9a <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	699a      	ldr	r2, [r3, #24]
 8004c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c92:	1ad2      	subs	r2, r2, r3
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	619a      	str	r2, [r3, #24]
 8004c98:	e005      	b.n	8004ca6 <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	7b1b      	ldrb	r3, [r3, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d144      	bne.n	8004d38 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004cae:	687c      	ldr	r4, [r7, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	441c      	add	r4, r3
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4423      	add	r3, r4
 8004cc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004cc6:	623b      	str	r3, [r7, #32]
 8004cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d110      	bne.n	8004cf0 <USB_EPStartXfer+0x344>
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	801a      	strh	r2, [r3, #0]
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	801a      	strh	r2, [r3, #0]
 8004cee:	e0e6      	b.n	8004ebe <USB_EPStartXfer+0x512>
 8004cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf2:	2b3d      	cmp	r3, #61	; 0x3d
 8004cf4:	d811      	bhi.n	8004d1a <USB_EPStartXfer+0x36e>
 8004cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf8:	085b      	lsrs	r3, r3, #1
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <USB_EPStartXfer+0x360>
 8004d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d08:	3301      	adds	r3, #1
 8004d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	029b      	lsls	r3, r3, #10
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	801a      	strh	r2, [r3, #0]
 8004d18:	e0d1      	b.n	8004ebe <USB_EPStartXfer+0x512>
 8004d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	029b      	lsls	r3, r3, #10
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	e0c2      	b.n	8004ebe <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d144      	bne.n	8004dca <USB_EPStartXfer+0x41e>
 8004d40:	687c      	ldr	r4, [r7, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	441c      	add	r4, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	4423      	add	r3, r4
 8004d54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d110      	bne.n	8004d82 <USB_EPStartXfer+0x3d6>
 8004d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	e038      	b.n	8004df4 <USB_EPStartXfer+0x448>
 8004d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d84:	2b3d      	cmp	r3, #61	; 0x3d
 8004d86:	d811      	bhi.n	8004dac <USB_EPStartXfer+0x400>
 8004d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <USB_EPStartXfer+0x3f2>
 8004d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	029b      	lsls	r3, r3, #10
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	e023      	b.n	8004df4 <USB_EPStartXfer+0x448>
 8004dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	029b      	lsls	r3, r3, #10
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	801a      	strh	r2, [r3, #0]
 8004dc8:	e014      	b.n	8004df4 <USB_EPStartXfer+0x448>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	785b      	ldrb	r3, [r3, #1]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d110      	bne.n	8004df4 <USB_EPStartXfer+0x448>
 8004dd2:	687c      	ldr	r4, [r7, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	441c      	add	r4, r3
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	4423      	add	r3, r4
 8004de6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
 8004dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	801a      	strh	r2, [r3, #0]
 8004df4:	687c      	ldr	r4, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	785b      	ldrb	r3, [r3, #1]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d14b      	bne.n	8004e96 <USB_EPStartXfer+0x4ea>
 8004dfe:	687c      	ldr	r4, [r7, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	441c      	add	r4, r3
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	4423      	add	r3, r4
 8004e12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
 8004e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d110      	bne.n	8004e40 <USB_EPStartXfer+0x494>
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	e03e      	b.n	8004ebe <USB_EPStartXfer+0x512>
 8004e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e42:	2b3d      	cmp	r3, #61	; 0x3d
 8004e44:	d818      	bhi.n	8004e78 <USB_EPStartXfer+0x4cc>
 8004e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <USB_EPStartXfer+0x4b0>
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e58:	3301      	adds	r3, #1
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	029b      	lsls	r3, r3, #10
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	801a      	strh	r2, [r3, #0]
 8004e68:	e029      	b.n	8004ebe <USB_EPStartXfer+0x512>
 8004e6a:	bf00      	nop
 8004e6c:	ffff80c0 	.word	0xffff80c0
 8004e70:	ffffc080 	.word	0xffffc080
 8004e74:	ffff8080 	.word	0xffff8080
 8004e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	029b      	lsls	r3, r3, #10
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	801a      	strh	r2, [r3, #0]
 8004e94:	e013      	b.n	8004ebe <USB_EPStartXfer+0x512>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	785b      	ldrb	r3, [r3, #1]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d10f      	bne.n	8004ebe <USB_EPStartXfer+0x512>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	441c      	add	r4, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4423      	add	r3, r4
 8004eb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed4:	b29c      	uxth	r4, r3
 8004ed6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004eda:	b29c      	uxth	r4, r3
 8004edc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004ee0:	b29c      	uxth	r4, r3
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <USB_EPStartXfer+0x554>)
 8004eee:	4323      	orrs	r3, r4
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3754      	adds	r7, #84	; 0x54
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd90      	pop	{r4, r7, pc}
 8004efe:	bf00      	nop
 8004f00:	ffff8080 	.word	0xffff8080

08004f04 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f04:	b490      	push	{r4, r7}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	785b      	ldrb	r3, [r3, #1]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d018      	beq.n	8004f48 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f2c:	b29c      	uxth	r4, r3
 8004f2e:	f084 0310 	eor.w	r3, r4, #16
 8004f32:	b29c      	uxth	r4, r3
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <USB_EPSetStall+0x80>)
 8004f40:	4323      	orrs	r3, r4
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8013      	strh	r3, [r2, #0]
 8004f46:	e017      	b.n	8004f78 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	b29c      	uxth	r4, r3
 8004f60:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f64:	b29c      	uxth	r4, r3
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	441a      	add	r2, r3
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <USB_EPSetStall+0x80>)
 8004f72:	4323      	orrs	r3, r4
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc90      	pop	{r4, r7}
 8004f82:	4770      	bx	lr
 8004f84:	ffff8080 	.word	0xffff8080

08004f88 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f88:	b490      	push	{r4, r7}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	7b1b      	ldrb	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d17d      	bne.n	8005096 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d03d      	beq.n	800501e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29c      	uxth	r4, r3
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d014      	beq.n	8004fe4 <USB_EPClearStall+0x5c>
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd0:	b29c      	uxth	r4, r3
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	441a      	add	r2, r3
 8004fdc:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <USB_EPClearStall+0x11c>)
 8004fde:	4323      	orrs	r3, r4
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	78db      	ldrb	r3, [r3, #3]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d054      	beq.n	8005096 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005002:	b29c      	uxth	r4, r3
 8005004:	f084 0320 	eor.w	r3, r4, #32
 8005008:	b29c      	uxth	r4, r3
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	441a      	add	r2, r3
 8005014:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <USB_EPClearStall+0x120>)
 8005016:	4323      	orrs	r3, r4
 8005018:	b29b      	uxth	r3, r3
 800501a:	8013      	strh	r3, [r2, #0]
 800501c:	e03b      	b.n	8005096 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b29c      	uxth	r4, r3
 800502c:	4623      	mov	r3, r4
 800502e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d014      	beq.n	8005060 <USB_EPClearStall+0xd8>
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504c:	b29c      	uxth	r4, r3
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	441a      	add	r2, r3
 8005058:	4b14      	ldr	r3, [pc, #80]	; (80050ac <USB_EPClearStall+0x124>)
 800505a:	4323      	orrs	r3, r4
 800505c:	b29b      	uxth	r3, r3
 800505e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005076:	b29c      	uxth	r4, r3
 8005078:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800507c:	b29c      	uxth	r4, r3
 800507e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005082:	b29c      	uxth	r4, r3
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	441a      	add	r2, r3
 800508e:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <USB_EPClearStall+0x120>)
 8005090:	4323      	orrs	r3, r4
 8005092:	b29b      	uxth	r3, r3
 8005094:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bc90      	pop	{r4, r7}
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	ffff80c0 	.word	0xffff80c0
 80050a8:	ffff8080 	.word	0xffff8080
 80050ac:	ffffc080 	.word	0xffffc080

080050b0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d103      	bne.n	80050ca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2280      	movs	r2, #128	; 0x80
 80050c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005114:	b29b      	uxth	r3, r3
 8005116:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800511a:	b29a      	uxth	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800513e:	b29b      	uxth	r3, r3
 8005140:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005142:	68fb      	ldr	r3, [r7, #12]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005168:	b480      	push	{r7}
 800516a:	b08d      	sub	sp, #52	; 0x34
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	4611      	mov	r1, r2
 8005174:	461a      	mov	r2, r3
 8005176:	460b      	mov	r3, r1
 8005178:	80fb      	strh	r3, [r7, #6]
 800517a:	4613      	mov	r3, r2
 800517c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800517e:	88bb      	ldrh	r3, [r7, #4]
 8005180:	3301      	adds	r3, #1
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005198:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800519e:	e01b      	b.n	80051d8 <USB_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pBuf;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	3301      	adds	r3, #1
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	3302      	adds	r3, #2
 80051ca:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	3301      	adds	r3, #1
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d4:	3b01      	subs	r3, #1
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e0      	bne.n	80051a0 <USB_WritePMA+0x38>
  }
}
 80051de:	bf00      	nop
 80051e0:	3734      	adds	r7, #52	; 0x34
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b08b      	sub	sp, #44	; 0x2c
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	4611      	mov	r1, r2
 80051f6:	461a      	mov	r2, r3
 80051f8:	460b      	mov	r3, r1
 80051fa:	80fb      	strh	r3, [r7, #6]
 80051fc:	4613      	mov	r3, r2
 80051fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005200:	88bb      	ldrh	r3, [r7, #4]
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	b29b      	uxth	r3, r3
 8005206:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005210:	88fa      	ldrh	r2, [r7, #6]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
 8005220:	e017      	b.n	8005252 <USB_ReadPMA+0x68>
  {
    temp = *pdwVal;
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	3302      	adds	r3, #2
 800522c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	b2da      	uxtb	r2, r3
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	3301      	adds	r3, #1
 800523a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	0a1b      	lsrs	r3, r3, #8
 8005240:	b2da      	uxtb	r2, r3
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3301      	adds	r3, #1
 800524a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	3b01      	subs	r3, #1
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e4      	bne.n	8005222 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005258:	88bb      	ldrh	r3, [r7, #4]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d006      	beq.n	8005272 <USB_ReadPMA+0x88>
  {
    temp = *pdwVal;
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	b2da      	uxtb	r2, r3
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	701a      	strb	r2, [r3, #0]
  }
}
 8005272:	bf00      	nop
 8005274:	372c      	adds	r7, #44	; 0x2c
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	460b      	mov	r3, r1
 8005288:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	7c1b      	ldrb	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d115      	bne.n	80052c2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800529a:	2202      	movs	r2, #2
 800529c:	2181      	movs	r1, #129	; 0x81
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f001 fe5c 	bl	8006f5c <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ae:	2202      	movs	r2, #2
 80052b0:	2101      	movs	r1, #1
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f001 fe52 	bl	8006f5c <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80052c0:	e012      	b.n	80052e8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052c2:	2340      	movs	r3, #64	; 0x40
 80052c4:	2202      	movs	r2, #2
 80052c6:	2181      	movs	r1, #129	; 0x81
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f001 fe47 	bl	8006f5c <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052d4:	2340      	movs	r3, #64	; 0x40
 80052d6:	2202      	movs	r2, #2
 80052d8:	2101      	movs	r1, #1
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f001 fe3e 	bl	8006f5c <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80052e8:	2308      	movs	r3, #8
 80052ea:	2203      	movs	r2, #3
 80052ec:	2182      	movs	r1, #130	; 0x82
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f001 fe34 	bl	8006f5c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80052fa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80052fe:	f002 f827 	bl	8007350 <USBD_static_malloc>
 8005302:	4602      	mov	r2, r0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
 8005318:	e026      	b.n	8005368 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005320:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2200      	movs	r2, #0
 8005330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2200      	movs	r2, #0
 8005338:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	7c1b      	ldrb	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d109      	bne.n	8005358 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800534a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800534e:	2101      	movs	r1, #1
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f001 ff79 	bl	8007248 <USBD_LL_PrepareReceive>
 8005356:	e007      	b.n	8005368 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800535e:	2340      	movs	r3, #64	; 0x40
 8005360:	2101      	movs	r1, #1
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f001 ff70 	bl	8007248 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	460b      	mov	r3, r1
 800537c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005382:	2181      	movs	r1, #129	; 0x81
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 fe27 	bl	8006fd8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005390:	2101      	movs	r1, #1
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f001 fe20 	bl	8006fd8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80053a0:	2182      	movs	r1, #130	; 0x82
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f001 fe18 	bl	8006fd8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00e      	beq.n	80053d6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 ffcf 	bl	800736c <USBD_static_free>
    pdev->pClassData = NULL;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80053f0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005406:	2b00      	cmp	r3, #0
 8005408:	d039      	beq.n	800547e <USBD_CDC_Setup+0x9e>
 800540a:	2b20      	cmp	r3, #32
 800540c:	d17c      	bne.n	8005508 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	88db      	ldrh	r3, [r3, #6]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d029      	beq.n	800546a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	b25b      	sxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	da11      	bge.n	8005444 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800542c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	88d2      	ldrh	r2, [r2, #6]
 8005432:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005434:	6939      	ldr	r1, [r7, #16]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	88db      	ldrh	r3, [r3, #6]
 800543a:	461a      	mov	r2, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 f9a7 	bl	8006790 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8005442:	e068      	b.n	8005516 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	785a      	ldrb	r2, [r3, #1]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	88db      	ldrh	r3, [r3, #6]
 8005452:	b2da      	uxtb	r2, r3
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800545a:	6939      	ldr	r1, [r7, #16]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	88db      	ldrh	r3, [r3, #6]
 8005460:	461a      	mov	r2, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 f9c2 	bl	80067ec <USBD_CtlPrepareRx>
    break;
 8005468:	e055      	b.n	8005516 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	7850      	ldrb	r0, [r2, #1]
 8005476:	2200      	movs	r2, #0
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	4798      	blx	r3
    break;
 800547c:	e04b      	b.n	8005516 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	2b0a      	cmp	r3, #10
 8005484:	d017      	beq.n	80054b6 <USBD_CDC_Setup+0xd6>
 8005486:	2b0b      	cmp	r3, #11
 8005488:	d029      	beq.n	80054de <USBD_CDC_Setup+0xfe>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d133      	bne.n	80054f6 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005494:	2b03      	cmp	r3, #3
 8005496:	d107      	bne.n	80054a8 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005498:	f107 030c 	add.w	r3, r7, #12
 800549c:	2202      	movs	r2, #2
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f001 f975 	bl	8006790 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80054a6:	e02e      	b.n	8005506 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f001 f905 	bl	80066ba <USBD_CtlError>
			  ret = USBD_FAIL;
 80054b0:	2302      	movs	r3, #2
 80054b2:	75fb      	strb	r3, [r7, #23]
      break;
 80054b4:	e027      	b.n	8005506 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d107      	bne.n	80054d0 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80054c0:	f107 030f 	add.w	r3, r7, #15
 80054c4:	2201      	movs	r2, #1
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f001 f961 	bl	8006790 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80054ce:	e01a      	b.n	8005506 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f001 f8f1 	bl	80066ba <USBD_CtlError>
			  ret = USBD_FAIL;
 80054d8:	2302      	movs	r3, #2
 80054da:	75fb      	strb	r3, [r7, #23]
      break;
 80054dc:	e013      	b.n	8005506 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d00d      	beq.n	8005504 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f001 f8e5 	bl	80066ba <USBD_CtlError>
			  ret = USBD_FAIL;
 80054f0:	2302      	movs	r3, #2
 80054f2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80054f4:	e006      	b.n	8005504 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f001 f8de 	bl	80066ba <USBD_CtlError>
      ret = USBD_FAIL;
 80054fe:	2302      	movs	r3, #2
 8005500:	75fb      	strb	r3, [r7, #23]
      break;
 8005502:	e000      	b.n	8005506 <USBD_CDC_Setup+0x126>
      break;
 8005504:	bf00      	nop
    }
    break;
 8005506:	e006      	b.n	8005516 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 f8d5 	bl	80066ba <USBD_CtlError>
    ret = USBD_FAIL;
 8005510:	2302      	movs	r3, #2
 8005512:	75fb      	strb	r3, [r7, #23]
    break;
 8005514:	bf00      	nop
  }

  return ret;
 8005516:	7dfb      	ldrb	r3, [r7, #23]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005532:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800553a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005542:	2b00      	cmp	r3, #0
 8005544:	d037      	beq.n	80055b6 <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005546:	78fa      	ldrb	r2, [r7, #3]
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	331c      	adds	r3, #28
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d026      	beq.n	80055aa <USBD_CDC_DataIn+0x8a>
 800555c:	78fa      	ldrb	r2, [r7, #3]
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	331c      	adds	r3, #28
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	0152      	lsls	r2, r2, #5
 8005574:	440a      	add	r2, r1
 8005576:	3238      	adds	r2, #56	; 0x38
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	fbb3 f1f2 	udiv	r1, r3, r2
 800557e:	fb02 f201 	mul.w	r2, r2, r1
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d110      	bne.n	80055aa <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005588:	78fa      	ldrb	r2, [r7, #3]
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	331c      	adds	r3, #28
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800559c:	78f9      	ldrb	r1, [r7, #3]
 800559e:	2300      	movs	r3, #0
 80055a0:	2200      	movs	r2, #0
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f001 fe16 	bl	80071d4 <USBD_LL_Transmit>
 80055a8:	e003      	b.n	80055b2 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	e000      	b.n	80055b8 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80055b6:	2302      	movs	r3, #2
  }
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f001 fe6f 	bl	80072bc <USBD_LL_GetRxDataSize>
 80055de:	4602      	mov	r2, r0
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00d      	beq.n	800560c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005604:	4611      	mov	r1, r2
 8005606:	4798      	blx	r3

    return USBD_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	e000      	b.n	800560e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800560c:	2302      	movs	r3, #2
  }
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005624:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800562c:	2b00      	cmp	r3, #0
 800562e:	d015      	beq.n	800565c <USBD_CDC_EP0_RxReady+0x46>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005636:	2bff      	cmp	r3, #255	; 0xff
 8005638:	d010      	beq.n	800565c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005648:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005650:	b292      	uxth	r2, r2
 8005652:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	22ff      	movs	r2, #255	; 0xff
 8005658:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2243      	movs	r2, #67	; 0x43
 8005674:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005676:	4b03      	ldr	r3, [pc, #12]	; (8005684 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	20000094 	.word	0x20000094

08005688 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2243      	movs	r2, #67	; 0x43
 8005694:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005696:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	20000050 	.word	0x20000050

080056a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2243      	movs	r2, #67	; 0x43
 80056b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80056b6:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	200000d8 	.word	0x200000d8

080056c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	220a      	movs	r2, #10
 80056d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80056d6:	4b03      	ldr	r3, [pc, #12]	; (80056e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	2000000c 	.word	0x2000000c

080056e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80056f2:	2302      	movs	r3, #2
 80056f4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005708:	7bfb      	ldrb	r3, [r7, #15]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005716:	b480      	push	{r7}
 8005718:	b087      	sub	sp, #28
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	4613      	mov	r3, r2
 8005722:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800572a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005734:	88fa      	ldrh	r2, [r7, #6]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800575a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005780:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01c      	beq.n	80057c6 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005792:	2b00      	cmp	r3, #0
 8005794:	d115      	bne.n	80057c2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2181      	movs	r1, #129	; 0x81
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 fd0b 	bl	80071d4 <USBD_LL_Transmit>

      return USBD_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e002      	b.n	80057c8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80057c6:	2302      	movs	r3, #2
  }
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80057de:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d017      	beq.n	800581a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	7c1b      	ldrb	r3, [r3, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057fc:	2101      	movs	r1, #1
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fd22 	bl	8007248 <USBD_LL_PrepareReceive>
 8005804:	e007      	b.n	8005816 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800580c:	2340      	movs	r3, #64	; 0x40
 800580e:	2101      	movs	r1, #1
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f001 fd19 	bl	8007248 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	e000      	b.n	800581c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800581a:	2302      	movs	r3, #2
  }
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	4613      	mov	r3, r2
 8005830:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005838:	2302      	movs	r3, #2
 800583a:	e01a      	b.n	8005872 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	79fa      	ldrb	r2, [r7, #7]
 8005868:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f001 fae2 	bl	8006e34 <USBD_LL_Init>

  return USBD_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d006      	beq.n	800589c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
 800589a:	e001      	b.n	80058a0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800589c:	2302      	movs	r3, #2
 800589e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 fb1e 	bl	8006ef8 <USBD_LL_Start>

  return USBD_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80058e8:	2302      	movs	r3, #2
 80058ea:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00c      	beq.n	8005910 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	78fa      	ldrb	r2, [r7, #3]
 8005900:	4611      	mov	r1, r2
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800590c:	2300      	movs	r3, #0
 800590e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005910:	7bfb      	ldrb	r3, [r7, #15]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b082      	sub	sp, #8
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	460b      	mov	r3, r1
 8005924:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	78fa      	ldrb	r2, [r7, #3]
 8005930:	4611      	mov	r1, r2
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	4798      	blx	r3
  return USBD_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fe74 	bl	8006640 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8005966:	461a      	mov	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8005974:	f003 031f 	and.w	r3, r3, #31
 8005978:	2b01      	cmp	r3, #1
 800597a:	d00c      	beq.n	8005996 <USBD_LL_SetupStage+0x56>
 800597c:	2b01      	cmp	r3, #1
 800597e:	d302      	bcc.n	8005986 <USBD_LL_SetupStage+0x46>
 8005980:	2b02      	cmp	r3, #2
 8005982:	d010      	beq.n	80059a6 <USBD_LL_SetupStage+0x66>
 8005984:	e017      	b.n	80059b6 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f9c8 	bl	8005d24 <USBD_StdDevReq>
    break;
 8005994:	e01a      	b.n	80059cc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fa2a 	bl	8005df8 <USBD_StdItfReq>
    break;
 80059a4:	e012      	b.n	80059cc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fa68 	bl	8005e84 <USBD_StdEPReq>
    break;
 80059b4:	e00a      	b.n	80059cc <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80059bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 fb3d 	bl	8007044 <USBD_LL_StallEP>
    break;
 80059ca:	bf00      	nop
  }

  return USBD_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b086      	sub	sp, #24
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	460b      	mov	r3, r1
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80059e4:	7afb      	ldrb	r3, [r7, #11]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d14b      	bne.n	8005a82 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80059f0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d134      	bne.n	8005a66 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d919      	bls.n	8005a3c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	1ad2      	subs	r2, r2, r3
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d203      	bcs.n	8005a2a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	e002      	b.n	8005a30 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fef7 	bl	8006828 <USBD_CtlContinueRx>
 8005a3a:	e038      	b.n	8005aae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d105      	bne.n	8005a5e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fef4 	bl	800684c <USBD_CtlSendStatus>
 8005a64:	e023      	b.n	8005aae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005a6c:	2b05      	cmp	r3, #5
 8005a6e:	d11e      	bne.n	8005aae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8005a78:	2100      	movs	r1, #0
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f001 fae2 	bl	8007044 <USBD_LL_StallEP>
 8005a80:	e015      	b.n	8005aae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00d      	beq.n	8005aaa <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d108      	bne.n	8005aaa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	7afa      	ldrb	r2, [r7, #11]
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	4798      	blx	r3
 8005aa8:	e001      	b.n	8005aae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e000      	b.n	8005ab0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8005ac6:	7afb      	ldrb	r3, [r7, #11]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d17f      	bne.n	8005bcc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3314      	adds	r3, #20
 8005ad0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d15c      	bne.n	8005b96 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d915      	bls.n	8005b14 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	1ad2      	subs	r2, r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fe61 	bl	80067c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005b06:	2300      	movs	r3, #0
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f001 fb9b 	bl	8007248 <USBD_LL_PrepareReceive>
 8005b12:	e04e      	b.n	8005bb2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	6912      	ldr	r2, [r2, #16]
 8005b1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b20:	fb02 f201 	mul.w	r2, r2, r1
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d11c      	bne.n	8005b64 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d316      	bcc.n	8005b64 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d20f      	bcs.n	8005b64 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b44:	2200      	movs	r2, #0
 8005b46:	2100      	movs	r1, #0
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fe3d 	bl	80067c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005b56:	2300      	movs	r3, #0
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f001 fb73 	bl	8007248 <USBD_LL_PrepareReceive>
 8005b62:	e026      	b.n	8005bb2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d105      	bne.n	8005b86 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005b86:	2180      	movs	r1, #128	; 0x80
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f001 fa5b 	bl	8007044 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fe6f 	bl	8006872 <USBD_CtlReceiveStatus>
 8005b94:	e00d      	b.n	8005bb2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d004      	beq.n	8005baa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d103      	bne.n	8005bb2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005baa:	2180      	movs	r1, #128	; 0x80
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f001 fa49 	bl	8007044 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d11d      	bne.n	8005bf8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff fe82 	bl	80058c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8005bca:	e015      	b.n	8005bf8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00d      	beq.n	8005bf4 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d108      	bne.n	8005bf4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	7afa      	ldrb	r2, [r7, #11]
 8005bec:	4611      	mov	r1, r2
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	4798      	blx	r3
 8005bf2:	e001      	b.n	8005bf8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e000      	b.n	8005bfa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c0a:	2340      	movs	r3, #64	; 0x40
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2100      	movs	r1, #0
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 f9a3 	bl	8006f5c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2240      	movs	r2, #64	; 0x40
 8005c22:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c26:	2340      	movs	r3, #64	; 0x40
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2180      	movs	r1, #128	; 0x80
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 f995 	bl	8006f5c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2240      	movs	r2, #64	; 0x40
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d009      	beq.n	8005c7a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6852      	ldr	r2, [r2, #4]
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	4611      	mov	r1, r2
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	4798      	blx	r3
  }

  return USBD_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	78fa      	ldrb	r2, [r7, #3]
 8005c94:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2204      	movs	r2, #4
 8005cbc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d10b      	bne.n	8005d1a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d004      	beq.n	8005d48 <USBD_StdDevReq+0x24>
 8005d3e:	2b40      	cmp	r3, #64	; 0x40
 8005d40:	d002      	beq.n	8005d48 <USBD_StdDevReq+0x24>
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <USBD_StdDevReq+0x34>
 8005d46:	e04c      	b.n	8005de2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4798      	blx	r3
    break;
 8005d56:	e049      	b.n	8005dec <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	785b      	ldrb	r3, [r3, #1]
 8005d5c:	2b09      	cmp	r3, #9
 8005d5e:	d83a      	bhi.n	8005dd6 <USBD_StdDevReq+0xb2>
 8005d60:	a201      	add	r2, pc, #4	; (adr r2, 8005d68 <USBD_StdDevReq+0x44>)
 8005d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d66:	bf00      	nop
 8005d68:	08005db9 	.word	0x08005db9
 8005d6c:	08005dcd 	.word	0x08005dcd
 8005d70:	08005dd7 	.word	0x08005dd7
 8005d74:	08005dc3 	.word	0x08005dc3
 8005d78:	08005dd7 	.word	0x08005dd7
 8005d7c:	08005d9b 	.word	0x08005d9b
 8005d80:	08005d91 	.word	0x08005d91
 8005d84:	08005dd7 	.word	0x08005dd7
 8005d88:	08005daf 	.word	0x08005daf
 8005d8c:	08005da5 	.word	0x08005da5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f9d2 	bl	800613c <USBD_GetDescriptor>
      break;
 8005d98:	e022      	b.n	8005de0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fae3 	bl	8006368 <USBD_SetAddress>
      break;
 8005da2:	e01d      	b.n	8005de0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fb20 	bl	80063ec <USBD_SetConfig>
      break;
 8005dac:	e018      	b.n	8005de0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fba9 	bl	8006508 <USBD_GetConfig>
      break;
 8005db6:	e013      	b.n	8005de0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fbd8 	bl	8006570 <USBD_GetStatus>
      break;
 8005dc0:	e00e      	b.n	8005de0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fc06 	bl	80065d6 <USBD_SetFeature>
      break;
 8005dca:	e009      	b.n	8005de0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fc15 	bl	80065fe <USBD_ClrFeature>
      break;
 8005dd4:	e004      	b.n	8005de0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fc6e 	bl	80066ba <USBD_CtlError>
      break;
 8005dde:	bf00      	nop
    }
    break;
 8005de0:	e004      	b.n	8005dec <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fc68 	bl	80066ba <USBD_CtlError>
    break;
 8005dea:	bf00      	nop
  }

  return ret;
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop

08005df8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d003      	beq.n	8005e1a <USBD_StdItfReq+0x22>
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d001      	beq.n	8005e1a <USBD_StdItfReq+0x22>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d12a      	bne.n	8005e70 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005e20:	3b01      	subs	r3, #1
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d81d      	bhi.n	8005e62 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	889b      	ldrh	r3, [r3, #4]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d813      	bhi.n	8005e58 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	4798      	blx	r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	88db      	ldrh	r3, [r3, #6]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d110      	bne.n	8005e6c <USBD_StdItfReq+0x74>
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10d      	bne.n	8005e6c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fcfb 	bl	800684c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005e56:	e009      	b.n	8005e6c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fc2d 	bl	80066ba <USBD_CtlError>
      break;
 8005e60:	e004      	b.n	8005e6c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fc28 	bl	80066ba <USBD_CtlError>
      break;
 8005e6a:	e000      	b.n	8005e6e <USBD_StdItfReq+0x76>
      break;
 8005e6c:	bf00      	nop
    }
    break;
 8005e6e:	e004      	b.n	8005e7a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fc21 	bl	80066ba <USBD_CtlError>
    break;
 8005e78:	bf00      	nop
  }

  return USBD_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	889b      	ldrh	r3, [r3, #4]
 8005e96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d004      	beq.n	8005eae <USBD_StdEPReq+0x2a>
 8005ea4:	2b40      	cmp	r3, #64	; 0x40
 8005ea6:	d002      	beq.n	8005eae <USBD_StdEPReq+0x2a>
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d008      	beq.n	8005ebe <USBD_StdEPReq+0x3a>
 8005eac:	e13b      	b.n	8006126 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
    break;
 8005ebc:	e138      	b.n	8006130 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d10a      	bne.n	8005ee0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
 8005ed8:	4603      	mov	r3, r0
 8005eda:	73fb      	strb	r3, [r7, #15]

      return ret;
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	e128      	b.n	8006132 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d03e      	beq.n	8005f66 <USBD_StdEPReq+0xe2>
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d002      	beq.n	8005ef2 <USBD_StdEPReq+0x6e>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d070      	beq.n	8005fd2 <USBD_StdEPReq+0x14e>
 8005ef0:	e113      	b.n	800611a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d002      	beq.n	8005f02 <USBD_StdEPReq+0x7e>
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d015      	beq.n	8005f2c <USBD_StdEPReq+0xa8>
 8005f00:	e02b      	b.n	8005f5a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f02:	7bbb      	ldrb	r3, [r7, #14]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00c      	beq.n	8005f22 <USBD_StdEPReq+0x9e>
 8005f08:	7bbb      	ldrb	r3, [r7, #14]
 8005f0a:	2b80      	cmp	r3, #128	; 0x80
 8005f0c:	d009      	beq.n	8005f22 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 f896 	bl	8007044 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005f18:	2180      	movs	r1, #128	; 0x80
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 f892 	bl	8007044 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005f20:	e020      	b.n	8005f64 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fbc8 	bl	80066ba <USBD_CtlError>
        break;
 8005f2a:	e01b      	b.n	8005f64 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	885b      	ldrh	r3, [r3, #2]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10e      	bne.n	8005f52 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <USBD_StdEPReq+0xce>
 8005f3a:	7bbb      	ldrb	r3, [r7, #14]
 8005f3c:	2b80      	cmp	r3, #128	; 0x80
 8005f3e:	d008      	beq.n	8005f52 <USBD_StdEPReq+0xce>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	88db      	ldrh	r3, [r3, #6]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d104      	bne.n	8005f52 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8005f48:	7bbb      	ldrb	r3, [r7, #14]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f001 f879 	bl	8007044 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fc7a 	bl	800684c <USBD_CtlSendStatus>

        break;
 8005f58:	e004      	b.n	8005f64 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fbac 	bl	80066ba <USBD_CtlError>
        break;
 8005f62:	bf00      	nop
      }
      break;
 8005f64:	e0de      	b.n	8006124 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d002      	beq.n	8005f76 <USBD_StdEPReq+0xf2>
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d015      	beq.n	8005fa0 <USBD_StdEPReq+0x11c>
 8005f74:	e026      	b.n	8005fc4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f76:	7bbb      	ldrb	r3, [r7, #14]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00c      	beq.n	8005f96 <USBD_StdEPReq+0x112>
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	2b80      	cmp	r3, #128	; 0x80
 8005f80:	d009      	beq.n	8005f96 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005f82:	7bbb      	ldrb	r3, [r7, #14]
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f001 f85c 	bl	8007044 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005f8c:	2180      	movs	r1, #128	; 0x80
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 f858 	bl	8007044 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005f94:	e01c      	b.n	8005fd0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fb8e 	bl	80066ba <USBD_CtlError>
        break;
 8005f9e:	e017      	b.n	8005fd0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	885b      	ldrh	r3, [r3, #2]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d112      	bne.n	8005fce <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005fa8:	7bbb      	ldrb	r3, [r7, #14]
 8005faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d004      	beq.n	8005fbc <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005fb2:	7bbb      	ldrb	r3, [r7, #14]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f001 f87a 	bl	80070b0 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fc45 	bl	800684c <USBD_CtlSendStatus>
        }
        break;
 8005fc2:	e004      	b.n	8005fce <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fb77 	bl	80066ba <USBD_CtlError>
        break;
 8005fcc:	e000      	b.n	8005fd0 <USBD_StdEPReq+0x14c>
        break;
 8005fce:	bf00      	nop
      }
      break;
 8005fd0:	e0a8      	b.n	8006124 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d002      	beq.n	8005fe2 <USBD_StdEPReq+0x15e>
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d031      	beq.n	8006044 <USBD_StdEPReq+0x1c0>
 8005fe0:	e095      	b.n	800610e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <USBD_StdEPReq+0x174>
 8005fe8:	7bbb      	ldrb	r3, [r7, #14]
 8005fea:	2b80      	cmp	r3, #128	; 0x80
 8005fec:	d004      	beq.n	8005ff8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fb62 	bl	80066ba <USBD_CtlError>
          break;
 8005ff6:	e08f      	b.n	8006118 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	da0b      	bge.n	8006018 <USBD_StdEPReq+0x194>
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	3310      	adds	r3, #16
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4413      	add	r3, r2
 8006014:	3304      	adds	r3, #4
 8006016:	e00a      	b.n	800602e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006018:	7bbb      	ldrb	r3, [r7, #14]
 800601a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	4413      	add	r3, r2
 800602e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2202      	movs	r2, #2
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fba7 	bl	8006790 <USBD_CtlSendData>
          break;
 8006042:	e069      	b.n	8006118 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006048:	2b00      	cmp	r3, #0
 800604a:	da11      	bge.n	8006070 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800604c:	7bbb      	ldrb	r3, [r7, #14]
 800604e:	f003 020f 	and.w	r2, r3, #15
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	3318      	adds	r3, #24
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d117      	bne.n	8006096 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fb26 	bl	80066ba <USBD_CtlError>
            break;
 800606e:	e053      	b.n	8006118 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006070:	7bbb      	ldrb	r3, [r7, #14]
 8006072:	f003 020f 	and.w	r2, r3, #15
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d104      	bne.n	8006096 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fb13 	bl	80066ba <USBD_CtlError>
            break;
 8006094:	e040      	b.n	8006118 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800609a:	2b00      	cmp	r3, #0
 800609c:	da0b      	bge.n	80060b6 <USBD_StdEPReq+0x232>
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	3310      	adds	r3, #16
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	4413      	add	r3, r2
 80060b2:	3304      	adds	r3, #4
 80060b4:	e00a      	b.n	80060cc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	4413      	add	r3, r2
 80060cc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060ce:	7bbb      	ldrb	r3, [r7, #14]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <USBD_StdEPReq+0x256>
 80060d4:	7bbb      	ldrb	r3, [r7, #14]
 80060d6:	2b80      	cmp	r3, #128	; 0x80
 80060d8:	d103      	bne.n	80060e2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	e00e      	b.n	8006100 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80060e2:	7bbb      	ldrb	r3, [r7, #14]
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f001 f818 	bl	800711c <USBD_LL_IsStallEP>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	e002      	b.n	8006100 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2202      	movs	r2, #2
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fb42 	bl	8006790 <USBD_CtlSendData>
          break;
 800610c:	e004      	b.n	8006118 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fad2 	bl	80066ba <USBD_CtlError>
        break;
 8006116:	bf00      	nop
      }
      break;
 8006118:	e004      	b.n	8006124 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 facc 	bl	80066ba <USBD_CtlError>
      break;
 8006122:	bf00      	nop
    }
    break;
 8006124:	e004      	b.n	8006130 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fac6 	bl	80066ba <USBD_CtlError>
    break;
 800612e:	bf00      	nop
  }

  return ret;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	885b      	ldrh	r3, [r3, #2]
 800614a:	0a1b      	lsrs	r3, r3, #8
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	2b0e      	cmp	r3, #14
 8006152:	f200 80e5 	bhi.w	8006320 <USBD_GetDescriptor+0x1e4>
 8006156:	a201      	add	r2, pc, #4	; (adr r2, 800615c <USBD_GetDescriptor+0x20>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	080061b1 	.word	0x080061b1
 8006160:	080061c9 	.word	0x080061c9
 8006164:	08006209 	.word	0x08006209
 8006168:	08006321 	.word	0x08006321
 800616c:	08006321 	.word	0x08006321
 8006170:	080062cd 	.word	0x080062cd
 8006174:	080062f3 	.word	0x080062f3
 8006178:	08006321 	.word	0x08006321
 800617c:	08006321 	.word	0x08006321
 8006180:	08006321 	.word	0x08006321
 8006184:	08006321 	.word	0x08006321
 8006188:	08006321 	.word	0x08006321
 800618c:	08006321 	.word	0x08006321
 8006190:	08006321 	.word	0x08006321
 8006194:	08006199 	.word	0x08006199
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	7c12      	ldrb	r2, [r2, #16]
 80061a4:	f107 010a 	add.w	r1, r7, #10
 80061a8:	4610      	mov	r0, r2
 80061aa:	4798      	blx	r3
 80061ac:	60f8      	str	r0, [r7, #12]
    break;
 80061ae:	e0bc      	b.n	800632a <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	7c12      	ldrb	r2, [r2, #16]
 80061bc:	f107 010a 	add.w	r1, r7, #10
 80061c0:	4610      	mov	r0, r2
 80061c2:	4798      	blx	r3
 80061c4:	60f8      	str	r0, [r7, #12]
    break;
 80061c6:	e0b0      	b.n	800632a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	7c1b      	ldrb	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10d      	bne.n	80061ec <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	f107 020a 	add.w	r2, r7, #10
 80061dc:	4610      	mov	r0, r2
 80061de:	4798      	blx	r3
 80061e0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3301      	adds	r3, #1
 80061e6:	2202      	movs	r2, #2
 80061e8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80061ea:	e09e      	b.n	800632a <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	f107 020a 	add.w	r2, r7, #10
 80061f8:	4610      	mov	r0, r2
 80061fa:	4798      	blx	r3
 80061fc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3301      	adds	r3, #1
 8006202:	2202      	movs	r2, #2
 8006204:	701a      	strb	r2, [r3, #0]
    break;
 8006206:	e090      	b.n	800632a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	885b      	ldrh	r3, [r3, #2]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b05      	cmp	r3, #5
 8006210:	d856      	bhi.n	80062c0 <USBD_GetDescriptor+0x184>
 8006212:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <USBD_GetDescriptor+0xdc>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006231 	.word	0x08006231
 800621c:	08006249 	.word	0x08006249
 8006220:	08006261 	.word	0x08006261
 8006224:	08006279 	.word	0x08006279
 8006228:	08006291 	.word	0x08006291
 800622c:	080062a9 	.word	0x080062a9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	7c12      	ldrb	r2, [r2, #16]
 800623c:	f107 010a 	add.w	r1, r7, #10
 8006240:	4610      	mov	r0, r2
 8006242:	4798      	blx	r3
 8006244:	60f8      	str	r0, [r7, #12]
      break;
 8006246:	e040      	b.n	80062ca <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	7c12      	ldrb	r2, [r2, #16]
 8006254:	f107 010a 	add.w	r1, r7, #10
 8006258:	4610      	mov	r0, r2
 800625a:	4798      	blx	r3
 800625c:	60f8      	str	r0, [r7, #12]
      break;
 800625e:	e034      	b.n	80062ca <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	7c12      	ldrb	r2, [r2, #16]
 800626c:	f107 010a 	add.w	r1, r7, #10
 8006270:	4610      	mov	r0, r2
 8006272:	4798      	blx	r3
 8006274:	60f8      	str	r0, [r7, #12]
      break;
 8006276:	e028      	b.n	80062ca <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	7c12      	ldrb	r2, [r2, #16]
 8006284:	f107 010a 	add.w	r1, r7, #10
 8006288:	4610      	mov	r0, r2
 800628a:	4798      	blx	r3
 800628c:	60f8      	str	r0, [r7, #12]
      break;
 800628e:	e01c      	b.n	80062ca <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	7c12      	ldrb	r2, [r2, #16]
 800629c:	f107 010a 	add.w	r1, r7, #10
 80062a0:	4610      	mov	r0, r2
 80062a2:	4798      	blx	r3
 80062a4:	60f8      	str	r0, [r7, #12]
      break;
 80062a6:	e010      	b.n	80062ca <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	7c12      	ldrb	r2, [r2, #16]
 80062b4:	f107 010a 	add.w	r1, r7, #10
 80062b8:	4610      	mov	r0, r2
 80062ba:	4798      	blx	r3
 80062bc:	60f8      	str	r0, [r7, #12]
      break;
 80062be:	e004      	b.n	80062ca <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f9f9 	bl	80066ba <USBD_CtlError>
      return;
 80062c8:	e04b      	b.n	8006362 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 80062ca:	e02e      	b.n	800632a <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	7c1b      	ldrb	r3, [r3, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d109      	bne.n	80062e8 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80062da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062dc:	f107 020a 	add.w	r2, r7, #10
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
 80062e4:	60f8      	str	r0, [r7, #12]
      break;
 80062e6:	e020      	b.n	800632a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f9e5 	bl	80066ba <USBD_CtlError>
      return;
 80062f0:	e037      	b.n	8006362 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	7c1b      	ldrb	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10d      	bne.n	8006316 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	f107 020a 	add.w	r2, r7, #10
 8006306:	4610      	mov	r0, r2
 8006308:	4798      	blx	r3
 800630a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3301      	adds	r3, #1
 8006310:	2207      	movs	r2, #7
 8006312:	701a      	strb	r2, [r3, #0]
      break;
 8006314:	e009      	b.n	800632a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006316:	6839      	ldr	r1, [r7, #0]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f9ce 	bl	80066ba <USBD_CtlError>
      return;
 800631e:	e020      	b.n	8006362 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f9c9 	bl	80066ba <USBD_CtlError>
    return;
 8006328:	e01b      	b.n	8006362 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 800632a:	897b      	ldrh	r3, [r7, #10]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d011      	beq.n	8006354 <USBD_GetDescriptor+0x218>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	88db      	ldrh	r3, [r3, #6]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00d      	beq.n	8006354 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	88da      	ldrh	r2, [r3, #6]
 800633c:	897b      	ldrh	r3, [r7, #10]
 800633e:	4293      	cmp	r3, r2
 8006340:	bf28      	it	cs
 8006342:	4613      	movcs	r3, r2
 8006344:	b29b      	uxth	r3, r3
 8006346:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006348:	897b      	ldrh	r3, [r7, #10]
 800634a:	461a      	mov	r2, r3
 800634c:	68f9      	ldr	r1, [r7, #12]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fa1e 	bl	8006790 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	88db      	ldrh	r3, [r3, #6]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d102      	bne.n	8006362 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fa75 	bl	800684c <USBD_CtlSendStatus>
  }
}
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	889b      	ldrh	r3, [r3, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d130      	bne.n	80063dc <USBD_SetAddress+0x74>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	88db      	ldrh	r3, [r3, #6]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d12c      	bne.n	80063dc <USBD_SetAddress+0x74>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	885b      	ldrh	r3, [r3, #2]
 8006386:	2b7f      	cmp	r3, #127	; 0x7f
 8006388:	d828      	bhi.n	80063dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	885b      	ldrh	r3, [r3, #2]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006394:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800639c:	2b03      	cmp	r3, #3
 800639e:	d104      	bne.n	80063aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f989 	bl	80066ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a8:	e01c      	b.n	80063e4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	7bfa      	ldrb	r2, [r7, #15]
 80063ae:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fed6 	bl	8007168 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fa45 	bl	800684c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d004      	beq.n	80063d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063d0:	e008      	b.n	80063e4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063da:	e003      	b.n	80063e4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f96b 	bl	80066ba <USBD_CtlError>
  }
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	885b      	ldrh	r3, [r3, #2]
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	4b41      	ldr	r3, [pc, #260]	; (8006504 <USBD_SetConfig+0x118>)
 80063fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006400:	4b40      	ldr	r3, [pc, #256]	; (8006504 <USBD_SetConfig+0x118>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d904      	bls.n	8006412 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f955 	bl	80066ba <USBD_CtlError>
 8006410:	e075      	b.n	80064fe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006418:	2b02      	cmp	r3, #2
 800641a:	d002      	beq.n	8006422 <USBD_SetConfig+0x36>
 800641c:	2b03      	cmp	r3, #3
 800641e:	d023      	beq.n	8006468 <USBD_SetConfig+0x7c>
 8006420:	e062      	b.n	80064e8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8006422:	4b38      	ldr	r3, [pc, #224]	; (8006504 <USBD_SetConfig+0x118>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01a      	beq.n	8006460 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800642a:	4b36      	ldr	r3, [pc, #216]	; (8006504 <USBD_SetConfig+0x118>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2203      	movs	r2, #3
 8006438:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800643c:	4b31      	ldr	r3, [pc, #196]	; (8006504 <USBD_SetConfig+0x118>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7ff fa4a 	bl	80058dc <USBD_SetClassConfig>
 8006448:	4603      	mov	r3, r0
 800644a:	2b02      	cmp	r3, #2
 800644c:	d104      	bne.n	8006458 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800644e:	6839      	ldr	r1, [r7, #0]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f932 	bl	80066ba <USBD_CtlError>
          return;
 8006456:	e052      	b.n	80064fe <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f9f7 	bl	800684c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800645e:	e04e      	b.n	80064fe <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f9f3 	bl	800684c <USBD_CtlSendStatus>
      break;
 8006466:	e04a      	b.n	80064fe <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006468:	4b26      	ldr	r3, [pc, #152]	; (8006504 <USBD_SetConfig+0x118>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d112      	bne.n	8006496 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8006478:	4b22      	ldr	r3, [pc, #136]	; (8006504 <USBD_SetConfig+0x118>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8006482:	4b20      	ldr	r3, [pc, #128]	; (8006504 <USBD_SetConfig+0x118>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7ff fa46 	bl	800591a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f9dc 	bl	800684c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006494:	e033      	b.n	80064fe <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8006496:	4b1b      	ldr	r3, [pc, #108]	; (8006504 <USBD_SetConfig+0x118>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d01d      	beq.n	80064e0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff fa34 	bl	800591a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80064b2:	4b14      	ldr	r3, [pc, #80]	; (8006504 <USBD_SetConfig+0x118>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80064bc:	4b11      	ldr	r3, [pc, #68]	; (8006504 <USBD_SetConfig+0x118>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fa0a 	bl	80058dc <USBD_SetClassConfig>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d104      	bne.n	80064d8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f8f2 	bl	80066ba <USBD_CtlError>
          return;
 80064d6:	e012      	b.n	80064fe <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f9b7 	bl	800684c <USBD_CtlSendStatus>
      break;
 80064de:	e00e      	b.n	80064fe <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f9b3 	bl	800684c <USBD_CtlSendStatus>
      break;
 80064e6:	e00a      	b.n	80064fe <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f8e5 	bl	80066ba <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80064f0:	4b04      	ldr	r3, [pc, #16]	; (8006504 <USBD_SetConfig+0x118>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff fa0f 	bl	800591a <USBD_ClrClassConfig>
      break;
 80064fc:	bf00      	nop
    }
  }
}
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000210 	.word	0x20000210

08006508 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	88db      	ldrh	r3, [r3, #6]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d004      	beq.n	8006524 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f8cc 	bl	80066ba <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8006522:	e021      	b.n	8006568 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800652a:	2b01      	cmp	r3, #1
 800652c:	db17      	blt.n	800655e <USBD_GetConfig+0x56>
 800652e:	2b02      	cmp	r3, #2
 8006530:	dd02      	ble.n	8006538 <USBD_GetConfig+0x30>
 8006532:	2b03      	cmp	r3, #3
 8006534:	d00b      	beq.n	800654e <USBD_GetConfig+0x46>
 8006536:	e012      	b.n	800655e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3308      	adds	r3, #8
 8006542:	2201      	movs	r2, #1
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f922 	bl	8006790 <USBD_CtlSendData>
      break;
 800654c:	e00c      	b.n	8006568 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3304      	adds	r3, #4
 8006552:	2201      	movs	r2, #1
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f91a 	bl	8006790 <USBD_CtlSendData>
      break;
 800655c:	e004      	b.n	8006568 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f8aa 	bl	80066ba <USBD_CtlError>
      break;
 8006566:	bf00      	nop
}
 8006568:	bf00      	nop
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006580:	3b01      	subs	r3, #1
 8006582:	2b02      	cmp	r3, #2
 8006584:	d81e      	bhi.n	80065c4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	88db      	ldrh	r3, [r3, #6]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d004      	beq.n	8006598 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f892 	bl	80066ba <USBD_CtlError>
      break;
 8006596:	e01a      	b.n	80065ce <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f043 0202 	orr.w	r2, r3, #2
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	330c      	adds	r3, #12
 80065b8:	2202      	movs	r2, #2
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f8e7 	bl	8006790 <USBD_CtlSendData>
    break;
 80065c2:	e004      	b.n	80065ce <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f877 	bl	80066ba <USBD_CtlError>
    break;
 80065cc:	bf00      	nop
  }
}
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	885b      	ldrh	r3, [r3, #2]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d106      	bne.n	80065f6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f92b 	bl	800684c <USBD_CtlSendStatus>
  }

}
 80065f6:	bf00      	nop
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800660e:	3b01      	subs	r3, #1
 8006610:	2b02      	cmp	r3, #2
 8006612:	d80b      	bhi.n	800662c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	885b      	ldrh	r3, [r3, #2]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d10c      	bne.n	8006636 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f911 	bl	800684c <USBD_CtlSendStatus>
    }
    break;
 800662a:	e004      	b.n	8006636 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f843 	bl	80066ba <USBD_CtlError>
    break;
 8006634:	e000      	b.n	8006638 <USBD_ClrFeature+0x3a>
    break;
 8006636:	bf00      	nop
  }
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781a      	ldrb	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	785a      	ldrb	r2, [r3, #1]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	3302      	adds	r3, #2
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	b29a      	uxth	r2, r3
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	3303      	adds	r3, #3
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	b29b      	uxth	r3, r3
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	b29b      	uxth	r3, r3
 800666e:	4413      	add	r3, r2
 8006670:	b29a      	uxth	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	3304      	adds	r3, #4
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	b29a      	uxth	r2, r3
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	3305      	adds	r3, #5
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	b29b      	uxth	r3, r3
 800668a:	4413      	add	r3, r2
 800668c:	b29a      	uxth	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	3306      	adds	r3, #6
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b29a      	uxth	r2, r3
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	3307      	adds	r3, #7
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	4413      	add	r3, r2
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	80da      	strh	r2, [r3, #6]

}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80066c4:	2180      	movs	r1, #128	; 0x80
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fcbc 	bl	8007044 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80066cc:	2100      	movs	r1, #0
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fcb8 	bl	8007044 <USBD_LL_StallEP>
}
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d032      	beq.n	8006758 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 f834 	bl	8006760 <USBD_GetLen>
 80066f8:	4603      	mov	r3, r0
 80066fa:	3301      	adds	r3, #1
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	b29a      	uxth	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006706:	7dfb      	ldrb	r3, [r7, #23]
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	75fa      	strb	r2, [r7, #23]
 800670c:	461a      	mov	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4413      	add	r3, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	7812      	ldrb	r2, [r2, #0]
 8006716:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006718:	7dfb      	ldrb	r3, [r7, #23]
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	75fa      	strb	r2, [r7, #23]
 800671e:	461a      	mov	r2, r3
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	4413      	add	r3, r2
 8006724:	2203      	movs	r2, #3
 8006726:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006728:	e012      	b.n	8006750 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	60fa      	str	r2, [r7, #12]
 8006730:	7dfa      	ldrb	r2, [r7, #23]
 8006732:	1c51      	adds	r1, r2, #1
 8006734:	75f9      	strb	r1, [r7, #23]
 8006736:	4611      	mov	r1, r2
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	440a      	add	r2, r1
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	75fa      	strb	r2, [r7, #23]
 8006746:	461a      	mov	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4413      	add	r3, r2
 800674c:	2200      	movs	r2, #0
 800674e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e8      	bne.n	800672a <USBD_GetString+0x4e>
    }
  }
}
 8006758:	bf00      	nop
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800676c:	e005      	b.n	800677a <USBD_GetLen+0x1a>
    {
        len++;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
 8006770:	3301      	adds	r3, #1
 8006772:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3301      	adds	r3, #1
 8006778:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f5      	bne.n	800676e <USBD_GetLen+0xe>
    }

    return len;
 8006782:	7bfb      	ldrb	r3, [r7, #15]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	4613      	mov	r3, r2
 800679c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2202      	movs	r2, #2
 80067a2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80067a6:	88fa      	ldrh	r2, [r7, #6]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80067ac:	88fa      	ldrh	r2, [r7, #6]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	2100      	movs	r1, #0
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 fd0b 	bl	80071d4 <USBD_LL_Transmit>

  return USBD_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80067d6:	88fb      	ldrh	r3, [r7, #6]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	2100      	movs	r1, #0
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fcf9 	bl	80071d4 <USBD_LL_Transmit>

  return USBD_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2203      	movs	r2, #3
 80067fe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8006802:	88fa      	ldrh	r2, [r7, #6]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800680a:	88fa      	ldrh	r2, [r7, #6]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006812:	88fb      	ldrh	r3, [r7, #6]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	2100      	movs	r1, #0
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 fd15 	bl	8007248 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	4613      	mov	r3, r2
 8006834:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	2100      	movs	r1, #0
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 fd03 	bl	8007248 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2204      	movs	r2, #4
 8006858:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800685c:	2300      	movs	r3, #0
 800685e:	2200      	movs	r2, #0
 8006860:	2100      	movs	r1, #0
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fcb6 	bl	80071d4 <USBD_LL_Transmit>

  return USBD_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2205      	movs	r2, #5
 800687e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006882:	2300      	movs	r3, #0
 8006884:	2200      	movs	r2, #0
 8006886:	2100      	movs	r1, #0
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fcdd 	bl	8007248 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800689c:	2200      	movs	r2, #0
 800689e:	4912      	ldr	r1, [pc, #72]	; (80068e8 <MX_USB_DEVICE_Init+0x50>)
 80068a0:	4812      	ldr	r0, [pc, #72]	; (80068ec <MX_USB_DEVICE_Init+0x54>)
 80068a2:	f7fe ffbf 	bl	8005824 <USBD_Init>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80068ac:	f7f9 fe60 	bl	8000570 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80068b0:	490f      	ldr	r1, [pc, #60]	; (80068f0 <MX_USB_DEVICE_Init+0x58>)
 80068b2:	480e      	ldr	r0, [pc, #56]	; (80068ec <MX_USB_DEVICE_Init+0x54>)
 80068b4:	f7fe ffe1 	bl	800587a <USBD_RegisterClass>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80068be:	f7f9 fe57 	bl	8000570 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80068c2:	490c      	ldr	r1, [pc, #48]	; (80068f4 <MX_USB_DEVICE_Init+0x5c>)
 80068c4:	4809      	ldr	r0, [pc, #36]	; (80068ec <MX_USB_DEVICE_Init+0x54>)
 80068c6:	f7fe ff0f 	bl	80056e8 <USBD_CDC_RegisterInterface>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80068d0:	f7f9 fe4e 	bl	8000570 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80068d4:	4805      	ldr	r0, [pc, #20]	; (80068ec <MX_USB_DEVICE_Init+0x54>)
 80068d6:	f7fe ffea 	bl	80058ae <USBD_Start>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80068e0:	f7f9 fe46 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80068e4:	bf00      	nop
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	2000012c 	.word	0x2000012c
 80068ec:	200004a4 	.word	0x200004a4
 80068f0:	20000018 	.word	0x20000018
 80068f4:	2000011c 	.word	0x2000011c

080068f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80068fc:	2200      	movs	r2, #0
 80068fe:	4905      	ldr	r1, [pc, #20]	; (8006914 <CDC_Init_FS+0x1c>)
 8006900:	4805      	ldr	r0, [pc, #20]	; (8006918 <CDC_Init_FS+0x20>)
 8006902:	f7fe ff08 	bl	8005716 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006906:	4905      	ldr	r1, [pc, #20]	; (800691c <CDC_Init_FS+0x24>)
 8006908:	4803      	ldr	r0, [pc, #12]	; (8006918 <CDC_Init_FS+0x20>)
 800690a:	f7fe ff1e 	bl	800574a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800690e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006910:	4618      	mov	r0, r3
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20000b28 	.word	0x20000b28
 8006918:	200004a4 	.word	0x200004a4
 800691c:	20000740 	.word	0x20000740

08006920 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006924:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006926:	4618      	mov	r0, r3
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	6039      	str	r1, [r7, #0]
 800693a:	71fb      	strb	r3, [r7, #7]
 800693c:	4613      	mov	r3, r2
 800693e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	2b23      	cmp	r3, #35	; 0x23
 8006944:	d84a      	bhi.n	80069dc <CDC_Control_FS+0xac>
 8006946:	a201      	add	r2, pc, #4	; (adr r2, 800694c <CDC_Control_FS+0x1c>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	080069dd 	.word	0x080069dd
 8006950:	080069dd 	.word	0x080069dd
 8006954:	080069dd 	.word	0x080069dd
 8006958:	080069dd 	.word	0x080069dd
 800695c:	080069dd 	.word	0x080069dd
 8006960:	080069dd 	.word	0x080069dd
 8006964:	080069dd 	.word	0x080069dd
 8006968:	080069dd 	.word	0x080069dd
 800696c:	080069dd 	.word	0x080069dd
 8006970:	080069dd 	.word	0x080069dd
 8006974:	080069dd 	.word	0x080069dd
 8006978:	080069dd 	.word	0x080069dd
 800697c:	080069dd 	.word	0x080069dd
 8006980:	080069dd 	.word	0x080069dd
 8006984:	080069dd 	.word	0x080069dd
 8006988:	080069dd 	.word	0x080069dd
 800698c:	080069dd 	.word	0x080069dd
 8006990:	080069dd 	.word	0x080069dd
 8006994:	080069dd 	.word	0x080069dd
 8006998:	080069dd 	.word	0x080069dd
 800699c:	080069dd 	.word	0x080069dd
 80069a0:	080069dd 	.word	0x080069dd
 80069a4:	080069dd 	.word	0x080069dd
 80069a8:	080069dd 	.word	0x080069dd
 80069ac:	080069dd 	.word	0x080069dd
 80069b0:	080069dd 	.word	0x080069dd
 80069b4:	080069dd 	.word	0x080069dd
 80069b8:	080069dd 	.word	0x080069dd
 80069bc:	080069dd 	.word	0x080069dd
 80069c0:	080069dd 	.word	0x080069dd
 80069c4:	080069dd 	.word	0x080069dd
 80069c8:	080069dd 	.word	0x080069dd
 80069cc:	080069dd 	.word	0x080069dd
 80069d0:	080069dd 	.word	0x080069dd
 80069d4:	080069dd 	.word	0x080069dd
 80069d8:	080069dd 	.word	0x080069dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80069dc:	bf00      	nop
  }

  return (USBD_OK);
 80069de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	4805      	ldr	r0, [pc, #20]	; (8006a10 <CDC_Receive_FS+0x24>)
 80069fa:	f7fe fea6 	bl	800574a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80069fe:	4804      	ldr	r0, [pc, #16]	; (8006a10 <CDC_Receive_FS+0x24>)
 8006a00:	f7fe fee6 	bl	80057d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006a04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	200004a4 	.word	0x200004a4

08006a14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006a24:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <CDC_Transmit_FS+0x48>)
 8006a26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e00b      	b.n	8006a52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006a3a:	887b      	ldrh	r3, [r7, #2]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	4806      	ldr	r0, [pc, #24]	; (8006a5c <CDC_Transmit_FS+0x48>)
 8006a42:	f7fe fe68 	bl	8005716 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006a46:	4805      	ldr	r0, [pc, #20]	; (8006a5c <CDC_Transmit_FS+0x48>)
 8006a48:	f7fe fe93 	bl	8005772 <USBD_CDC_TransmitPacket>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	200004a4 	.word	0x200004a4

08006a60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	4603      	mov	r3, r0
 8006a68:	6039      	str	r1, [r7, #0]
 8006a6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2212      	movs	r2, #18
 8006a70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a72:	4b03      	ldr	r3, [pc, #12]	; (8006a80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	2000014c 	.word	0x2000014c

08006a84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	6039      	str	r1, [r7, #0]
 8006a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2204      	movs	r2, #4
 8006a94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006a96:	4b03      	ldr	r3, [pc, #12]	; (8006aa4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	2000016c 	.word	0x2000016c

08006aa8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	6039      	str	r1, [r7, #0]
 8006ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d105      	bne.n	8006ac6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	4907      	ldr	r1, [pc, #28]	; (8006adc <USBD_FS_ProductStrDescriptor+0x34>)
 8006abe:	4808      	ldr	r0, [pc, #32]	; (8006ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ac0:	f7ff fe0c 	bl	80066dc <USBD_GetString>
 8006ac4:	e004      	b.n	8006ad0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	4904      	ldr	r1, [pc, #16]	; (8006adc <USBD_FS_ProductStrDescriptor+0x34>)
 8006aca:	4805      	ldr	r0, [pc, #20]	; (8006ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006acc:	f7ff fe06 	bl	80066dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ad0:	4b02      	ldr	r3, [pc, #8]	; (8006adc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20000f10 	.word	0x20000f10
 8006ae0:	08007c58 	.word	0x08007c58

08006ae4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	6039      	str	r1, [r7, #0]
 8006aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	4904      	ldr	r1, [pc, #16]	; (8006b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006af4:	4804      	ldr	r0, [pc, #16]	; (8006b08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006af6:	f7ff fdf1 	bl	80066dc <USBD_GetString>
  return USBD_StrDesc;
 8006afa:	4b02      	ldr	r3, [pc, #8]	; (8006b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20000f10 	.word	0x20000f10
 8006b08:	08007c70 	.word	0x08007c70

08006b0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	6039      	str	r1, [r7, #0]
 8006b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	221a      	movs	r2, #26
 8006b1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b1e:	f000 f855 	bl	8006bcc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b22:	4b02      	ldr	r3, [pc, #8]	; (8006b2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20000170 	.word	0x20000170

08006b30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	6039      	str	r1, [r7, #0]
 8006b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d105      	bne.n	8006b4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	4907      	ldr	r1, [pc, #28]	; (8006b64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b46:	4808      	ldr	r0, [pc, #32]	; (8006b68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b48:	f7ff fdc8 	bl	80066dc <USBD_GetString>
 8006b4c:	e004      	b.n	8006b58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	4904      	ldr	r1, [pc, #16]	; (8006b64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b52:	4805      	ldr	r0, [pc, #20]	; (8006b68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b54:	f7ff fdc2 	bl	80066dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b58:	4b02      	ldr	r3, [pc, #8]	; (8006b64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20000f10 	.word	0x20000f10
 8006b68:	08007c84 	.word	0x08007c84

08006b6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	6039      	str	r1, [r7, #0]
 8006b76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d105      	bne.n	8006b8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	4907      	ldr	r1, [pc, #28]	; (8006ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b82:	4808      	ldr	r0, [pc, #32]	; (8006ba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b84:	f7ff fdaa 	bl	80066dc <USBD_GetString>
 8006b88:	e004      	b.n	8006b94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	4904      	ldr	r1, [pc, #16]	; (8006ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b8e:	4805      	ldr	r0, [pc, #20]	; (8006ba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b90:	f7ff fda4 	bl	80066dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b94:	4b02      	ldr	r3, [pc, #8]	; (8006ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000f10 	.word	0x20000f10
 8006ba4:	08007c90 	.word	0x08007c90

08006ba8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	6039      	str	r1, [r7, #0]
 8006bb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	220c      	movs	r2, #12
 8006bb8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006bba:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	20000160 	.word	0x20000160

08006bcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006bd2:	4b0f      	ldr	r3, [pc, #60]	; (8006c10 <Get_SerialNum+0x44>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	; (8006c14 <Get_SerialNum+0x48>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006bde:	4b0e      	ldr	r3, [pc, #56]	; (8006c18 <Get_SerialNum+0x4c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4413      	add	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006bf2:	2208      	movs	r2, #8
 8006bf4:	4909      	ldr	r1, [pc, #36]	; (8006c1c <Get_SerialNum+0x50>)
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 f814 	bl	8006c24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	4908      	ldr	r1, [pc, #32]	; (8006c20 <Get_SerialNum+0x54>)
 8006c00:	68b8      	ldr	r0, [r7, #8]
 8006c02:	f000 f80f 	bl	8006c24 <IntToUnicode>
  }
}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	1fff7590 	.word	0x1fff7590
 8006c14:	1fff7594 	.word	0x1fff7594
 8006c18:	1fff7598 	.word	0x1fff7598
 8006c1c:	20000172 	.word	0x20000172
 8006c20:	20000182 	.word	0x20000182

08006c24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c36:	2300      	movs	r3, #0
 8006c38:	75fb      	strb	r3, [r7, #23]
 8006c3a:	e027      	b.n	8006c8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	0f1b      	lsrs	r3, r3, #28
 8006c40:	2b09      	cmp	r3, #9
 8006c42:	d80b      	bhi.n	8006c5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	0f1b      	lsrs	r3, r3, #28
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	4619      	mov	r1, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	440b      	add	r3, r1
 8006c54:	3230      	adds	r2, #48	; 0x30
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]
 8006c5a:	e00a      	b.n	8006c72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	0f1b      	lsrs	r3, r3, #28
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	4619      	mov	r1, r3
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3237      	adds	r2, #55	; 0x37
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	011b      	lsls	r3, r3, #4
 8006c76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	4413      	add	r3, r2
 8006c82:	2200      	movs	r2, #0
 8006c84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	75fb      	strb	r3, [r7, #23]
 8006c8c:	7dfa      	ldrb	r2, [r7, #23]
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d3d3      	bcc.n	8006c3c <IntToUnicode+0x18>
  }
}
 8006c94:	bf00      	nop
 8006c96:	371c      	adds	r7, #28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a0d      	ldr	r2, [pc, #52]	; (8006ce4 <HAL_PCD_MspInit+0x44>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d113      	bne.n	8006cda <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ce8 <HAL_PCD_MspInit+0x48>)
 8006cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb6:	4a0c      	ldr	r2, [pc, #48]	; (8006ce8 <HAL_PCD_MspInit+0x48>)
 8006cb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8006cbe:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <HAL_PCD_MspInit+0x48>)
 8006cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2100      	movs	r1, #0
 8006cce:	2043      	movs	r0, #67	; 0x43
 8006cd0:	f7f9 feff 	bl	8000ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006cd4:	2043      	movs	r0, #67	; 0x43
 8006cd6:	f7f9 ff18 	bl	8000b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006cda:	bf00      	nop
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	40006800 	.word	0x40006800
 8006ce8:	40021000 	.word	0x40021000

08006cec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006d00:	4619      	mov	r1, r3
 8006d02:	4610      	mov	r0, r2
 8006d04:	f7fe fe1c 	bl	8005940 <USBD_LL_SetupStage>
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	015b      	lsls	r3, r3, #5
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	4619      	mov	r1, r3
 8006d34:	f7fe fe4f 	bl	80059d6 <USBD_LL_DataOutStage>
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	015b      	lsls	r3, r3, #5
 8006d58:	4413      	add	r3, r2
 8006d5a:	333c      	adds	r3, #60	; 0x3c
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	78fb      	ldrb	r3, [r7, #3]
 8006d60:	4619      	mov	r1, r3
 8006d62:	f7fe fea9 	bl	8005ab8 <USBD_LL_DataInStage>
}
 8006d66:	bf00      	nop
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fe ffb7 	bl	8005cf0 <USBD_LL_SOF>
}
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006d92:	2301      	movs	r3, #1
 8006d94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d001      	beq.n	8006da2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006d9e:	f7f9 fbe7 	bl	8000570 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006da8:	7bfa      	ldrb	r2, [r7, #15]
 8006daa:	4611      	mov	r1, r2
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7fe ff69 	bl	8005c84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fe ff22 	bl	8005c02 <USBD_LL_Reset>
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe ff64 	bl	8005ca4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006de4:	4b04      	ldr	r3, [pc, #16]	; (8006df8 <HAL_PCD_SuspendCallback+0x30>)
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	4a03      	ldr	r2, [pc, #12]	; (8006df8 <HAL_PCD_SuspendCallback+0x30>)
 8006dea:	f043 0306 	orr.w	r3, r3, #6
 8006dee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	e000ed00 	.word	0xe000ed00

08006dfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e0c:	4b08      	ldr	r3, [pc, #32]	; (8006e30 <HAL_PCD_ResumeCallback+0x34>)
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	4a07      	ldr	r2, [pc, #28]	; (8006e30 <HAL_PCD_ResumeCallback+0x34>)
 8006e12:	f023 0306 	bic.w	r3, r3, #6
 8006e16:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006e18:	f000 fab2 	bl	8007380 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe ff53 	bl	8005cce <USBD_LL_Resume>
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	e000ed00 	.word	0xe000ed00

08006e34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8006e3c:	f7fb f800 	bl	8001e40 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006e40:	4a2b      	ldr	r2, [pc, #172]	; (8006ef0 <USBD_LL_Init+0xbc>)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a29      	ldr	r2, [pc, #164]	; (8006ef0 <USBD_LL_Init+0xbc>)
 8006e4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8006e50:	4b27      	ldr	r3, [pc, #156]	; (8006ef0 <USBD_LL_Init+0xbc>)
 8006e52:	4a28      	ldr	r2, [pc, #160]	; (8006ef4 <USBD_LL_Init+0xc0>)
 8006e54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006e56:	4b26      	ldr	r3, [pc, #152]	; (8006ef0 <USBD_LL_Init+0xbc>)
 8006e58:	2208      	movs	r2, #8
 8006e5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006e5c:	4b24      	ldr	r3, [pc, #144]	; (8006ef0 <USBD_LL_Init+0xbc>)
 8006e5e:	2202      	movs	r2, #2
 8006e60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006e62:	4b23      	ldr	r3, [pc, #140]	; (8006ef0 <USBD_LL_Init+0xbc>)
 8006e64:	2202      	movs	r2, #2
 8006e66:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006e68:	4b21      	ldr	r3, [pc, #132]	; (8006ef0 <USBD_LL_Init+0xbc>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006e6e:	4b20      	ldr	r3, [pc, #128]	; (8006ef0 <USBD_LL_Init+0xbc>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006e74:	4b1e      	ldr	r3, [pc, #120]	; (8006ef0 <USBD_LL_Init+0xbc>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006e7a:	4b1d      	ldr	r3, [pc, #116]	; (8006ef0 <USBD_LL_Init+0xbc>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006e80:	481b      	ldr	r0, [pc, #108]	; (8006ef0 <USBD_LL_Init+0xbc>)
 8006e82:	f7fa f82f 	bl	8000ee4 <HAL_PCD_Init>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8006e8c:	f7f9 fb70 	bl	8000570 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006e96:	2318      	movs	r3, #24
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	f7fa ff04 	bl	8001ca8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006ea6:	2358      	movs	r3, #88	; 0x58
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2180      	movs	r1, #128	; 0x80
 8006eac:	f7fa fefc 	bl	8001ca8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006eb6:	23c0      	movs	r3, #192	; 0xc0
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2181      	movs	r1, #129	; 0x81
 8006ebc:	f7fa fef4 	bl	8001ca8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006ec6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2101      	movs	r1, #1
 8006ece:	f7fa feeb 	bl	8001ca8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006edc:	2200      	movs	r2, #0
 8006ede:	2182      	movs	r1, #130	; 0x82
 8006ee0:	f7fa fee2 	bl	8001ca8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20001110 	.word	0x20001110
 8006ef4:	40006800 	.word	0x40006800

08006ef8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fa f8d0 	bl	80010b4 <HAL_PCD_Start>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d816      	bhi.n	8006f4c <USBD_LL_Start+0x54>
 8006f1e:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <USBD_LL_Start+0x2c>)
 8006f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f24:	08006f35 	.word	0x08006f35
 8006f28:	08006f3b 	.word	0x08006f3b
 8006f2c:	08006f41 	.word	0x08006f41
 8006f30:	08006f47 	.word	0x08006f47
    case HAL_OK :
      usb_status = USBD_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]
    break;
 8006f38:	e00b      	b.n	8006f52 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f3e:	e008      	b.n	8006f52 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f40:	2301      	movs	r3, #1
 8006f42:	73fb      	strb	r3, [r7, #15]
    break;
 8006f44:	e005      	b.n	8006f52 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f46:	2302      	movs	r3, #2
 8006f48:	73fb      	strb	r3, [r7, #15]
    break;
 8006f4a:	e002      	b.n	8006f52 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8006f50:	bf00      	nop
  }
  return usb_status;
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	4608      	mov	r0, r1
 8006f66:	4611      	mov	r1, r2
 8006f68:	461a      	mov	r2, r3
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	70fb      	strb	r3, [r7, #3]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	70bb      	strb	r3, [r7, #2]
 8006f72:	4613      	mov	r3, r2
 8006f74:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006f84:	78bb      	ldrb	r3, [r7, #2]
 8006f86:	883a      	ldrh	r2, [r7, #0]
 8006f88:	78f9      	ldrb	r1, [r7, #3]
 8006f8a:	f7fa fa33 	bl	80013f4 <HAL_PCD_EP_Open>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d817      	bhi.n	8006fc8 <USBD_LL_OpenEP+0x6c>
 8006f98:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <USBD_LL_OpenEP+0x44>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08006fb1 	.word	0x08006fb1
 8006fa4:	08006fb7 	.word	0x08006fb7
 8006fa8:	08006fbd 	.word	0x08006fbd
 8006fac:	08006fc3 	.word	0x08006fc3
    case HAL_OK :
      usb_status = USBD_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8006fb4:	e00b      	b.n	8006fce <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8006fba:	e008      	b.n	8006fce <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8006fc0:	e005      	b.n	8006fce <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8006fc6:	e002      	b.n	8006fce <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	73fb      	strb	r3, [r7, #15]
    break;
 8006fcc:	bf00      	nop
  }
  return usb_status;
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006ff2:	78fa      	ldrb	r2, [r7, #3]
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fa fa5c 	bl	80014b4 <HAL_PCD_EP_Close>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	2b03      	cmp	r3, #3
 8007004:	d816      	bhi.n	8007034 <USBD_LL_CloseEP+0x5c>
 8007006:	a201      	add	r2, pc, #4	; (adr r2, 800700c <USBD_LL_CloseEP+0x34>)
 8007008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700c:	0800701d 	.word	0x0800701d
 8007010:	08007023 	.word	0x08007023
 8007014:	08007029 	.word	0x08007029
 8007018:	0800702f 	.word	0x0800702f
    case HAL_OK :
      usb_status = USBD_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	73fb      	strb	r3, [r7, #15]
    break;
 8007020:	e00b      	b.n	800703a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007022:	2302      	movs	r3, #2
 8007024:	73fb      	strb	r3, [r7, #15]
    break;
 8007026:	e008      	b.n	800703a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007028:	2301      	movs	r3, #1
 800702a:	73fb      	strb	r3, [r7, #15]
    break;
 800702c:	e005      	b.n	800703a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800702e:	2302      	movs	r3, #2
 8007030:	73fb      	strb	r3, [r7, #15]
    break;
 8007032:	e002      	b.n	800703a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007034:	2302      	movs	r3, #2
 8007036:	73fb      	strb	r3, [r7, #15]
    break;
 8007038:	bf00      	nop
  }
  return usb_status;  
 800703a:	7bfb      	ldrb	r3, [r7, #15]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	4611      	mov	r1, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f7fa faf0 	bl	8001648 <HAL_PCD_EP_SetStall>
 8007068:	4603      	mov	r3, r0
 800706a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	2b03      	cmp	r3, #3
 8007070:	d816      	bhi.n	80070a0 <USBD_LL_StallEP+0x5c>
 8007072:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <USBD_LL_StallEP+0x34>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	08007089 	.word	0x08007089
 800707c:	0800708f 	.word	0x0800708f
 8007080:	08007095 	.word	0x08007095
 8007084:	0800709b 	.word	0x0800709b
    case HAL_OK :
      usb_status = USBD_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]
    break;
 800708c:	e00b      	b.n	80070a6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800708e:	2302      	movs	r3, #2
 8007090:	73fb      	strb	r3, [r7, #15]
    break;
 8007092:	e008      	b.n	80070a6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007094:	2301      	movs	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
    break;
 8007098:	e005      	b.n	80070a6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800709a:	2302      	movs	r3, #2
 800709c:	73fb      	strb	r3, [r7, #15]
    break;
 800709e:	e002      	b.n	80070a6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80070a0:	2302      	movs	r3, #2
 80070a2:	73fb      	strb	r3, [r7, #15]
    break;
 80070a4:	bf00      	nop
  }
  return usb_status;  
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80070ca:	78fa      	ldrb	r2, [r7, #3]
 80070cc:	4611      	mov	r1, r2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fa fb14 	bl	80016fc <HAL_PCD_EP_ClrStall>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d816      	bhi.n	800710c <USBD_LL_ClearStallEP+0x5c>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <USBD_LL_ClearStallEP+0x34>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	080070f5 	.word	0x080070f5
 80070e8:	080070fb 	.word	0x080070fb
 80070ec:	08007101 	.word	0x08007101
 80070f0:	08007107 	.word	0x08007107
    case HAL_OK :
      usb_status = USBD_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]
    break;
 80070f8:	e00b      	b.n	8007112 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070fa:	2302      	movs	r3, #2
 80070fc:	73fb      	strb	r3, [r7, #15]
    break;
 80070fe:	e008      	b.n	8007112 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007100:	2301      	movs	r3, #1
 8007102:	73fb      	strb	r3, [r7, #15]
    break;
 8007104:	e005      	b.n	8007112 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007106:	2302      	movs	r3, #2
 8007108:	73fb      	strb	r3, [r7, #15]
    break;
 800710a:	e002      	b.n	8007112 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800710c:	2302      	movs	r3, #2
 800710e:	73fb      	strb	r3, [r7, #15]
    break;
 8007110:	bf00      	nop
  }
  return usb_status; 
 8007112:	7bfb      	ldrb	r3, [r7, #15]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800712e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007134:	2b00      	cmp	r3, #0
 8007136:	da08      	bge.n	800714a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	015b      	lsls	r3, r3, #5
 8007142:	4413      	add	r3, r2
 8007144:	332a      	adds	r3, #42	; 0x2a
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	e008      	b.n	800715c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	015b      	lsls	r3, r3, #5
 8007154:	4413      	add	r3, r2
 8007156:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800715a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007182:	78fa      	ldrb	r2, [r7, #3]
 8007184:	4611      	mov	r1, r2
 8007186:	4618      	mov	r0, r3
 8007188:	f7fa f90f 	bl	80013aa <HAL_PCD_SetAddress>
 800718c:	4603      	mov	r3, r0
 800718e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2b03      	cmp	r3, #3
 8007194:	d816      	bhi.n	80071c4 <USBD_LL_SetUSBAddress+0x5c>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <USBD_LL_SetUSBAddress+0x34>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	080071ad 	.word	0x080071ad
 80071a0:	080071b3 	.word	0x080071b3
 80071a4:	080071b9 	.word	0x080071b9
 80071a8:	080071bf 	.word	0x080071bf
    case HAL_OK :
      usb_status = USBD_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
    break;
 80071b0:	e00b      	b.n	80071ca <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071b2:	2302      	movs	r3, #2
 80071b4:	73fb      	strb	r3, [r7, #15]
    break;
 80071b6:	e008      	b.n	80071ca <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
    break;
 80071bc:	e005      	b.n	80071ca <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071be:	2302      	movs	r3, #2
 80071c0:	73fb      	strb	r3, [r7, #15]
    break;
 80071c2:	e002      	b.n	80071ca <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80071c4:	2302      	movs	r3, #2
 80071c6:	73fb      	strb	r3, [r7, #15]
    break;
 80071c8:	bf00      	nop
  }
  return usb_status;  
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	607a      	str	r2, [r7, #4]
 80071de:	461a      	mov	r2, r3
 80071e0:	460b      	mov	r3, r1
 80071e2:	72fb      	strb	r3, [r7, #11]
 80071e4:	4613      	mov	r3, r2
 80071e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80071f6:	893b      	ldrh	r3, [r7, #8]
 80071f8:	7af9      	ldrb	r1, [r7, #11]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	f7fa f9eb 	bl	80015d6 <HAL_PCD_EP_Transmit>
 8007200:	4603      	mov	r3, r0
 8007202:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007204:	7dbb      	ldrb	r3, [r7, #22]
 8007206:	2b03      	cmp	r3, #3
 8007208:	d816      	bhi.n	8007238 <USBD_LL_Transmit+0x64>
 800720a:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <USBD_LL_Transmit+0x3c>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007221 	.word	0x08007221
 8007214:	08007227 	.word	0x08007227
 8007218:	0800722d 	.word	0x0800722d
 800721c:	08007233 	.word	0x08007233
    case HAL_OK :
      usb_status = USBD_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	75fb      	strb	r3, [r7, #23]
    break;
 8007224:	e00b      	b.n	800723e <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007226:	2302      	movs	r3, #2
 8007228:	75fb      	strb	r3, [r7, #23]
    break;
 800722a:	e008      	b.n	800723e <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800722c:	2301      	movs	r3, #1
 800722e:	75fb      	strb	r3, [r7, #23]
    break;
 8007230:	e005      	b.n	800723e <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	75fb      	strb	r3, [r7, #23]
    break;
 8007236:	e002      	b.n	800723e <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8007238:	2302      	movs	r3, #2
 800723a:	75fb      	strb	r3, [r7, #23]
    break;
 800723c:	bf00      	nop
  }
  return usb_status;    
 800723e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	607a      	str	r2, [r7, #4]
 8007252:	461a      	mov	r2, r3
 8007254:	460b      	mov	r3, r1
 8007256:	72fb      	strb	r3, [r7, #11]
 8007258:	4613      	mov	r3, r2
 800725a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800726a:	893b      	ldrh	r3, [r7, #8]
 800726c:	7af9      	ldrb	r1, [r7, #11]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	f7fa f962 	bl	8001538 <HAL_PCD_EP_Receive>
 8007274:	4603      	mov	r3, r0
 8007276:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007278:	7dbb      	ldrb	r3, [r7, #22]
 800727a:	2b03      	cmp	r3, #3
 800727c:	d816      	bhi.n	80072ac <USBD_LL_PrepareReceive+0x64>
 800727e:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <USBD_LL_PrepareReceive+0x3c>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	08007295 	.word	0x08007295
 8007288:	0800729b 	.word	0x0800729b
 800728c:	080072a1 	.word	0x080072a1
 8007290:	080072a7 	.word	0x080072a7
    case HAL_OK :
      usb_status = USBD_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	75fb      	strb	r3, [r7, #23]
    break;
 8007298:	e00b      	b.n	80072b2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800729a:	2302      	movs	r3, #2
 800729c:	75fb      	strb	r3, [r7, #23]
    break;
 800729e:	e008      	b.n	80072b2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072a0:	2301      	movs	r3, #1
 80072a2:	75fb      	strb	r3, [r7, #23]
    break;
 80072a4:	e005      	b.n	80072b2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072a6:	2302      	movs	r3, #2
 80072a8:	75fb      	strb	r3, [r7, #23]
    break;
 80072aa:	e002      	b.n	80072b2 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 80072ac:	2302      	movs	r3, #2
 80072ae:	75fb      	strb	r3, [r7, #23]
    break;
 80072b0:	bf00      	nop
  }
  return usb_status; 
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80072ce:	78fa      	ldrb	r2, [r7, #3]
 80072d0:	4611      	mov	r1, r2
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fa f96a 	bl	80015ac <HAL_PCD_EP_GetRxCount>
 80072d8:	4603      	mov	r3, r0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <HAL_PCDEx_LPM_Callback+0x18>
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d013      	beq.n	8007322 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80072fa:	e023      	b.n	8007344 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d007      	beq.n	8007314 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007304:	f000 f83c 	bl	8007380 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007308:	4b10      	ldr	r3, [pc, #64]	; (800734c <HAL_PCDEx_LPM_Callback+0x68>)
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	4a0f      	ldr	r2, [pc, #60]	; (800734c <HAL_PCDEx_LPM_Callback+0x68>)
 800730e:	f023 0306 	bic.w	r3, r3, #6
 8007312:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe fcd7 	bl	8005cce <USBD_LL_Resume>
    break;
 8007320:	e010      	b.n	8007344 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe fcbb 	bl	8005ca4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d005      	beq.n	8007342 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007336:	4b05      	ldr	r3, [pc, #20]	; (800734c <HAL_PCDEx_LPM_Callback+0x68>)
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	4a04      	ldr	r2, [pc, #16]	; (800734c <HAL_PCDEx_LPM_Callback+0x68>)
 800733c:	f043 0306 	orr.w	r3, r3, #6
 8007340:	6113      	str	r3, [r2, #16]
    break;   
 8007342:	bf00      	nop
}
 8007344:	bf00      	nop
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	e000ed00 	.word	0xe000ed00

08007350 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007358:	4b03      	ldr	r3, [pc, #12]	; (8007368 <USBD_static_malloc+0x18>)
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	20000214 	.word	0x20000214

0800736c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]

}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007384:	f7f8 ffbc 	bl	8000300 <SystemClock_Config>
}
 8007388:	bf00      	nop
 800738a:	bd80      	pop	{r7, pc}

0800738c <__errno>:
 800738c:	4b01      	ldr	r3, [pc, #4]	; (8007394 <__errno+0x8>)
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	2000018c 	.word	0x2000018c

08007398 <__libc_init_array>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	4e0d      	ldr	r6, [pc, #52]	; (80073d0 <__libc_init_array+0x38>)
 800739c:	4c0d      	ldr	r4, [pc, #52]	; (80073d4 <__libc_init_array+0x3c>)
 800739e:	1ba4      	subs	r4, r4, r6
 80073a0:	10a4      	asrs	r4, r4, #2
 80073a2:	2500      	movs	r5, #0
 80073a4:	42a5      	cmp	r5, r4
 80073a6:	d109      	bne.n	80073bc <__libc_init_array+0x24>
 80073a8:	4e0b      	ldr	r6, [pc, #44]	; (80073d8 <__libc_init_array+0x40>)
 80073aa:	4c0c      	ldr	r4, [pc, #48]	; (80073dc <__libc_init_array+0x44>)
 80073ac:	f000 fc40 	bl	8007c30 <_init>
 80073b0:	1ba4      	subs	r4, r4, r6
 80073b2:	10a4      	asrs	r4, r4, #2
 80073b4:	2500      	movs	r5, #0
 80073b6:	42a5      	cmp	r5, r4
 80073b8:	d105      	bne.n	80073c6 <__libc_init_array+0x2e>
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073c0:	4798      	blx	r3
 80073c2:	3501      	adds	r5, #1
 80073c4:	e7ee      	b.n	80073a4 <__libc_init_array+0xc>
 80073c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073ca:	4798      	blx	r3
 80073cc:	3501      	adds	r5, #1
 80073ce:	e7f2      	b.n	80073b6 <__libc_init_array+0x1e>
 80073d0:	08007d14 	.word	0x08007d14
 80073d4:	08007d14 	.word	0x08007d14
 80073d8:	08007d14 	.word	0x08007d14
 80073dc:	08007d18 	.word	0x08007d18

080073e0 <memset>:
 80073e0:	4402      	add	r2, r0
 80073e2:	4603      	mov	r3, r0
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d100      	bne.n	80073ea <memset+0xa>
 80073e8:	4770      	bx	lr
 80073ea:	f803 1b01 	strb.w	r1, [r3], #1
 80073ee:	e7f9      	b.n	80073e4 <memset+0x4>

080073f0 <_vsniprintf_r>:
 80073f0:	b530      	push	{r4, r5, lr}
 80073f2:	1e14      	subs	r4, r2, #0
 80073f4:	4605      	mov	r5, r0
 80073f6:	b09b      	sub	sp, #108	; 0x6c
 80073f8:	4618      	mov	r0, r3
 80073fa:	da05      	bge.n	8007408 <_vsniprintf_r+0x18>
 80073fc:	238b      	movs	r3, #139	; 0x8b
 80073fe:	602b      	str	r3, [r5, #0]
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	b01b      	add	sp, #108	; 0x6c
 8007406:	bd30      	pop	{r4, r5, pc}
 8007408:	f44f 7302 	mov.w	r3, #520	; 0x208
 800740c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007410:	bf14      	ite	ne
 8007412:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007416:	4623      	moveq	r3, r4
 8007418:	9302      	str	r3, [sp, #8]
 800741a:	9305      	str	r3, [sp, #20]
 800741c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007420:	9100      	str	r1, [sp, #0]
 8007422:	9104      	str	r1, [sp, #16]
 8007424:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007428:	4602      	mov	r2, r0
 800742a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800742c:	4669      	mov	r1, sp
 800742e:	4628      	mov	r0, r5
 8007430:	f000 f872 	bl	8007518 <_svfiprintf_r>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	bfbc      	itt	lt
 8007438:	238b      	movlt	r3, #139	; 0x8b
 800743a:	602b      	strlt	r3, [r5, #0]
 800743c:	2c00      	cmp	r4, #0
 800743e:	d0e1      	beq.n	8007404 <_vsniprintf_r+0x14>
 8007440:	9b00      	ldr	r3, [sp, #0]
 8007442:	2200      	movs	r2, #0
 8007444:	701a      	strb	r2, [r3, #0]
 8007446:	e7dd      	b.n	8007404 <_vsniprintf_r+0x14>

08007448 <vsniprintf>:
 8007448:	b507      	push	{r0, r1, r2, lr}
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	4613      	mov	r3, r2
 800744e:	460a      	mov	r2, r1
 8007450:	4601      	mov	r1, r0
 8007452:	4803      	ldr	r0, [pc, #12]	; (8007460 <vsniprintf+0x18>)
 8007454:	6800      	ldr	r0, [r0, #0]
 8007456:	f7ff ffcb 	bl	80073f0 <_vsniprintf_r>
 800745a:	b003      	add	sp, #12
 800745c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007460:	2000018c 	.word	0x2000018c

08007464 <__ssputs_r>:
 8007464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	688e      	ldr	r6, [r1, #8]
 800746a:	429e      	cmp	r6, r3
 800746c:	4682      	mov	sl, r0
 800746e:	460c      	mov	r4, r1
 8007470:	4690      	mov	r8, r2
 8007472:	4699      	mov	r9, r3
 8007474:	d837      	bhi.n	80074e6 <__ssputs_r+0x82>
 8007476:	898a      	ldrh	r2, [r1, #12]
 8007478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800747c:	d031      	beq.n	80074e2 <__ssputs_r+0x7e>
 800747e:	6825      	ldr	r5, [r4, #0]
 8007480:	6909      	ldr	r1, [r1, #16]
 8007482:	1a6f      	subs	r7, r5, r1
 8007484:	6965      	ldr	r5, [r4, #20]
 8007486:	2302      	movs	r3, #2
 8007488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800748c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007490:	f109 0301 	add.w	r3, r9, #1
 8007494:	443b      	add	r3, r7
 8007496:	429d      	cmp	r5, r3
 8007498:	bf38      	it	cc
 800749a:	461d      	movcc	r5, r3
 800749c:	0553      	lsls	r3, r2, #21
 800749e:	d530      	bpl.n	8007502 <__ssputs_r+0x9e>
 80074a0:	4629      	mov	r1, r5
 80074a2:	f000 fb2b 	bl	8007afc <_malloc_r>
 80074a6:	4606      	mov	r6, r0
 80074a8:	b950      	cbnz	r0, 80074c0 <__ssputs_r+0x5c>
 80074aa:	230c      	movs	r3, #12
 80074ac:	f8ca 3000 	str.w	r3, [sl]
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b6:	81a3      	strh	r3, [r4, #12]
 80074b8:	f04f 30ff 	mov.w	r0, #4294967295
 80074bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c0:	463a      	mov	r2, r7
 80074c2:	6921      	ldr	r1, [r4, #16]
 80074c4:	f000 faa8 	bl	8007a18 <memcpy>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d2:	81a3      	strh	r3, [r4, #12]
 80074d4:	6126      	str	r6, [r4, #16]
 80074d6:	6165      	str	r5, [r4, #20]
 80074d8:	443e      	add	r6, r7
 80074da:	1bed      	subs	r5, r5, r7
 80074dc:	6026      	str	r6, [r4, #0]
 80074de:	60a5      	str	r5, [r4, #8]
 80074e0:	464e      	mov	r6, r9
 80074e2:	454e      	cmp	r6, r9
 80074e4:	d900      	bls.n	80074e8 <__ssputs_r+0x84>
 80074e6:	464e      	mov	r6, r9
 80074e8:	4632      	mov	r2, r6
 80074ea:	4641      	mov	r1, r8
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	f000 fa9e 	bl	8007a2e <memmove>
 80074f2:	68a3      	ldr	r3, [r4, #8]
 80074f4:	1b9b      	subs	r3, r3, r6
 80074f6:	60a3      	str	r3, [r4, #8]
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	441e      	add	r6, r3
 80074fc:	6026      	str	r6, [r4, #0]
 80074fe:	2000      	movs	r0, #0
 8007500:	e7dc      	b.n	80074bc <__ssputs_r+0x58>
 8007502:	462a      	mov	r2, r5
 8007504:	f000 fb54 	bl	8007bb0 <_realloc_r>
 8007508:	4606      	mov	r6, r0
 800750a:	2800      	cmp	r0, #0
 800750c:	d1e2      	bne.n	80074d4 <__ssputs_r+0x70>
 800750e:	6921      	ldr	r1, [r4, #16]
 8007510:	4650      	mov	r0, sl
 8007512:	f000 faa5 	bl	8007a60 <_free_r>
 8007516:	e7c8      	b.n	80074aa <__ssputs_r+0x46>

08007518 <_svfiprintf_r>:
 8007518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751c:	461d      	mov	r5, r3
 800751e:	898b      	ldrh	r3, [r1, #12]
 8007520:	061f      	lsls	r7, r3, #24
 8007522:	b09d      	sub	sp, #116	; 0x74
 8007524:	4680      	mov	r8, r0
 8007526:	460c      	mov	r4, r1
 8007528:	4616      	mov	r6, r2
 800752a:	d50f      	bpl.n	800754c <_svfiprintf_r+0x34>
 800752c:	690b      	ldr	r3, [r1, #16]
 800752e:	b96b      	cbnz	r3, 800754c <_svfiprintf_r+0x34>
 8007530:	2140      	movs	r1, #64	; 0x40
 8007532:	f000 fae3 	bl	8007afc <_malloc_r>
 8007536:	6020      	str	r0, [r4, #0]
 8007538:	6120      	str	r0, [r4, #16]
 800753a:	b928      	cbnz	r0, 8007548 <_svfiprintf_r+0x30>
 800753c:	230c      	movs	r3, #12
 800753e:	f8c8 3000 	str.w	r3, [r8]
 8007542:	f04f 30ff 	mov.w	r0, #4294967295
 8007546:	e0c8      	b.n	80076da <_svfiprintf_r+0x1c2>
 8007548:	2340      	movs	r3, #64	; 0x40
 800754a:	6163      	str	r3, [r4, #20]
 800754c:	2300      	movs	r3, #0
 800754e:	9309      	str	r3, [sp, #36]	; 0x24
 8007550:	2320      	movs	r3, #32
 8007552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007556:	2330      	movs	r3, #48	; 0x30
 8007558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800755c:	9503      	str	r5, [sp, #12]
 800755e:	f04f 0b01 	mov.w	fp, #1
 8007562:	4637      	mov	r7, r6
 8007564:	463d      	mov	r5, r7
 8007566:	f815 3b01 	ldrb.w	r3, [r5], #1
 800756a:	b10b      	cbz	r3, 8007570 <_svfiprintf_r+0x58>
 800756c:	2b25      	cmp	r3, #37	; 0x25
 800756e:	d13e      	bne.n	80075ee <_svfiprintf_r+0xd6>
 8007570:	ebb7 0a06 	subs.w	sl, r7, r6
 8007574:	d00b      	beq.n	800758e <_svfiprintf_r+0x76>
 8007576:	4653      	mov	r3, sl
 8007578:	4632      	mov	r2, r6
 800757a:	4621      	mov	r1, r4
 800757c:	4640      	mov	r0, r8
 800757e:	f7ff ff71 	bl	8007464 <__ssputs_r>
 8007582:	3001      	adds	r0, #1
 8007584:	f000 80a4 	beq.w	80076d0 <_svfiprintf_r+0x1b8>
 8007588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758a:	4453      	add	r3, sl
 800758c:	9309      	str	r3, [sp, #36]	; 0x24
 800758e:	783b      	ldrb	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 809d 	beq.w	80076d0 <_svfiprintf_r+0x1b8>
 8007596:	2300      	movs	r3, #0
 8007598:	f04f 32ff 	mov.w	r2, #4294967295
 800759c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075a0:	9304      	str	r3, [sp, #16]
 80075a2:	9307      	str	r3, [sp, #28]
 80075a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075a8:	931a      	str	r3, [sp, #104]	; 0x68
 80075aa:	462f      	mov	r7, r5
 80075ac:	2205      	movs	r2, #5
 80075ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80075b2:	4850      	ldr	r0, [pc, #320]	; (80076f4 <_svfiprintf_r+0x1dc>)
 80075b4:	f7f8 fe14 	bl	80001e0 <memchr>
 80075b8:	9b04      	ldr	r3, [sp, #16]
 80075ba:	b9d0      	cbnz	r0, 80075f2 <_svfiprintf_r+0xda>
 80075bc:	06d9      	lsls	r1, r3, #27
 80075be:	bf44      	itt	mi
 80075c0:	2220      	movmi	r2, #32
 80075c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075c6:	071a      	lsls	r2, r3, #28
 80075c8:	bf44      	itt	mi
 80075ca:	222b      	movmi	r2, #43	; 0x2b
 80075cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075d0:	782a      	ldrb	r2, [r5, #0]
 80075d2:	2a2a      	cmp	r2, #42	; 0x2a
 80075d4:	d015      	beq.n	8007602 <_svfiprintf_r+0xea>
 80075d6:	9a07      	ldr	r2, [sp, #28]
 80075d8:	462f      	mov	r7, r5
 80075da:	2000      	movs	r0, #0
 80075dc:	250a      	movs	r5, #10
 80075de:	4639      	mov	r1, r7
 80075e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075e4:	3b30      	subs	r3, #48	; 0x30
 80075e6:	2b09      	cmp	r3, #9
 80075e8:	d94d      	bls.n	8007686 <_svfiprintf_r+0x16e>
 80075ea:	b1b8      	cbz	r0, 800761c <_svfiprintf_r+0x104>
 80075ec:	e00f      	b.n	800760e <_svfiprintf_r+0xf6>
 80075ee:	462f      	mov	r7, r5
 80075f0:	e7b8      	b.n	8007564 <_svfiprintf_r+0x4c>
 80075f2:	4a40      	ldr	r2, [pc, #256]	; (80076f4 <_svfiprintf_r+0x1dc>)
 80075f4:	1a80      	subs	r0, r0, r2
 80075f6:	fa0b f000 	lsl.w	r0, fp, r0
 80075fa:	4318      	orrs	r0, r3
 80075fc:	9004      	str	r0, [sp, #16]
 80075fe:	463d      	mov	r5, r7
 8007600:	e7d3      	b.n	80075aa <_svfiprintf_r+0x92>
 8007602:	9a03      	ldr	r2, [sp, #12]
 8007604:	1d11      	adds	r1, r2, #4
 8007606:	6812      	ldr	r2, [r2, #0]
 8007608:	9103      	str	r1, [sp, #12]
 800760a:	2a00      	cmp	r2, #0
 800760c:	db01      	blt.n	8007612 <_svfiprintf_r+0xfa>
 800760e:	9207      	str	r2, [sp, #28]
 8007610:	e004      	b.n	800761c <_svfiprintf_r+0x104>
 8007612:	4252      	negs	r2, r2
 8007614:	f043 0302 	orr.w	r3, r3, #2
 8007618:	9207      	str	r2, [sp, #28]
 800761a:	9304      	str	r3, [sp, #16]
 800761c:	783b      	ldrb	r3, [r7, #0]
 800761e:	2b2e      	cmp	r3, #46	; 0x2e
 8007620:	d10c      	bne.n	800763c <_svfiprintf_r+0x124>
 8007622:	787b      	ldrb	r3, [r7, #1]
 8007624:	2b2a      	cmp	r3, #42	; 0x2a
 8007626:	d133      	bne.n	8007690 <_svfiprintf_r+0x178>
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	1d1a      	adds	r2, r3, #4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	9203      	str	r2, [sp, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	bfb8      	it	lt
 8007634:	f04f 33ff 	movlt.w	r3, #4294967295
 8007638:	3702      	adds	r7, #2
 800763a:	9305      	str	r3, [sp, #20]
 800763c:	4d2e      	ldr	r5, [pc, #184]	; (80076f8 <_svfiprintf_r+0x1e0>)
 800763e:	7839      	ldrb	r1, [r7, #0]
 8007640:	2203      	movs	r2, #3
 8007642:	4628      	mov	r0, r5
 8007644:	f7f8 fdcc 	bl	80001e0 <memchr>
 8007648:	b138      	cbz	r0, 800765a <_svfiprintf_r+0x142>
 800764a:	2340      	movs	r3, #64	; 0x40
 800764c:	1b40      	subs	r0, r0, r5
 800764e:	fa03 f000 	lsl.w	r0, r3, r0
 8007652:	9b04      	ldr	r3, [sp, #16]
 8007654:	4303      	orrs	r3, r0
 8007656:	3701      	adds	r7, #1
 8007658:	9304      	str	r3, [sp, #16]
 800765a:	7839      	ldrb	r1, [r7, #0]
 800765c:	4827      	ldr	r0, [pc, #156]	; (80076fc <_svfiprintf_r+0x1e4>)
 800765e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007662:	2206      	movs	r2, #6
 8007664:	1c7e      	adds	r6, r7, #1
 8007666:	f7f8 fdbb 	bl	80001e0 <memchr>
 800766a:	2800      	cmp	r0, #0
 800766c:	d038      	beq.n	80076e0 <_svfiprintf_r+0x1c8>
 800766e:	4b24      	ldr	r3, [pc, #144]	; (8007700 <_svfiprintf_r+0x1e8>)
 8007670:	bb13      	cbnz	r3, 80076b8 <_svfiprintf_r+0x1a0>
 8007672:	9b03      	ldr	r3, [sp, #12]
 8007674:	3307      	adds	r3, #7
 8007676:	f023 0307 	bic.w	r3, r3, #7
 800767a:	3308      	adds	r3, #8
 800767c:	9303      	str	r3, [sp, #12]
 800767e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007680:	444b      	add	r3, r9
 8007682:	9309      	str	r3, [sp, #36]	; 0x24
 8007684:	e76d      	b.n	8007562 <_svfiprintf_r+0x4a>
 8007686:	fb05 3202 	mla	r2, r5, r2, r3
 800768a:	2001      	movs	r0, #1
 800768c:	460f      	mov	r7, r1
 800768e:	e7a6      	b.n	80075de <_svfiprintf_r+0xc6>
 8007690:	2300      	movs	r3, #0
 8007692:	3701      	adds	r7, #1
 8007694:	9305      	str	r3, [sp, #20]
 8007696:	4619      	mov	r1, r3
 8007698:	250a      	movs	r5, #10
 800769a:	4638      	mov	r0, r7
 800769c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076a0:	3a30      	subs	r2, #48	; 0x30
 80076a2:	2a09      	cmp	r2, #9
 80076a4:	d903      	bls.n	80076ae <_svfiprintf_r+0x196>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0c8      	beq.n	800763c <_svfiprintf_r+0x124>
 80076aa:	9105      	str	r1, [sp, #20]
 80076ac:	e7c6      	b.n	800763c <_svfiprintf_r+0x124>
 80076ae:	fb05 2101 	mla	r1, r5, r1, r2
 80076b2:	2301      	movs	r3, #1
 80076b4:	4607      	mov	r7, r0
 80076b6:	e7f0      	b.n	800769a <_svfiprintf_r+0x182>
 80076b8:	ab03      	add	r3, sp, #12
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	4622      	mov	r2, r4
 80076be:	4b11      	ldr	r3, [pc, #68]	; (8007704 <_svfiprintf_r+0x1ec>)
 80076c0:	a904      	add	r1, sp, #16
 80076c2:	4640      	mov	r0, r8
 80076c4:	f3af 8000 	nop.w
 80076c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076cc:	4681      	mov	r9, r0
 80076ce:	d1d6      	bne.n	800767e <_svfiprintf_r+0x166>
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	065b      	lsls	r3, r3, #25
 80076d4:	f53f af35 	bmi.w	8007542 <_svfiprintf_r+0x2a>
 80076d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076da:	b01d      	add	sp, #116	; 0x74
 80076dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e0:	ab03      	add	r3, sp, #12
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	4622      	mov	r2, r4
 80076e6:	4b07      	ldr	r3, [pc, #28]	; (8007704 <_svfiprintf_r+0x1ec>)
 80076e8:	a904      	add	r1, sp, #16
 80076ea:	4640      	mov	r0, r8
 80076ec:	f000 f882 	bl	80077f4 <_printf_i>
 80076f0:	e7ea      	b.n	80076c8 <_svfiprintf_r+0x1b0>
 80076f2:	bf00      	nop
 80076f4:	08007ce0 	.word	0x08007ce0
 80076f8:	08007ce6 	.word	0x08007ce6
 80076fc:	08007cea 	.word	0x08007cea
 8007700:	00000000 	.word	0x00000000
 8007704:	08007465 	.word	0x08007465

08007708 <_printf_common>:
 8007708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800770c:	4691      	mov	r9, r2
 800770e:	461f      	mov	r7, r3
 8007710:	688a      	ldr	r2, [r1, #8]
 8007712:	690b      	ldr	r3, [r1, #16]
 8007714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007718:	4293      	cmp	r3, r2
 800771a:	bfb8      	it	lt
 800771c:	4613      	movlt	r3, r2
 800771e:	f8c9 3000 	str.w	r3, [r9]
 8007722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007726:	4606      	mov	r6, r0
 8007728:	460c      	mov	r4, r1
 800772a:	b112      	cbz	r2, 8007732 <_printf_common+0x2a>
 800772c:	3301      	adds	r3, #1
 800772e:	f8c9 3000 	str.w	r3, [r9]
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	0699      	lsls	r1, r3, #26
 8007736:	bf42      	ittt	mi
 8007738:	f8d9 3000 	ldrmi.w	r3, [r9]
 800773c:	3302      	addmi	r3, #2
 800773e:	f8c9 3000 	strmi.w	r3, [r9]
 8007742:	6825      	ldr	r5, [r4, #0]
 8007744:	f015 0506 	ands.w	r5, r5, #6
 8007748:	d107      	bne.n	800775a <_printf_common+0x52>
 800774a:	f104 0a19 	add.w	sl, r4, #25
 800774e:	68e3      	ldr	r3, [r4, #12]
 8007750:	f8d9 2000 	ldr.w	r2, [r9]
 8007754:	1a9b      	subs	r3, r3, r2
 8007756:	42ab      	cmp	r3, r5
 8007758:	dc28      	bgt.n	80077ac <_printf_common+0xa4>
 800775a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	3300      	adds	r3, #0
 8007762:	bf18      	it	ne
 8007764:	2301      	movne	r3, #1
 8007766:	0692      	lsls	r2, r2, #26
 8007768:	d42d      	bmi.n	80077c6 <_printf_common+0xbe>
 800776a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800776e:	4639      	mov	r1, r7
 8007770:	4630      	mov	r0, r6
 8007772:	47c0      	blx	r8
 8007774:	3001      	adds	r0, #1
 8007776:	d020      	beq.n	80077ba <_printf_common+0xb2>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	68e5      	ldr	r5, [r4, #12]
 800777c:	f8d9 2000 	ldr.w	r2, [r9]
 8007780:	f003 0306 	and.w	r3, r3, #6
 8007784:	2b04      	cmp	r3, #4
 8007786:	bf08      	it	eq
 8007788:	1aad      	subeq	r5, r5, r2
 800778a:	68a3      	ldr	r3, [r4, #8]
 800778c:	6922      	ldr	r2, [r4, #16]
 800778e:	bf0c      	ite	eq
 8007790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007794:	2500      	movne	r5, #0
 8007796:	4293      	cmp	r3, r2
 8007798:	bfc4      	itt	gt
 800779a:	1a9b      	subgt	r3, r3, r2
 800779c:	18ed      	addgt	r5, r5, r3
 800779e:	f04f 0900 	mov.w	r9, #0
 80077a2:	341a      	adds	r4, #26
 80077a4:	454d      	cmp	r5, r9
 80077a6:	d11a      	bne.n	80077de <_printf_common+0xd6>
 80077a8:	2000      	movs	r0, #0
 80077aa:	e008      	b.n	80077be <_printf_common+0xb6>
 80077ac:	2301      	movs	r3, #1
 80077ae:	4652      	mov	r2, sl
 80077b0:	4639      	mov	r1, r7
 80077b2:	4630      	mov	r0, r6
 80077b4:	47c0      	blx	r8
 80077b6:	3001      	adds	r0, #1
 80077b8:	d103      	bne.n	80077c2 <_printf_common+0xba>
 80077ba:	f04f 30ff 	mov.w	r0, #4294967295
 80077be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c2:	3501      	adds	r5, #1
 80077c4:	e7c3      	b.n	800774e <_printf_common+0x46>
 80077c6:	18e1      	adds	r1, r4, r3
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	2030      	movs	r0, #48	; 0x30
 80077cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077d0:	4422      	add	r2, r4
 80077d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077da:	3302      	adds	r3, #2
 80077dc:	e7c5      	b.n	800776a <_printf_common+0x62>
 80077de:	2301      	movs	r3, #1
 80077e0:	4622      	mov	r2, r4
 80077e2:	4639      	mov	r1, r7
 80077e4:	4630      	mov	r0, r6
 80077e6:	47c0      	blx	r8
 80077e8:	3001      	adds	r0, #1
 80077ea:	d0e6      	beq.n	80077ba <_printf_common+0xb2>
 80077ec:	f109 0901 	add.w	r9, r9, #1
 80077f0:	e7d8      	b.n	80077a4 <_printf_common+0x9c>
	...

080077f4 <_printf_i>:
 80077f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80077fc:	460c      	mov	r4, r1
 80077fe:	7e09      	ldrb	r1, [r1, #24]
 8007800:	b085      	sub	sp, #20
 8007802:	296e      	cmp	r1, #110	; 0x6e
 8007804:	4617      	mov	r7, r2
 8007806:	4606      	mov	r6, r0
 8007808:	4698      	mov	r8, r3
 800780a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800780c:	f000 80b3 	beq.w	8007976 <_printf_i+0x182>
 8007810:	d822      	bhi.n	8007858 <_printf_i+0x64>
 8007812:	2963      	cmp	r1, #99	; 0x63
 8007814:	d036      	beq.n	8007884 <_printf_i+0x90>
 8007816:	d80a      	bhi.n	800782e <_printf_i+0x3a>
 8007818:	2900      	cmp	r1, #0
 800781a:	f000 80b9 	beq.w	8007990 <_printf_i+0x19c>
 800781e:	2958      	cmp	r1, #88	; 0x58
 8007820:	f000 8083 	beq.w	800792a <_printf_i+0x136>
 8007824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007828:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800782c:	e032      	b.n	8007894 <_printf_i+0xa0>
 800782e:	2964      	cmp	r1, #100	; 0x64
 8007830:	d001      	beq.n	8007836 <_printf_i+0x42>
 8007832:	2969      	cmp	r1, #105	; 0x69
 8007834:	d1f6      	bne.n	8007824 <_printf_i+0x30>
 8007836:	6820      	ldr	r0, [r4, #0]
 8007838:	6813      	ldr	r3, [r2, #0]
 800783a:	0605      	lsls	r5, r0, #24
 800783c:	f103 0104 	add.w	r1, r3, #4
 8007840:	d52a      	bpl.n	8007898 <_printf_i+0xa4>
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6011      	str	r1, [r2, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	da03      	bge.n	8007852 <_printf_i+0x5e>
 800784a:	222d      	movs	r2, #45	; 0x2d
 800784c:	425b      	negs	r3, r3
 800784e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007852:	486f      	ldr	r0, [pc, #444]	; (8007a10 <_printf_i+0x21c>)
 8007854:	220a      	movs	r2, #10
 8007856:	e039      	b.n	80078cc <_printf_i+0xd8>
 8007858:	2973      	cmp	r1, #115	; 0x73
 800785a:	f000 809d 	beq.w	8007998 <_printf_i+0x1a4>
 800785e:	d808      	bhi.n	8007872 <_printf_i+0x7e>
 8007860:	296f      	cmp	r1, #111	; 0x6f
 8007862:	d020      	beq.n	80078a6 <_printf_i+0xb2>
 8007864:	2970      	cmp	r1, #112	; 0x70
 8007866:	d1dd      	bne.n	8007824 <_printf_i+0x30>
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	f043 0320 	orr.w	r3, r3, #32
 800786e:	6023      	str	r3, [r4, #0]
 8007870:	e003      	b.n	800787a <_printf_i+0x86>
 8007872:	2975      	cmp	r1, #117	; 0x75
 8007874:	d017      	beq.n	80078a6 <_printf_i+0xb2>
 8007876:	2978      	cmp	r1, #120	; 0x78
 8007878:	d1d4      	bne.n	8007824 <_printf_i+0x30>
 800787a:	2378      	movs	r3, #120	; 0x78
 800787c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007880:	4864      	ldr	r0, [pc, #400]	; (8007a14 <_printf_i+0x220>)
 8007882:	e055      	b.n	8007930 <_printf_i+0x13c>
 8007884:	6813      	ldr	r3, [r2, #0]
 8007886:	1d19      	adds	r1, r3, #4
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6011      	str	r1, [r2, #0]
 800788c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007894:	2301      	movs	r3, #1
 8007896:	e08c      	b.n	80079b2 <_printf_i+0x1be>
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6011      	str	r1, [r2, #0]
 800789c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078a0:	bf18      	it	ne
 80078a2:	b21b      	sxthne	r3, r3
 80078a4:	e7cf      	b.n	8007846 <_printf_i+0x52>
 80078a6:	6813      	ldr	r3, [r2, #0]
 80078a8:	6825      	ldr	r5, [r4, #0]
 80078aa:	1d18      	adds	r0, r3, #4
 80078ac:	6010      	str	r0, [r2, #0]
 80078ae:	0628      	lsls	r0, r5, #24
 80078b0:	d501      	bpl.n	80078b6 <_printf_i+0xc2>
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	e002      	b.n	80078bc <_printf_i+0xc8>
 80078b6:	0668      	lsls	r0, r5, #25
 80078b8:	d5fb      	bpl.n	80078b2 <_printf_i+0xbe>
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	4854      	ldr	r0, [pc, #336]	; (8007a10 <_printf_i+0x21c>)
 80078be:	296f      	cmp	r1, #111	; 0x6f
 80078c0:	bf14      	ite	ne
 80078c2:	220a      	movne	r2, #10
 80078c4:	2208      	moveq	r2, #8
 80078c6:	2100      	movs	r1, #0
 80078c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078cc:	6865      	ldr	r5, [r4, #4]
 80078ce:	60a5      	str	r5, [r4, #8]
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	f2c0 8095 	blt.w	8007a00 <_printf_i+0x20c>
 80078d6:	6821      	ldr	r1, [r4, #0]
 80078d8:	f021 0104 	bic.w	r1, r1, #4
 80078dc:	6021      	str	r1, [r4, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d13d      	bne.n	800795e <_printf_i+0x16a>
 80078e2:	2d00      	cmp	r5, #0
 80078e4:	f040 808e 	bne.w	8007a04 <_printf_i+0x210>
 80078e8:	4665      	mov	r5, ip
 80078ea:	2a08      	cmp	r2, #8
 80078ec:	d10b      	bne.n	8007906 <_printf_i+0x112>
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	07db      	lsls	r3, r3, #31
 80078f2:	d508      	bpl.n	8007906 <_printf_i+0x112>
 80078f4:	6923      	ldr	r3, [r4, #16]
 80078f6:	6862      	ldr	r2, [r4, #4]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	bfde      	ittt	le
 80078fc:	2330      	movle	r3, #48	; 0x30
 80078fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007902:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007906:	ebac 0305 	sub.w	r3, ip, r5
 800790a:	6123      	str	r3, [r4, #16]
 800790c:	f8cd 8000 	str.w	r8, [sp]
 8007910:	463b      	mov	r3, r7
 8007912:	aa03      	add	r2, sp, #12
 8007914:	4621      	mov	r1, r4
 8007916:	4630      	mov	r0, r6
 8007918:	f7ff fef6 	bl	8007708 <_printf_common>
 800791c:	3001      	adds	r0, #1
 800791e:	d14d      	bne.n	80079bc <_printf_i+0x1c8>
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	b005      	add	sp, #20
 8007926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800792a:	4839      	ldr	r0, [pc, #228]	; (8007a10 <_printf_i+0x21c>)
 800792c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007930:	6813      	ldr	r3, [r2, #0]
 8007932:	6821      	ldr	r1, [r4, #0]
 8007934:	1d1d      	adds	r5, r3, #4
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6015      	str	r5, [r2, #0]
 800793a:	060a      	lsls	r2, r1, #24
 800793c:	d50b      	bpl.n	8007956 <_printf_i+0x162>
 800793e:	07ca      	lsls	r2, r1, #31
 8007940:	bf44      	itt	mi
 8007942:	f041 0120 	orrmi.w	r1, r1, #32
 8007946:	6021      	strmi	r1, [r4, #0]
 8007948:	b91b      	cbnz	r3, 8007952 <_printf_i+0x15e>
 800794a:	6822      	ldr	r2, [r4, #0]
 800794c:	f022 0220 	bic.w	r2, r2, #32
 8007950:	6022      	str	r2, [r4, #0]
 8007952:	2210      	movs	r2, #16
 8007954:	e7b7      	b.n	80078c6 <_printf_i+0xd2>
 8007956:	064d      	lsls	r5, r1, #25
 8007958:	bf48      	it	mi
 800795a:	b29b      	uxthmi	r3, r3
 800795c:	e7ef      	b.n	800793e <_printf_i+0x14a>
 800795e:	4665      	mov	r5, ip
 8007960:	fbb3 f1f2 	udiv	r1, r3, r2
 8007964:	fb02 3311 	mls	r3, r2, r1, r3
 8007968:	5cc3      	ldrb	r3, [r0, r3]
 800796a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800796e:	460b      	mov	r3, r1
 8007970:	2900      	cmp	r1, #0
 8007972:	d1f5      	bne.n	8007960 <_printf_i+0x16c>
 8007974:	e7b9      	b.n	80078ea <_printf_i+0xf6>
 8007976:	6813      	ldr	r3, [r2, #0]
 8007978:	6825      	ldr	r5, [r4, #0]
 800797a:	6961      	ldr	r1, [r4, #20]
 800797c:	1d18      	adds	r0, r3, #4
 800797e:	6010      	str	r0, [r2, #0]
 8007980:	0628      	lsls	r0, r5, #24
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	d501      	bpl.n	800798a <_printf_i+0x196>
 8007986:	6019      	str	r1, [r3, #0]
 8007988:	e002      	b.n	8007990 <_printf_i+0x19c>
 800798a:	066a      	lsls	r2, r5, #25
 800798c:	d5fb      	bpl.n	8007986 <_printf_i+0x192>
 800798e:	8019      	strh	r1, [r3, #0]
 8007990:	2300      	movs	r3, #0
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	4665      	mov	r5, ip
 8007996:	e7b9      	b.n	800790c <_printf_i+0x118>
 8007998:	6813      	ldr	r3, [r2, #0]
 800799a:	1d19      	adds	r1, r3, #4
 800799c:	6011      	str	r1, [r2, #0]
 800799e:	681d      	ldr	r5, [r3, #0]
 80079a0:	6862      	ldr	r2, [r4, #4]
 80079a2:	2100      	movs	r1, #0
 80079a4:	4628      	mov	r0, r5
 80079a6:	f7f8 fc1b 	bl	80001e0 <memchr>
 80079aa:	b108      	cbz	r0, 80079b0 <_printf_i+0x1bc>
 80079ac:	1b40      	subs	r0, r0, r5
 80079ae:	6060      	str	r0, [r4, #4]
 80079b0:	6863      	ldr	r3, [r4, #4]
 80079b2:	6123      	str	r3, [r4, #16]
 80079b4:	2300      	movs	r3, #0
 80079b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ba:	e7a7      	b.n	800790c <_printf_i+0x118>
 80079bc:	6923      	ldr	r3, [r4, #16]
 80079be:	462a      	mov	r2, r5
 80079c0:	4639      	mov	r1, r7
 80079c2:	4630      	mov	r0, r6
 80079c4:	47c0      	blx	r8
 80079c6:	3001      	adds	r0, #1
 80079c8:	d0aa      	beq.n	8007920 <_printf_i+0x12c>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	079b      	lsls	r3, r3, #30
 80079ce:	d413      	bmi.n	80079f8 <_printf_i+0x204>
 80079d0:	68e0      	ldr	r0, [r4, #12]
 80079d2:	9b03      	ldr	r3, [sp, #12]
 80079d4:	4298      	cmp	r0, r3
 80079d6:	bfb8      	it	lt
 80079d8:	4618      	movlt	r0, r3
 80079da:	e7a3      	b.n	8007924 <_printf_i+0x130>
 80079dc:	2301      	movs	r3, #1
 80079de:	464a      	mov	r2, r9
 80079e0:	4639      	mov	r1, r7
 80079e2:	4630      	mov	r0, r6
 80079e4:	47c0      	blx	r8
 80079e6:	3001      	adds	r0, #1
 80079e8:	d09a      	beq.n	8007920 <_printf_i+0x12c>
 80079ea:	3501      	adds	r5, #1
 80079ec:	68e3      	ldr	r3, [r4, #12]
 80079ee:	9a03      	ldr	r2, [sp, #12]
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	42ab      	cmp	r3, r5
 80079f4:	dcf2      	bgt.n	80079dc <_printf_i+0x1e8>
 80079f6:	e7eb      	b.n	80079d0 <_printf_i+0x1dc>
 80079f8:	2500      	movs	r5, #0
 80079fa:	f104 0919 	add.w	r9, r4, #25
 80079fe:	e7f5      	b.n	80079ec <_printf_i+0x1f8>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1ac      	bne.n	800795e <_printf_i+0x16a>
 8007a04:	7803      	ldrb	r3, [r0, #0]
 8007a06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a0e:	e76c      	b.n	80078ea <_printf_i+0xf6>
 8007a10:	08007cf1 	.word	0x08007cf1
 8007a14:	08007d02 	.word	0x08007d02

08007a18 <memcpy>:
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	1e43      	subs	r3, r0, #1
 8007a1c:	440a      	add	r2, r1
 8007a1e:	4291      	cmp	r1, r2
 8007a20:	d100      	bne.n	8007a24 <memcpy+0xc>
 8007a22:	bd10      	pop	{r4, pc}
 8007a24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a2c:	e7f7      	b.n	8007a1e <memcpy+0x6>

08007a2e <memmove>:
 8007a2e:	4288      	cmp	r0, r1
 8007a30:	b510      	push	{r4, lr}
 8007a32:	eb01 0302 	add.w	r3, r1, r2
 8007a36:	d807      	bhi.n	8007a48 <memmove+0x1a>
 8007a38:	1e42      	subs	r2, r0, #1
 8007a3a:	4299      	cmp	r1, r3
 8007a3c:	d00a      	beq.n	8007a54 <memmove+0x26>
 8007a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a42:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007a46:	e7f8      	b.n	8007a3a <memmove+0xc>
 8007a48:	4283      	cmp	r3, r0
 8007a4a:	d9f5      	bls.n	8007a38 <memmove+0xa>
 8007a4c:	1881      	adds	r1, r0, r2
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	42d3      	cmn	r3, r2
 8007a52:	d100      	bne.n	8007a56 <memmove+0x28>
 8007a54:	bd10      	pop	{r4, pc}
 8007a56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a5a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007a5e:	e7f7      	b.n	8007a50 <memmove+0x22>

08007a60 <_free_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4605      	mov	r5, r0
 8007a64:	2900      	cmp	r1, #0
 8007a66:	d045      	beq.n	8007af4 <_free_r+0x94>
 8007a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a6c:	1f0c      	subs	r4, r1, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	bfb8      	it	lt
 8007a72:	18e4      	addlt	r4, r4, r3
 8007a74:	f000 f8d2 	bl	8007c1c <__malloc_lock>
 8007a78:	4a1f      	ldr	r2, [pc, #124]	; (8007af8 <_free_r+0x98>)
 8007a7a:	6813      	ldr	r3, [r2, #0]
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	b933      	cbnz	r3, 8007a8e <_free_r+0x2e>
 8007a80:	6063      	str	r3, [r4, #4]
 8007a82:	6014      	str	r4, [r2, #0]
 8007a84:	4628      	mov	r0, r5
 8007a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a8a:	f000 b8c8 	b.w	8007c1e <__malloc_unlock>
 8007a8e:	42a3      	cmp	r3, r4
 8007a90:	d90c      	bls.n	8007aac <_free_r+0x4c>
 8007a92:	6821      	ldr	r1, [r4, #0]
 8007a94:	1862      	adds	r2, r4, r1
 8007a96:	4293      	cmp	r3, r2
 8007a98:	bf04      	itt	eq
 8007a9a:	681a      	ldreq	r2, [r3, #0]
 8007a9c:	685b      	ldreq	r3, [r3, #4]
 8007a9e:	6063      	str	r3, [r4, #4]
 8007aa0:	bf04      	itt	eq
 8007aa2:	1852      	addeq	r2, r2, r1
 8007aa4:	6022      	streq	r2, [r4, #0]
 8007aa6:	6004      	str	r4, [r0, #0]
 8007aa8:	e7ec      	b.n	8007a84 <_free_r+0x24>
 8007aaa:	4613      	mov	r3, r2
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	b10a      	cbz	r2, 8007ab4 <_free_r+0x54>
 8007ab0:	42a2      	cmp	r2, r4
 8007ab2:	d9fa      	bls.n	8007aaa <_free_r+0x4a>
 8007ab4:	6819      	ldr	r1, [r3, #0]
 8007ab6:	1858      	adds	r0, r3, r1
 8007ab8:	42a0      	cmp	r0, r4
 8007aba:	d10b      	bne.n	8007ad4 <_free_r+0x74>
 8007abc:	6820      	ldr	r0, [r4, #0]
 8007abe:	4401      	add	r1, r0
 8007ac0:	1858      	adds	r0, r3, r1
 8007ac2:	4282      	cmp	r2, r0
 8007ac4:	6019      	str	r1, [r3, #0]
 8007ac6:	d1dd      	bne.n	8007a84 <_free_r+0x24>
 8007ac8:	6810      	ldr	r0, [r2, #0]
 8007aca:	6852      	ldr	r2, [r2, #4]
 8007acc:	605a      	str	r2, [r3, #4]
 8007ace:	4401      	add	r1, r0
 8007ad0:	6019      	str	r1, [r3, #0]
 8007ad2:	e7d7      	b.n	8007a84 <_free_r+0x24>
 8007ad4:	d902      	bls.n	8007adc <_free_r+0x7c>
 8007ad6:	230c      	movs	r3, #12
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	e7d3      	b.n	8007a84 <_free_r+0x24>
 8007adc:	6820      	ldr	r0, [r4, #0]
 8007ade:	1821      	adds	r1, r4, r0
 8007ae0:	428a      	cmp	r2, r1
 8007ae2:	bf04      	itt	eq
 8007ae4:	6811      	ldreq	r1, [r2, #0]
 8007ae6:	6852      	ldreq	r2, [r2, #4]
 8007ae8:	6062      	str	r2, [r4, #4]
 8007aea:	bf04      	itt	eq
 8007aec:	1809      	addeq	r1, r1, r0
 8007aee:	6021      	streq	r1, [r4, #0]
 8007af0:	605c      	str	r4, [r3, #4]
 8007af2:	e7c7      	b.n	8007a84 <_free_r+0x24>
 8007af4:	bd38      	pop	{r3, r4, r5, pc}
 8007af6:	bf00      	nop
 8007af8:	20000434 	.word	0x20000434

08007afc <_malloc_r>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	1ccd      	adds	r5, r1, #3
 8007b00:	f025 0503 	bic.w	r5, r5, #3
 8007b04:	3508      	adds	r5, #8
 8007b06:	2d0c      	cmp	r5, #12
 8007b08:	bf38      	it	cc
 8007b0a:	250c      	movcc	r5, #12
 8007b0c:	2d00      	cmp	r5, #0
 8007b0e:	4606      	mov	r6, r0
 8007b10:	db01      	blt.n	8007b16 <_malloc_r+0x1a>
 8007b12:	42a9      	cmp	r1, r5
 8007b14:	d903      	bls.n	8007b1e <_malloc_r+0x22>
 8007b16:	230c      	movs	r3, #12
 8007b18:	6033      	str	r3, [r6, #0]
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
 8007b1e:	f000 f87d 	bl	8007c1c <__malloc_lock>
 8007b22:	4a21      	ldr	r2, [pc, #132]	; (8007ba8 <_malloc_r+0xac>)
 8007b24:	6814      	ldr	r4, [r2, #0]
 8007b26:	4621      	mov	r1, r4
 8007b28:	b991      	cbnz	r1, 8007b50 <_malloc_r+0x54>
 8007b2a:	4c20      	ldr	r4, [pc, #128]	; (8007bac <_malloc_r+0xb0>)
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	b91b      	cbnz	r3, 8007b38 <_malloc_r+0x3c>
 8007b30:	4630      	mov	r0, r6
 8007b32:	f000 f863 	bl	8007bfc <_sbrk_r>
 8007b36:	6020      	str	r0, [r4, #0]
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f000 f85e 	bl	8007bfc <_sbrk_r>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d124      	bne.n	8007b8e <_malloc_r+0x92>
 8007b44:	230c      	movs	r3, #12
 8007b46:	6033      	str	r3, [r6, #0]
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f000 f868 	bl	8007c1e <__malloc_unlock>
 8007b4e:	e7e4      	b.n	8007b1a <_malloc_r+0x1e>
 8007b50:	680b      	ldr	r3, [r1, #0]
 8007b52:	1b5b      	subs	r3, r3, r5
 8007b54:	d418      	bmi.n	8007b88 <_malloc_r+0x8c>
 8007b56:	2b0b      	cmp	r3, #11
 8007b58:	d90f      	bls.n	8007b7a <_malloc_r+0x7e>
 8007b5a:	600b      	str	r3, [r1, #0]
 8007b5c:	50cd      	str	r5, [r1, r3]
 8007b5e:	18cc      	adds	r4, r1, r3
 8007b60:	4630      	mov	r0, r6
 8007b62:	f000 f85c 	bl	8007c1e <__malloc_unlock>
 8007b66:	f104 000b 	add.w	r0, r4, #11
 8007b6a:	1d23      	adds	r3, r4, #4
 8007b6c:	f020 0007 	bic.w	r0, r0, #7
 8007b70:	1ac3      	subs	r3, r0, r3
 8007b72:	d0d3      	beq.n	8007b1c <_malloc_r+0x20>
 8007b74:	425a      	negs	r2, r3
 8007b76:	50e2      	str	r2, [r4, r3]
 8007b78:	e7d0      	b.n	8007b1c <_malloc_r+0x20>
 8007b7a:	428c      	cmp	r4, r1
 8007b7c:	684b      	ldr	r3, [r1, #4]
 8007b7e:	bf16      	itet	ne
 8007b80:	6063      	strne	r3, [r4, #4]
 8007b82:	6013      	streq	r3, [r2, #0]
 8007b84:	460c      	movne	r4, r1
 8007b86:	e7eb      	b.n	8007b60 <_malloc_r+0x64>
 8007b88:	460c      	mov	r4, r1
 8007b8a:	6849      	ldr	r1, [r1, #4]
 8007b8c:	e7cc      	b.n	8007b28 <_malloc_r+0x2c>
 8007b8e:	1cc4      	adds	r4, r0, #3
 8007b90:	f024 0403 	bic.w	r4, r4, #3
 8007b94:	42a0      	cmp	r0, r4
 8007b96:	d005      	beq.n	8007ba4 <_malloc_r+0xa8>
 8007b98:	1a21      	subs	r1, r4, r0
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f000 f82e 	bl	8007bfc <_sbrk_r>
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d0cf      	beq.n	8007b44 <_malloc_r+0x48>
 8007ba4:	6025      	str	r5, [r4, #0]
 8007ba6:	e7db      	b.n	8007b60 <_malloc_r+0x64>
 8007ba8:	20000434 	.word	0x20000434
 8007bac:	20000438 	.word	0x20000438

08007bb0 <_realloc_r>:
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	4607      	mov	r7, r0
 8007bb4:	4614      	mov	r4, r2
 8007bb6:	460e      	mov	r6, r1
 8007bb8:	b921      	cbnz	r1, 8007bc4 <_realloc_r+0x14>
 8007bba:	4611      	mov	r1, r2
 8007bbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007bc0:	f7ff bf9c 	b.w	8007afc <_malloc_r>
 8007bc4:	b922      	cbnz	r2, 8007bd0 <_realloc_r+0x20>
 8007bc6:	f7ff ff4b 	bl	8007a60 <_free_r>
 8007bca:	4625      	mov	r5, r4
 8007bcc:	4628      	mov	r0, r5
 8007bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bd0:	f000 f826 	bl	8007c20 <_malloc_usable_size_r>
 8007bd4:	42a0      	cmp	r0, r4
 8007bd6:	d20f      	bcs.n	8007bf8 <_realloc_r+0x48>
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4638      	mov	r0, r7
 8007bdc:	f7ff ff8e 	bl	8007afc <_malloc_r>
 8007be0:	4605      	mov	r5, r0
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d0f2      	beq.n	8007bcc <_realloc_r+0x1c>
 8007be6:	4631      	mov	r1, r6
 8007be8:	4622      	mov	r2, r4
 8007bea:	f7ff ff15 	bl	8007a18 <memcpy>
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7ff ff35 	bl	8007a60 <_free_r>
 8007bf6:	e7e9      	b.n	8007bcc <_realloc_r+0x1c>
 8007bf8:	4635      	mov	r5, r6
 8007bfa:	e7e7      	b.n	8007bcc <_realloc_r+0x1c>

08007bfc <_sbrk_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4c06      	ldr	r4, [pc, #24]	; (8007c18 <_sbrk_r+0x1c>)
 8007c00:	2300      	movs	r3, #0
 8007c02:	4605      	mov	r5, r0
 8007c04:	4608      	mov	r0, r1
 8007c06:	6023      	str	r3, [r4, #0]
 8007c08:	f7f8 fd6a 	bl	80006e0 <_sbrk>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_sbrk_r+0x1a>
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_sbrk_r+0x1a>
 8007c14:	602b      	str	r3, [r5, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	20001384 	.word	0x20001384

08007c1c <__malloc_lock>:
 8007c1c:	4770      	bx	lr

08007c1e <__malloc_unlock>:
 8007c1e:	4770      	bx	lr

08007c20 <_malloc_usable_size_r>:
 8007c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c24:	1f18      	subs	r0, r3, #4
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	bfbc      	itt	lt
 8007c2a:	580b      	ldrlt	r3, [r1, r0]
 8007c2c:	18c0      	addlt	r0, r0, r3
 8007c2e:	4770      	bx	lr

08007c30 <_init>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	bf00      	nop
 8007c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c36:	bc08      	pop	{r3}
 8007c38:	469e      	mov	lr, r3
 8007c3a:	4770      	bx	lr

08007c3c <_fini>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	bf00      	nop
 8007c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c42:	bc08      	pop	{r3}
 8007c44:	469e      	mov	lr, r3
 8007c46:	4770      	bx	lr
